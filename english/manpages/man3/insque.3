.\" peter memishian -- meem@gnu.ai.mit.edu
.\" $Id: insque.3,v 1.2 1996/10/30 21:03:39 meem Exp meem $
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"   Linux libc source code (5.4.7)
.\"   Solaris 2.x, OSF/1, and HP-UX manpages
.\"   Curry's "UNIX Systems Programming for SVR4" (O'Reilly & Associates 1996)
.\"
.\" Changed to POSIX, 2003-08-11, aeb+wh
.\"
.TH INSQUE 3  2008-07-11 "" "Linux Programmer's Manual"
.SH NAME
insque, remque \- insert/remove an item from a queue
.SH SYNOPSIS
.nf
.B #include <search.h>
.sp
.BI "void insque(void *" elem ", void *" prev );

.BI "void remque(void *" elem );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.BR insque (),
.BR remque ():
_SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500
.SH DESCRIPTION
.BR insque ()
and
.BR remque ()
are functions for manipulating
doubly-linked lists.
Each element in the list is a structure of
which the first two structure elements are a forward and a
backward pointer.

.BR insque ()
inserts the element pointed to by \fIelem\fP
immediately after the element pointed to by \fIprev\fP, which must
not be NULL.

.BR remque ()
removes the element pointed to by \fIelem\fP from the
doubly-linked list.
.SH "CONFORMING TO"
POSIX.1-2001.
.SH "NOTES"
Traditionally (e.g., SunOS, Linux libc 4 and libc 5),
the arguments of these functions were of type \fIstruct qelem *\fP,
defined as:

.in +4n
.nf
struct qelem {
    struct qelem *q_forw;
    struct qelem *q_back;
    char          q_data[1];
};
.fi
.in

This is still what you will get if
.B _GNU_SOURCE
is defined before
including \fI<search.h>\fP.

The location of the prototypes for these functions differs among several
versions of Unix.
The above is the POSIX version.
Some systems place them in \fI<string.h>\fP.
Linux libc4 and libc 5 placed them
in \fI<stdlib.h>\fP.
.SH COLOPHON
This page is part of release 3.25 of the Linux
.I man-pages
project.
A description of the project,
and information about reporting bugs,
can be found at
http://www.kernel.org/doc/man-pages/.
