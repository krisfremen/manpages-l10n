.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1993 Michael Haardt
.\" (u31b3hs@pool.informatik.rwth-aachen.de),
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" Modified Fri Jul 23 23:47:18 1993 by Rik Faith (faith@cs.unc.edu)
.\" Translated to German Sun Oct 06 15:00:00 1996 by Patrick Rother <krd@gulu.net>
.\"
.\"
.TH PTRACE 2 "6. Oktober 1996" "Linux 0.99.11" "Systemaufrufe"
.SH NAME
ptrace \- Prozessverfolgung
.SH ÜBERSICHT
.B #include <sys/ptrace.h>
.sp
.BI "int ptrace(int " request ", int " pid ", int " addr ", int " data );
.SH BESCHREIBUNG
.B Ptrace
stellt einen Weg zur Verfügung, durch den ein Vaterprozess die Ausführung
eines Tochterprozesses kontrollieren und sein core überwachen und
ändern kann.  Der Hauptnutzen besteht in der Implementation von
Fehlersuche mit Unterbrechungspunkten (breakpoint debugging).  Ein
getraceter Prozess läuft bis ein Signal auftritt.  Dann
stoppt er und der Vater wird benachrichtigt durch
.BR wait (2).
Wenn des Prozess sich in gestopptem Zustand befindet, kann sein Speicher
gelesen und beschrieben werden.  Der Vater kann auch die Tochter bewegen,
die Ausführung fortzusetzen; optional kann das Signal, dass das Stoppen
bewirkte, ignoriert werden.
.LP
Der Wert des Arguments
.I request
legt die genaue Aktion des Systemaufrufs
fest:
.TP
PTRACE_TRACEME
Dieser Prozess wird durch seinen Vater verfolgt.  Der Vater sollte erwarten
die Tochter zu verfolgen.
.TP
PTRACE_PEEKTEXT, PTRACE_PEEKDATA
Lese Wort bei Adresse
.IR addr .
.TP
PTRACE_PEEKUSR
Lese Wort bei Adresse
.I addr
im
.BR USER \-Bereich.
.TP
PTRACE_POKETEXT, PTRACE_POKEDATA
Schreibe Wort an Adresse
.IR addr .
.TP
PTRACE_POKEUSR
Schreibe Wort an Adresse
.I addr
im
.BR USER \-Bereich.
.TP
PTRACE_SYSCALL, PTRACE_CONT
Fahre fort nach Signal.
.TP
PTRACE_KILL
Sendet dem Tochterprozess ein
.B SIGKILL
um ihn zu beenden.
.TP
PTRACE_SINGLESTEP
Setze das trap Flag für Einzelschrittmodus.
.TP
PTRACE_ATTACH
Hänge an den Prozess an, der durch
.IR pid
spezifiziert ist.
.TP
PTRACE_DETACH
Gib einen Prozess frei, der vorher verbunden war.
.SH BEMERKUNGEN
.BR init ,
der Prozess mit der Prozessnummer 1, darf diese Funktion nicht benutzen.
.SH "RÜCKGABEWERT"
Bei Erfolg wird Null zurückgegeben.  Im Fehlerfall wird \-1 zurückgegeben und
.I errno
entsprechend gesetzt.
.SH FEHLER
.TP 0.8i
.B EPERM
Der angegebene Prozess (d.h.
.BR init ),
kann nicht verfolgt werden oder wird bereits verfolgt.
.TP
.B ESRCH
Der angegebene Prozess existiert nicht.
.TP
.B EIO
.I Request
ist nicht gültig.
.SH "KONFORM ZU"
SVID EXT, AT&T, X/OPEN, BSD 4.3
.SH "SIEHE AUCH"
.BR gdb (1),
.BR exec (2),
.BR signal (2),
.BR wait (2).

