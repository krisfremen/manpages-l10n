.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" (c) 1993 by Thomas König (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\"
.\" Modified Sat Jul 24 13:32:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" German Translation Tue Mar 26 21:25:00 1996 Elmar Jansen (ej@pumuckel.gun.de)
.\"
.TH WAIT4 2  "26 März 1996" "Linux" "Systemaufrufe"
.SH NAME
wait3, wait4 \- wait for process termination, BSD style
wait3, wait4 \- wartet auf die Beendigung eines Prozesses, BSD style
.SH SYNOPSIS
.nf
.B #define _USE_BSD
.B #include <sys/types.h>
.B #include <sys/resource.h>
.B #include <sys/wait.h>
.sp 2
.BI "pid_t wait3(int *" "status" ", int " options ","
.BI "      struct rusage *" rusage ")"
.sp
.BI "pid_t wait4(pid_t " pid ", int *" status ", int " options ,
.BI "      struct rusage *" rusage ")"
.fi
.SH BESCHREIBUNG
Die Funktion 
.B wait3
unterbricht die Fortführung des aktuellen Prozesses bis ein Kind\-
Prozess sich beendet, oder ein Signal eintrifft um den aktuellen Prozess
zu beenden. Wenn ein Kind-Prozess schon beendet ist (ein sogennenter Zombie),
wird die Funktion sofort beendet. Alle Systemresourcen des Kind-Prozesses 
werden freigegeben.

Die Funktion
.B wait4
unterbricht die Fortführung des aktuelllen Prozesses bis der Kind-Prozess
mit der Pozessnummer 
.I pid
sich beendet, oder ein Signal eintrifft um den aktuellen Prozess
zu beenden. Wenn der Kind-Prozess mit der Prozessnummer
.I pid
schon beendet ist (ein sogennenter Zombie),wird die Funktion sofort beendet.
Alle Systemresourcen des Kind-Prozesses werden freigegeben.

Der Wert 
.I pid
kann einer der folgenden sein:
.IP "< \-1"
hierbei wird auf ein beliebiges Kind gewartet des Prozessgruppennummer
gleich ist mit dem absoluten Wert von
.IR pid .
.IP \-1
hierbei wird auf irgendein Kind gewartet: dies ist identisch mit dem
Aufruf von
.BR wait3 .
.IP 0
hierbei wird auf irgendein Kind gewartet dessen Prozessgruppennummer 
gleich ist mit der des Vaters.
.IP "> 0"
hierbei wird auf das Kind gewartet dessen Prozessnummer gleich ist mit 
dem Wert von
.IR pid .
.PP
Der Wert von
.I options
ist das ERgebnis eines exclusiven ODER von keinem oder mehreren der
folgenden Konstanten:
.TP
.B WNOHANG
hierbei wird sofort zurückgekehrt wenn auf kein Kind gewartet werden muss.
.TP
.B WUNTRACED
hierbei wird auch zurückgekehrt wenn auf Kinder gewartet werden soll die
gestoppt sind und deren Status noch nicht zurückgegeben wurde.
.PP
Wenn
.I status
nicht 
.BR NULL ,
ist speichern
.B wait3
or
.B wait4
die Stausinformation in der Variablen
.IR statloc .
.PP
Der Status kann mit folgenden Makros ermittelt werden:
.TP
.BI WIFEXITED(* status )
ist nicht Null wenn das Kind normal beendet wurde.
.TP
.BI WEXITSTATUS(* status )
gibt die letzten acht bits des Returncodes des Kindes zurück, welches
als Argument der Funktion
.B exit
gesetzt wurde, oder als Argument eines
.B return
Statements des main Programms. Dieses Makro kann nur benutzt werden wenn
.B WIFEXITED
einen Wert ungleich Null liefert.
.TP
.BI WIFSIGNALED(* status )
liefert wahr zurück, wenn das Kind aufgrund eines nicht abgefangenen
Signals beendet wurde.
.TP
.BI WTERMSIG(* status )
liefert die Signalnummer des Signals das des Kind beendete. Dieses Makro
kann nur benutzt werden wenn
.B WIFSIGNALED
einen Wert ungleich Null liefert.
.TP
.BI WIFSTOPPED(* status )
liefert wahr zurück wenn das Kind das den Return auslöste im Moment
gestoppt ist. Dies ist nur der Fall wenn der Aufruf wärnd eines
.BR WUNTRACED .
erfolgte.
.TP
.BI WSTOPSIG(* status )
liefert die Signalnummer des Signals das das Kind stoppte. Dieses Makro
kann nur benutzt werden wenn
.B WIFSTOPPED
einen Wert ungleich Null liefert.

Wenn
.I rusage
nicht 
.BR NULL ,
ist wird 
.B struct rusage
, wie in
.B <sys/resource.h>
definiert, mit Accountinginformationen gefüllt. Siehe dazu
.BR getrusage (2)
.SH "RÜCKGABEWERT"
Die Prozessnummer des Kindes welches sich beendet,oder bei einem 
Fehler \-1, oder Null wenn  
.B WNOHANG
benutzt wurde und kein Kind mehr existierte. In diesem Fall wird
.I errno
auf einen zufälligen Wert gesetzt.
.SH "ERRORS"
.TP 0.8i
.B ECHILD
Wenn der Kindprozess mit der
.I pid
nicht existiert.
.TP
.B EPERM
Wenn die effektive Userid des aufrufenden Prozesses nicht übereinstimmt
mit dem Prozess auf den gewartet werden soll und die effektive Userid
des aufrufenden Prozesses nicht die des Superusers ist.
.TP
.B ERESTARTSYS
Wenn
.B WNOHANG
nicht gesetzt wurde und ein nicht geblocktes Signal oder ein
.B SIGCHLD
zurückgegeben wurde; dies ist eine Erweiterung des POSIX.1 Standards.
.SH "KONFORM ZU"
POSIX.1
.SH "SIEHE AUCH"
.BR signal "(2), " getrusage "(2), " wait "(2), " signal (7)
