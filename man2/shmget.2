.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) Juliy 28, 1993
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Juli 28 10:57:35 1993, Rik Faith <faith@cs.unc.edu>
.\" Modified Sun November 28 16:43:30 1993, Rik Faith <faith@cs.unc.edu>
.\"          with material from Giorgio Ciucci <giorgio@crcc.it>
.\" Portions Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" Modified Tue Oktober 22 22:03:17 1996 by Eric S. Raymond <esr@thyrsus.com>
.\"
.\" Translated into German by Ralf Demmer, Translation & Consulting
.\" rdemmer@rdemmer.de, http://www.rdemmer.de
.\" Berlin, 29.1.1999
.\"
.TH SHMGET 2 "28. November 1993" "Linux 0.99.11" "Systemaufrufe"
.SH BEZEICHNUNG
shmget \- weist ein gemeinsames Speichersegment zu
.SH "ÜBERSICHT"
.ad l
.B #include <sys/ipc.h>
.sp
.B #include <sys/shm.h>
.sp
.BI int shmget(key_t  key , int  size , int  shmflg );
.ad b
.SH BESCHREIBUNG
.B shmget()
gibt den Identifikator des gemeinsamen Speichersegments zurück, der dem
Wert des Arguments 
.IR key 
zugewiesen ist.  Ein neues gemeinsames Speichersegment mit der um 
.I size
auf ein mehrfaches von 
.BR PAGE_SIZE 
aufgerundeten Größe wird nur dann erstellt,
.I key
den Wert 
.B IPC_PRIVATE
hat oder 
.I key
nicht 
.BR IPC_PRIVATE 
ist, sonst wird dem Wert 
.IR key 
kein gemeinsames Speichersegment zugeordnet, und 
.B IPC_CREAT
im 
.I shmflg
wird gesetzt (d.h.
.IB shmflg &IPC_CREAT
ergibt nicht NULL).
The presence in
.PP
.I shmflg
besteht aus:
.TP 12
.B IPC_CREAT
für das Erstellen eines neuen Segments.  Wenn dieses Flag nicht belegt wird,
sucht 
.B shmget()
das
.I key
zugeordnete Segment, prüft, ob der Benutzer die nötigen Rechte besitzt, um
die dem Segment zugeordnete
.I shmid
zu erhalten und stellt sicher, dass das Segment nicht zum Löschen markiert ist.
.TP
.B IPC_EXCL
sorgt im Verbund mit
.B IPC_CREAT
für eine Fehlermeldung, falls das Segment bereits existiert. 
.TP
.B mode_flags (untere 9 Bit)
legt die Rechte für den Eigentümer, die Benutzergruppe und den Rest der Welt
fest.  Zurzeit werden die Ausführungsrechte vom System nicht verwendet.
.PP
Wenn ein neues Segment erstellt wird, werden die Zugriffsrechte von 
.I shmflg
in den 
.I shm_perm
-Teil des 
.I shmid_ds
-Struktur kopiert, die das Segment definiert. Die
.IR shmid_ds -Struktur:
.PP
.in +0.5i
.nf
struct shmid_ds {
	struct	ipc_perm shm_perm;	/* Rechte */
	int	shm_segsz;		/* Größe des Segments in Byte */
	time_t	shm_atime;		/* letzte Anhangszeitpunkt */
	time_t	shm_dtime;		/* letzter Entkopplungszeitpunkt */
	time_t	shm_ctime;		/* letzter Änderungszeitpunkt */
	unsigned short	shm_cpid;	/* PID des Erzeugers */
	unsigned short	shm_lpid;	/* PID des letzten Operators */
	short	shm_nattch;		/* Anzahl der momentanen Anhänge */
};
.fi
.in -0.5i
.PP
.in +0.5i
.nf
struct ipc_perm
{
  key_t  key;
  ushort uid;   /* Besitzer-euid und egid */
  ushort gid;
  ushort cuid;  /* Erzeuger-euid und egid */
  ushort cgid;
  ushort mode;  /* untere 9 Bit von \fIshmflg\fP */
  ushort seq;   /* Folgenummer */
};
.fi
.PP
Im weiteren initialisiert der Systemaufruf beim Erstellen die Systemdatenstruktur des gemeinsamen Speichersegments
.B shmid_ds
wie folgt:
.IP
.B shm_perm.cuid
und
.B shm_perm.uid
werden mit den tatsächliche Benutzer\-ID des aufrufenden Prozesses belegt.
.IP
.B shm_perm.cgid
und
.B shm_perm.gid
werden mit den tatsächliche Gruppen\-ID des aufrufenden Prozesses belegt.
.IP
Die niederwertigsten 9 Bit von 
.B shm_perm.mode
werden den niederwertigsten 9 Bit von 
.IR shmflg 
gleichgesetzt.
.IP
.B shm_segsz
wird mit dem Wert von 
.IR size.
.IP
.BR shm_lpid ,
.BR shm_nattch ,
.B shm_atime
und
.B shm_dtime
werden auf 
.BR 0
gesetzt.
.IP
.B shm_ctime
wird auf die aktuelle Zeit gesetzt.
.PP
Wenn das gemeinsame Speichersegment bereits existiert, werden die
Zugriffsrechte verglichen und überprüft, ob es zum Löschen freigegeben
(bzw. markiert) wurde.
.PP
.SH SYSTEM CALLS
.TP 0.8i
.B fork()
Nach einem 
.B fork()
erbt der Kind-Prozess das angehängte gemeinsame Speichersegment.
.TP
.B exec()
Nach einem 
.B exec()
sind alle angehängten gemeinsamen Speichersegmente entkoppelt (nicht zerstört).
.TP
.B exit()
Nach einem
.B exit()
sind alle angehängten gemeinsamen Speichersegmente entkoppelt (nicht zerstört).
.PP
.SH "RÜCKGABEWERT"
Bei Erfolg wird ein gültiger Segment-Identifier zurückgegeben:
.IR shmid ,
bei Auftreten eines Fehlers \-1.
.SH FEHLER
Bei Auftreten eines Fehlers enthält
.B errno
einen der folgenden Werte:
.TP 12
.B EINVAL
wird zurückgegeben, wenn
.BR SHMMIN " >"
.IR size " oder " size
.RB " > " SHMMAX
oder, wenn
.I size
größer als die Segmentgröße ist.
.TP
.B EEXIST
wird zurückgegeben, wenn 
.B IPC_CREAT | IPC_EXCL
angegeben wurde und das Segment existiert.
.TP
.B EIDRM
wird zurückgegeben, wenn das Segment als zerstört markiert oder entfernt wurde.
.TP
.B ENOSPC
wird zurückgegeben, wenn alle möglichen IDs für gemeinsame Speichersegmente 
.BR  ( SHMMNI )
angenommen haben oder ein Segment der angeforderten 
.I Größe
zu einer Überschreitung der systemweiten Speichergrenze für gemeinsame
Speichersegmente führen würde.
.BR  ( SHMALL ).
.TP
.B ENOENT
wird zurückgegeben, wenn für den angegebenen
.I key
kein Segment existiert und 
.B IPC_CREAT
nicht angegeben wurde.
.TP
.B EACCES
wird zurückgegeben, wenn der Benutzer keine Zugriffsrechte auf das gemeinsame
Speichersegment besitzt.
.TP
.B ENOMEM
wird zurückgegeben, wenn kein Speicher für den Segment-Overhead bereitgestellt
werden konnte.
.SH ANMERKUNGEN
.B IPC_PRIVATE
ist kein Flag-Feld, sondern vom Typ
.B key_t .
Wenn dieser spezielle Wert für 
.IR key ,
verwendet wird, ignoriert der Systemaufruf alles bis auf die unteren 9 Bit von
.I shmflg
und erstellt bei Erfolg ein neues gemeinsames Speichersegment.
.PP
Es gelten die folgenden Einschränkungen auf die Ressourven gemeinsamer
Speichersegmente, die einen
.B shmget
-Aufruf betreffen:
.TP 11
.B SHMALL
Systemweiter Maximalwert für gemeinsam genutzte Speicherblöcke: abhängig von
der Politik.
.TP
.B SHMMAX
Maximalgröße eines gemeinsamen Speichersegments in Byte: abhängig von der
jeweiligen Umsetzung (momentan bei 4 MB).
.TP
.B SHMMIN
Minimalgröße eines gemeinsamen Speichersegments: abhängig von der jeweiligen
Umsetzung (momentan 1 byte, obwohl
.B PAGE_SIZE
die wirkliche Minimalgröße darstellt).
.TP
.B SHMMNI
Systemweite maximale Anzahl von gemeinsamen Speichersegmenten: abhängig von
der jeweiligen Umsetzung (momentan 4096).
.PP
Die jeweilige Umsetzung setzt keine Beschrängungen für die maximale Anzahl
von gemeinsamen Speichersegmenten pro Prozess
.RB ( SHMSEG ).
.SH BUGS
Die Verwendung von 
.B IPC_PRIVATE
unterbindet nicht den Zugriff anderer Prozesse auf das zugeordnete gemeinsame
Speichersegment.
.PP
Genau wie für Dateien, gibt es momentan keinen eigenständigen Weg für einen
Prozess den ausschließlichen Zugriff auf ein gemeinsam genutztes
Speichersegment sicherzustellen.  Die Zuweisung von 
.B IPC_CREAT
und
.B IPC_EXCL
zu
.I shmflg
garantiert bei Erfolg nur die Erstellung eines neuen gemeinsamen
Speichersegments, nicht aber den ausschließlichen Zugriff auf das Segment.
.SH "KONFORM ZU"
SVr4, SVID.  Unter SVr4 ist eine weitere Fehlerbedingung EEXIST dokumentiert.
Weder SVr4 noch SVID enthalten eine Dokumentation zu EIDRM-Bedingungen. 
.SH "SIEHE AUCH"
.BR ftok (3),
.BR ipc (5),
.BR shmctl (2),
.BR shmat (2),
.BR shmdt (2).

