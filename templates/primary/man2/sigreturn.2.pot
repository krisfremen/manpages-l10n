# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-07-17 21:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#, no-wrap
msgid "SIGRETURN"
msgstr ""

#. type: TH
#, no-wrap
msgid "2015-12-28"
msgstr ""

#. type: TH
#, no-wrap
msgid "Linux"
msgstr ""

#. type: TH
#, no-wrap
msgid "Linux Programmer's Manual"
msgstr ""

#. type: SH
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
msgid "sigreturn, rt_sigreturn - return from signal handler and cleanup stack frame"
msgstr ""

#. type: SH
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
msgid "B<int sigreturn(...);>"
msgstr ""

#. type: SH
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#.  See arch/x86/kernel/signal.c::__setup_frame() [in 3.17 source code]
#. type: Plain text
msgid ""
"If the Linux kernel determines that an unblocked signal is pending for a "
"process, then, at the next transition back to user mode in that process "
"(e.g., upon return from a system call or when the process is rescheduled "
"onto the CPU), it saves various pieces of process context (processor status "
"word, registers, signal mask, and signal stack settings)  into the "
"user-space stack."
msgstr ""

#. type: Plain text
msgid ""
"The kernel also arranges that, during the transition back to user mode, the "
"signal handler is called, and that, upon return from the handler, control "
"passes to a piece of user-space code commonly called the \"signal "
"trampoline\".  The signal trampoline code in turn calls B<sigreturn>()."
msgstr ""

#. type: Plain text
msgid ""
"This B<sigreturn>()  call undoes everything that was done\\(emchanging the "
"process's signal mask, switching signal stacks (see "
"B<sigaltstack>(2))\\(emin order to invoke the signal handler.  It restores "
"the process's signal mask, switches stacks, and restores the process's "
"context (processor flags and registers, including the stack pointer and "
"instruction pointer), so that the process resumes execution at the point "
"where it was interrupted by the signal."
msgstr ""

#. type: SH
#, no-wrap
msgid "RETURN VALUE"
msgstr ""

#. type: Plain text
msgid "B<sigreturn>()  never returns."
msgstr ""

#. type: SH
#, no-wrap
msgid "CONFORMING TO"
msgstr ""

#. type: Plain text
msgid ""
"Many UNIX-type systems have a B<sigreturn>()  system call or near "
"equivalent.  However, this call is not specified in POSIX, and details of "
"its behavior vary across systems."
msgstr ""

#. type: SH
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
msgid ""
"B<sigreturn>()  exists only to allow the implementation of signal handlers.  "
"It should B<never> be called directly.  Details of the arguments (if any) "
"passed to B<sigreturn>()  vary depending on the architecture."
msgstr ""

#.  See, for example, sysdeps/unix/sysv/linux/i386/sigaction.c and
#.  sysdeps/unix/sysv/linux/x86_64/sigaction.c in the glibc (2.20) source.
#. type: Plain text
msgid ""
"Once upon a time, UNIX systems placed the signal trampoline code onto the "
"user stack.  Nowadays, pages of the user stack are protected so as to "
"disallow code execution.  Thus, on contemporary Linux systems, depending on "
"the architecture, the signal trampoline code lives either in the B<vdso>(7)  "
"or in the C library.  In the latter case, the C library supplies the "
"location of the trampoline code using the I<sa_restorer> field of the "
"I<sigaction> structure that is passed to B<sigaction>(2), and sets the "
"B<SA_RESTORER> flag in the I<sa_flags> field."
msgstr ""

#. type: Plain text
msgid ""
"The saved process context information is placed in a I<ucontext_t> structure "
"(see I<E<lt>sys/ucontext.hE<gt>>).  That structure is visible within the "
"signal handler as the third argument of a handler established with the "
"B<SA_SIGINFO> flag."
msgstr ""

#. type: Plain text
msgid ""
"On some other UNIX systems, the operation of the signal trampoline differs a "
"little.  In particular, on some systems, upon transitioning back to user "
"mode, the kernel passes control to the trampoline (rather than the signal "
"handler), and the trampoline code calls the signal handler (and then calls "
"B<sigreturn>()  once the handler returns)."
msgstr ""

#. type: SS
#, no-wrap
msgid "C library/kernel differences"
msgstr ""

#. type: Plain text
msgid ""
"The original Linux system call was named B<sigreturn>().  However, with the "
"addition of real-time signals in Linux 2.2, a new system call, "
"B<rt_sigreturn>()  was added to support an enlarged I<sigset_t> type.  The "
"GNU C library hides these details from us, transparently employing "
"B<rt_sigreturn>()  when the kernel provides it."
msgstr ""

#. type: SH
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
msgid ""
"B<kill>(2), B<restart_syscall>(2), B<sigaltstack>(2), B<signal>(2), "
"B<getcontext>(3), B<signal>(7), B<vdso>(7)"
msgstr ""

#. type: SH
#, no-wrap
msgid "COLOPHON"
msgstr ""

#. type: Plain text
msgid ""
"This page is part of release 4.11 of the Linux I<man-pages> project.  A "
"description of the project, information about reporting bugs, and the latest "
"version of this page, can be found at "
"\\%https://www.kernel.org/doc/man-pages/."
msgstr ""
