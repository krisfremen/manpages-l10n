# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-07-17 21:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#, no-wrap
msgid "GETDENTS"
msgstr ""

#. type: TH
#, no-wrap
msgid "2017-05-03"
msgstr ""

#. type: TH
#, no-wrap
msgid "Linux"
msgstr ""

#. type: TH
#, no-wrap
msgid "Linux Programmer's Manual"
msgstr ""

#. type: SH
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
msgid "getdents, getdents64 - get directory entries"
msgstr ""

#. type: SH
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"B<int getdents(unsigned int >I<fd>B<, struct linux_dirent *>I<dirp>B<,>\n"
"B<             unsigned int >I<count>B<);>\n"
"B<int getdents64(unsigned int >I<fd>B<, struct linux_dirent64 "
"*>I<dirp>B<,>\n"
"B<             unsigned int >I<count>B<);>\n"
msgstr ""

#. type: Plain text
msgid "I<Note>: There are no glibc wrappers for these system calls; see NOTES."
msgstr ""

#. type: SH
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
msgid ""
"These are not the interfaces you are interested in.  Look at B<readdir>(3)  "
"for the POSIX-conforming C library interface.  This page documents the bare "
"kernel system call interfaces."
msgstr ""

#. type: SS
#, no-wrap
msgid "getdents()"
msgstr ""

#. type: Plain text
msgid ""
"The system call B<getdents>()  reads several I<linux_dirent> structures from "
"the directory referred to by the open file descriptor I<fd> into the buffer "
"pointed to by I<dirp>.  The argument I<count> specifies the size of that "
"buffer."
msgstr ""

#. type: Plain text
msgid "The I<linux_dirent> structure is declared as follows:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"struct linux_dirent {\n"
"    unsigned long  d_ino;     /* Inode number */\n"
"    unsigned long  d_off;     /* Offset to next I<linux_dirent> */\n"
"    unsigned short d_reclen;  /* Length of this I<linux_dirent> */\n"
"    char           d_name[];  /* Filename (null-terminated) */\n"
"                      /* length is actually (d_reclen - 2 -\n"
"                         offsetof(struct linux_dirent, d_name)) */\n"
"    /*\n"
"    char           pad;       // Zero padding byte\n"
"    char           d_type;    // File type (only since Linux\n"
"                              // 2.6.4); offset is (d_reclen - 1)\n"
"    */\n"
"}\n"
msgstr ""

#. type: Plain text
msgid ""
"I<d_ino> is an inode number.  I<d_off> is the distance from the start of the "
"directory to the start of the next I<linux_dirent>.  I<d_reclen> is the size "
"of this entire I<linux_dirent>.  I<d_name> is a null-terminated filename."
msgstr ""

#. type: Plain text
msgid ""
"I<d_type> is a byte at the end of the structure that indicates the file "
"type.  It contains one of the following values (defined in "
"I<E<lt>dirent.hE<gt>>):"
msgstr ""

#. type: TP
#, no-wrap
msgid "B<DT_BLK>"
msgstr ""

#. type: Plain text
msgid "This is a block device."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<DT_CHR>"
msgstr ""

#. type: Plain text
msgid "This is a character device."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<DT_DIR>"
msgstr ""

#. type: Plain text
msgid "This is a directory."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<DT_FIFO>"
msgstr ""

#. type: Plain text
msgid "This is a named pipe (FIFO)."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<DT_LNK>"
msgstr ""

#. type: Plain text
msgid "This is a symbolic link."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<DT_REG>"
msgstr ""

#. type: Plain text
msgid "This is a regular file."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<DT_SOCK>"
msgstr ""

#. type: Plain text
msgid "This is a UNIX domain socket."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<DT_UNKNOWN>"
msgstr ""

#. type: Plain text
msgid "The file type is unknown."
msgstr ""

#. type: Plain text
msgid ""
"The I<d_type> field is implemented since Linux 2.6.4.  It occupies a space "
"that was previously a zero-filled padding byte in the I<linux_dirent> "
"structure.  Thus, on kernels up to and including 2.6.3, attempting to access "
"this field always provides the value 0 (B<DT_UNKNOWN>)."
msgstr ""

#.  kernel 2.6.27
#.  The same sentence is in readdir.2
#. type: Plain text
msgid ""
"Currently, only some filesystems (among them: Btrfs, ext2, ext3, and ext4)  "
"have full support for returning the file type in I<d_type>.  All "
"applications must properly handle a return of B<DT_UNKNOWN>."
msgstr ""

#. type: SS
#, no-wrap
msgid "getdents64()"
msgstr ""

#. type: Plain text
msgid ""
"The original Linux B<getdents>()  system call did not handle large "
"filesystems and large file offsets.  Consequently, Linux 2.4 added "
"B<getdents64>(), with wider types for the I<d_ino> and I<d_off> fields.  In "
"addition, B<getdents64>()  supports an explicit I<d_type> field."
msgstr ""

#. type: Plain text
msgid ""
"The B<getdents64>()  system call is like B<getdents>(), except that its "
"second argument is a pointer to a buffer containing structures of the "
"following type:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"struct linux_dirent64 {\n"
"    ino64_t        d_ino;    /* 64-bit inode number */\n"
"    off64_t        d_off;    /* 64-bit offset to next structure */\n"
"    unsigned short d_reclen; /* Size of this dirent */\n"
"    unsigned char  d_type;   /* File type */\n"
"    char           d_name[]; /* Filename (null-terminated) */\n"
"};\n"
msgstr ""

#. type: SH
#, no-wrap
msgid "RETURN VALUE"
msgstr ""

#. type: Plain text
msgid ""
"On success, the number of bytes read is returned.  On end of directory, 0 is "
"returned.  On error, -1 is returned, and I<errno> is set appropriately."
msgstr ""

#. type: SH
#, no-wrap
msgid "ERRORS"
msgstr ""

#. type: TP
#, no-wrap
msgid "B<EBADF>"
msgstr ""

#. type: Plain text
msgid "Invalid file descriptor I<fd>."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<EFAULT>"
msgstr ""

#. type: Plain text
msgid "Argument points outside the calling process's address space."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<EINVAL>"
msgstr ""

#. type: Plain text
msgid "Result buffer is too small."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<ENOENT>"
msgstr ""

#. type: Plain text
msgid "No such directory."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<ENOTDIR>"
msgstr ""

#. type: Plain text
msgid "File descriptor does not refer to a directory."
msgstr ""

#. type: SH
#, no-wrap
msgid "CONFORMING TO"
msgstr ""

#.  SVr4 documents additional ENOLINK, EIO error conditions.
#. type: Plain text
msgid "SVr4."
msgstr ""

#. type: SH
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
msgid ""
"Glibc does not provide a wrapper for these system calls; call them using "
"B<syscall>(2).  You will need to define the I<linux_dirent> or "
"I<linux_dirent64> structure yourself.  However, you probably want to use "
"B<readdir>(3)  instead."
msgstr ""

#. type: Plain text
msgid "These calls supersede B<readdir>(2)."
msgstr ""

#. type: SH
#, no-wrap
msgid "EXAMPLE"
msgstr ""

#.  FIXME The example program needs to be revised, since it uses the older
#.  getdents() system call and the structure with smaller field widths.
#. type: Plain text
msgid ""
"The program below demonstrates the use of B<getdents>().  The following "
"output shows an example of what we see when running this program on an ext2 "
"directory:"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"$B< ./a.out /testfs/>\n"
"--------------- nread=120 ---------------\n"
"inode#    file type  d_reclen  d_off   d_name\n"
"       2  directory    16         12  .\n"
"       2  directory    16         24  ..\n"
"      11  directory    24         44  lost+found\n"
"      12  regular      16         56  a\n"
"  228929  directory    16         68  sub\n"
"   16353  directory    16         80  sub2\n"
"  130817  directory    16       4096  sub3\n"
msgstr ""

#. type: SS
#, no-wrap
msgid "Program source"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"#define _GNU_SOURCE\n"
"#include E<lt>dirent.hE<gt>     /* Defines DT_* constants */\n"
"#include E<lt>fcntl.hE<gt>\n"
"#include E<lt>stdio.hE<gt>\n"
"#include E<lt>unistd.hE<gt>\n"
"#include E<lt>stdlib.hE<gt>\n"
"#include E<lt>sys/stat.hE<gt>\n"
"#include E<lt>sys/syscall.hE<gt>\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"#define handle_error(msg) \\e\n"
"        do { perror(msg); exit(EXIT_FAILURE); } while (0)\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"struct linux_dirent {\n"
"    long           d_ino;\n"
"    off_t          d_off;\n"
"    unsigned short d_reclen;\n"
"    char           d_name[];\n"
"};\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "#define BUF_SIZE 1024\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    int fd, nread;\n"
"    char buf[BUF_SIZE];\n"
"    struct linux_dirent *d;\n"
"    int bpos;\n"
"    char d_type;\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    fd = open(argc E<gt> 1 ? argv[1] : \".\", O_RDONLY | O_DIRECTORY);\n"
"    if (fd == -1)\n"
"        handle_error(\"open\");\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    for ( ; ; ) {\n"
"        nread = syscall(SYS_getdents, fd, buf, BUF_SIZE);\n"
"        if (nread == -1)\n"
"            handle_error(\"getdents\");\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"        if (nread == 0)\n"
"            break;\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"        printf(\"--------------- nread=%d ---------------\\en\", nread);\n"
"        printf(\"inode#    file type  d_reclen  d_off   d_name\\en\");\n"
"        for (bpos = 0; bpos E<lt> nread;) {\n"
"            d = (struct linux_dirent *) (buf + bpos);\n"
"            printf(\"%8ld  \", d-E<gt>d_ino);\n"
"            d_type = *(buf + bpos + d-E<gt>d_reclen - 1);\n"
"            printf(\"%-10s \", (d_type == DT_REG) ?  \"regular\" :\n"
"                             (d_type == DT_DIR) ?  \"directory\" :\n"
"                             (d_type == DT_FIFO) ? \"FIFO\" :\n"
"                             (d_type == DT_SOCK) ? \"socket\" :\n"
"                             (d_type == DT_LNK) ?  \"symlink\" :\n"
"                             (d_type == DT_BLK) ?  \"block dev\" :\n"
"                             (d_type == DT_CHR) ?  \"char dev\" : "
"\"???\");\n"
"            printf(\"%4d %10lld  %s\\en\", d-E<gt>d_reclen,\n"
"                    (long long) d-E<gt>d_off, d-E<gt>d_name);\n"
"            bpos += d-E<gt>d_reclen;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    exit(EXIT_SUCCESS);\n"
"}\n"
msgstr ""

#. type: SH
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
msgid "B<readdir>(2), B<readdir>(3), B<inode>(7)"
msgstr ""

#. type: SH
#, no-wrap
msgid "COLOPHON"
msgstr ""

#. type: Plain text
msgid ""
"This page is part of release 4.11 of the Linux I<man-pages> project.  A "
"description of the project, information about reporting bugs, and the latest "
"version of this page, can be found at "
"\\%https://www.kernel.org/doc/man-pages/."
msgstr ""
