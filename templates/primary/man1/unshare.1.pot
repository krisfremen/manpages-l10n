# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-07-17 21:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#, no-wrap
msgid "UNSHARE"
msgstr ""

#. type: TH
#, no-wrap
msgid "February 2016"
msgstr ""

#. type: TH
#, no-wrap
msgid "util-linux"
msgstr ""

#. type: TH
#, no-wrap
msgid "User Commands"
msgstr ""

#. type: SH
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
msgid "unshare - run program with some namespaces unshared from parent"
msgstr ""

#. type: SH
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
msgid "B<unshare> [options] I<program> [I<arguments>]"
msgstr ""

#. type: SH
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
msgid ""
"Unshares the indicated namespaces from the parent process and then executes "
"the specified I<program>."
msgstr ""

#. type: Plain text
msgid ""
"The namespaces can optionally be made persistent by bind mounting "
"/proc/I<pid>/ns/I<type> files to a filesystem path and entered with "
"B<\\%nsenter>(1)  even after the I<program> terminates.  Once a persistent "
"\\%namespace is no longer needed, it can be unpersisted with B<umount>(8).  "
"See the B<EXAMPLES> section for more details."
msgstr ""

#. type: Plain text
msgid ""
"The namespaces to be unshared are indicated via options.  Unshareable "
"namespaces are:"
msgstr ""

#. type: TP
#, no-wrap
msgid "B<mount namespace>"
msgstr ""

#. type: Plain text
msgid ""
"Mounting and unmounting filesystems will not affect the rest of the system, "
"except for filesystems which are explicitly marked as shared (with B<mount "
"--make-shared>; see I</proc/self/mountinfo> or B<findmnt -o+PROPAGATION> for "
"the B<shared> flags).  For further details, see B<mount_namespaces>(7)  and "
"the discussion of the B<CLONE_NEWNS> flag in B<clone>(2)."
msgstr ""

#. type: Plain text
msgid ""
"B<unshare> since util-linux version 2.27 automatically sets propagation to "
"B<private> in a new mount namespace to make sure that the new namespace is "
"really unshared.  It's possible to disable this feature with option "
"B<--propagation unchanged>.  Note that B<private> is the kernel default."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<UTS namespace>"
msgstr ""

#. type: Plain text
msgid ""
"Setting hostname or domainname will not affect the rest of the system.  For "
"further details, see B<namespaces>(7)  and the discussion of the "
"B<CLONE_NEWUTS> flag in B<clone>(2)."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<IPC namespace>"
msgstr ""

#. type: Plain text
msgid ""
"The process will have an independent namespace for POSIX message queues as "
"well as System V \\%message queues, semaphore sets and shared memory "
"segments.  For further details, see B<namespaces>(7)  and the discussion of "
"the B<CLONE_NEWIPC> flag in B<clone>(2)."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<network namespace>"
msgstr ""

#. type: Plain text
msgid ""
"The process will have independent IPv4 and IPv6 stacks, IP routing tables, "
"firewall rules, the I</proc/net> and I</sys/class/net> directory trees, "
"sockets, etc.  For further details, see B<namespaces>(7)  and the discussion "
"of the B<CLONE_NEWNET> flag in B<clone>(2)."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<PID namespace>"
msgstr ""

#. type: Plain text
msgid ""
"Children will have a distinct set of PID-to-process mappings from their "
"parent.  For further details, see B<pid_namespaces>(7)  and the discussion "
"of the B<CLONE_NEWPID> flag in B<clone>(2)."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<cgroup namespace>"
msgstr ""

#. type: Plain text
msgid ""
"The process will have a virtualized view of I</proc\\:/self\\:/cgroup>, and "
"new cgroup mounts will be rooted at the namespace cgroup root.  For further "
"details, see B<cgroup_namespaces>(7)  and the discussion of the "
"B<CLONE_NEWCGROUP> flag in B<clone>(2)."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<user namespace>"
msgstr ""

#. type: Plain text
msgid ""
"The process will have a distinct set of UIDs, GIDs and capabilities.  For "
"further details, see B<user_namespaces>(7)  and the discussion of the "
"B<CLONE_NEWUSER> flag in B<clone>(2)."
msgstr ""

#. type: SH
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-i>,B< --ipc>[B<=>I<file>]"
msgstr ""

#. type: Plain text
msgid ""
"Unshare the IPC namespace.  If I<file> is specified, then a persistent "
"namespace is created by a bind mount."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-m>,B< --mount>[B<=>I<file>]"
msgstr ""

#. type: Plain text
msgid ""
"Unshare the mount namespace.  If I<file> is specified, then a persistent "
"namespace is created by a bind mount.  Note that I<file> has to be located "
"on a filesystem with the propagation flag set to B<private>.  Use the "
"command B<findmnt -o+PROPAGATION> when not sure about the current setting.  "
"See also the examples below."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-n>,B< --net>[B<=>I<file>]"
msgstr ""

#. type: Plain text
msgid ""
"Unshare the network namespace.  If I<file> is specified, then a persistent "
"namespace is created by a bind mount."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-p>,B< --pid>[B<=>I<file>]"
msgstr ""

#. type: Plain text
msgid ""
"Unshare the PID namespace.  If I<file> is specified then persistent "
"namespace is created by a bind mount.  See also the B<--fork> and "
"B<--mount-proc> options."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-u>,B< --uts>[B<=>I<file>]"
msgstr ""

#. type: Plain text
msgid ""
"Unshare the UTS namespace.  If I<file> is specified, then a persistent "
"namespace is created by a bind mount."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-U>,B< --user>[B<=>I<file>]"
msgstr ""

#. type: Plain text
msgid ""
"Unshare the user namespace.  If I<file> is specified, then a persistent "
"namespace is created by a bind mount."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-C>,B< --cgroup>[=I<file>]"
msgstr ""

#. type: Plain text
msgid ""
"Unshare the cgroup namespace. If I<file> is specified then persistent "
"namespace is created by bind mount."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-f>,B< --fork>"
msgstr ""

#. type: Plain text
msgid ""
"Fork the specified I<program> as a child process of B<unshare> rather than "
"running it directly.  This is useful when creating a new PID namespace."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<--mount-proc>[B<=>I<mountpoint>]"
msgstr ""

#. type: Plain text
msgid ""
"Just before running the program, mount the proc filesystem at I<mountpoint> "
"(default is /proc).  This is useful when creating a new PID namespace.  It "
"also implies creating a new mount namespace since the /proc mount would "
"otherwise mess up existing programs on the system.  The new proc filesystem "
"is explicitly mounted as private (with MS_PRIVATE|MS_REC)."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-r>,B< --map-root-user>"
msgstr ""

#. type: Plain text
msgid ""
"Run the program only after the current effective user and group IDs have "
"been mapped to the superuser UID and GID in the newly created user "
"namespace.  This makes it possible to conveniently gain capabilities needed "
"to manage various aspects of the newly created namespaces (such as "
"configuring interfaces in the network namespace or mounting filesystems in "
"the mount namespace) even when run unprivileged.  As a mere convenience "
"feature, it does not support more sophisticated use cases, such as mapping "
"multiple ranges of UIDs and GIDs.  This option implies B<--setgroups=deny>."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<--propagation private>|B<shared>|B<slave>|B<unchanged>"
msgstr ""

#. type: Plain text
msgid ""
"Recursively set the mount propagation flag in the new mount namespace.  The "
"default is to set the propagation to I<private>.  It is possible to disable "
"this feature with the argument B<unchanged>.  The option is silently ignored "
"when the mount namespace (B<--mount>) is not requested."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<--setgroups allow>|B<deny>"
msgstr ""

#. type: Plain text
msgid "Allow or deny the B<setgroups>(2)  system call in a user namespace."
msgstr ""

#. type: Plain text
msgid ""
"To be able to call B<setgroups>(2), the calling process must at least have "
"CAP_SETGID.  But since Linux 3.19 a further restriction applies: the kernel "
"gives permission to call B<\\%setgroups>(2)  only after the GID map "
"(B</proc/>I<pid>B</gid_map>) has been set.  The GID map is writable by root "
"when B<\\%setgroups>(2)  is enabled (i.e. B<allow>, the default), and the "
"GID map becomes writable by unprivileged processes when B<\\%setgroups>(2)  "
"is permanently disabled (with B<deny>)."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-V>,B< --version>"
msgstr ""

#. type: Plain text
msgid "Display version information and exit."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<-h>,B< --help>"
msgstr ""

#. type: Plain text
msgid "Display help text and exit."
msgstr ""

#. type: SH
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: TP
#, no-wrap
msgid "B<# unshare --fork --pid --mount-proc readlink /proc/self>"
msgstr ""

#. type: TQ
#, no-wrap
msgid "1"
msgstr ""

#. type: Plain text
msgid ""
"Establish a PID namespace, ensure we're PID 1 in it against a newly mounted "
"procfs instance."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<$ unshare --map-root-user --user sh -c whoami>"
msgstr ""

#. type: TQ
#, no-wrap
msgid "root"
msgstr ""

#. type: Plain text
msgid ""
"Establish a user namespace as an unprivileged user with a root user within "
"it."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<# touch /root/uts-ns>"
msgstr ""

#. type: TQ
#, no-wrap
msgid "B<# unshare --uts=/root/uts-ns hostname FOO>"
msgstr ""

#. type: TQ
#, no-wrap
msgid "B<# nsenter --uts=/root/uts-ns hostname>"
msgstr ""

#. type: TQ
#, no-wrap
msgid "FOO"
msgstr ""

#. type: TQ
#, no-wrap
msgid "B<# umount /root/uts-ns>"
msgstr ""

#. type: Plain text
msgid ""
"Establish a persistent UTS namespace, and modify the hostname.  The "
"namespace is then entered with B<nsenter>.  The namespace is destroyed by "
"unmounting the bind reference."
msgstr ""

#. type: TP
#, no-wrap
msgid "B<# mount --bind /root/namespaces /root/namespaces>"
msgstr ""

#. type: TQ
#, no-wrap
msgid "B<# mount --make-private /root/namespaces>"
msgstr ""

#. type: TQ
#, no-wrap
msgid "B<# touch /root/namespaces/mnt>"
msgstr ""

#. type: TQ
#, no-wrap
msgid "B<# unshare --mount=/root/namespaces/mnt>"
msgstr ""

#. type: Plain text
msgid ""
"Establish a persistent mount namespace referenced by the bind mount "
"/root/namespaces/mnt.  This example shows a portable solution, because it "
"makes sure that the bind mount is created on a shared filesystem."
msgstr ""

#. type: SH
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
msgid "B<clone>(2), B<unshare>(2), B<namespaces>(7), B<mount>(8)"
msgstr ""

#. type: SH
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
msgid "E<.UR dottedmag@dottedmag.net> Mikhail Gusarov E<.UE>"
msgstr ""

#. type: Plain text
msgid "E<.UR kzak@redhat.com> Karel Zak E<.UE>"
msgstr ""

#. type: SH
#, no-wrap
msgid "AVAILABILITY"
msgstr ""

#. type: Plain text
msgid ""
"The unshare command is part of the util-linux package and is available from "
"ftp://ftp.kernel.org/pub/linux/utils/util-linux/."
msgstr ""
