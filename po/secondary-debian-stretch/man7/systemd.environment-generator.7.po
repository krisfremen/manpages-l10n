# German translation of manpages
# This file is distributed under the same license as the manpages-de package.
# Copyright © of this file:
msgid ""
msgstr ""
"Project-Id-Version: manpages-de\n"
"POT-Creation-Date: 2018-04-01 15:11+0200\n"
"PO-Revision-Date: 2018-02-24 21:48+0100\n"
"Last-Translator: Automatically generated\n"
"Language-Team: German <debian-l10n-german@lists.debian.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#. type: TH
#, no-wrap
msgid "SYSTEMD\\&.ENVIRONMENT-GENERATOR"
msgstr "SYSTEMD\\&.ENVIRONMENT-GENERATOR"

#. type: TH
#, no-wrap
msgid "systemd 237"
msgstr "systemd 237"

#. type: TH
#, no-wrap
msgid "systemd.environment-generator"
msgstr "systemd.environment-generator"

#.  -----------------------------------------------------------------
#.  * MAIN CONTENT STARTS HERE *
#.  -----------------------------------------------------------------
#. type: SH
#, no-wrap
msgid "NAME"
msgstr "BEZEICHNUNG"

#. type: Plain text
msgid "systemd.environment-generator - systemd environment file generators"
msgstr "systemd.environment-generator - Systemd-Umgebungsdatei-Generatoren"

#. type: SH
#, no-wrap
msgid "SYNOPSIS"
msgstr "ÜBERSICHT"

#. type: Plain text
msgid "B</lib/systemd/system-environment-generators/some-generator>"
msgstr "B</lib/systemd/system-environment-generators/ein-Generator>"

#. type: Plain text
msgid "B</usr/lib/systemd/user-environment-generators/some-generator>"
msgstr "B</usr/lib/systemd/user-environment-generators/ein-Generator>"

#. type: Plain text
#, no-wrap
msgid ""
"/run/systemd/system-environment-generators/*\n"
"/etc/systemd/system-environment-generators/*\n"
"/usr/local/lib/systemd/system-environment-generators/*\n"
"/lib/systemd/system-environment-generators/*\n"
msgstr ""
"/run/systemd/system-environment-generators/*\n"
"/etc/systemd/system-environment-generators/*\n"
"/usr/local/lib/systemd/system-environment-generators/*\n"
"/lib/systemd/system-environment-generators/*\n"

#. type: Plain text
#, no-wrap
msgid ""
"/run/systemd/user-environment-generators/*\n"
"/etc/systemd/user-environment-generators/*\n"
"/usr/local/lib/systemd/user-environment-generators/*\n"
"/usr/lib/systemd/user-environment-generators/*\n"
msgstr ""
"/run/systemd/user-environment-generators/*\n"
"/etc/systemd/user-environment-generators/*\n"
"/usr/local/lib/systemd/user-environment-generators/*\n"
"/usr/lib/systemd/user-environment-generators/*\n"

#. type: SH
#, no-wrap
msgid "DESCRIPTION"
msgstr "BESCHREIBUNG"

#. type: Plain text
msgid ""
"Generators are small executables that live in /lib/systemd/system-"
"environment-generators/ and other directories listed above\\&.  "
"B<systemd>(1)  will execute those binaries very early at the startup of each "
"manager and at configuration reload time, before running the generators "
"described in B<systemd.generator>(7)  and before starting any units\\&. "
"Environment generators can override the environment that the manager exports "
"to services and other processes\\&."
msgstr ""

#. type: Plain text
msgid ""
"Generators are loaded from a set of paths determined during compilation, as "
"listed above\\&. System and user environment generators are loaded from "
"directories with names ending in system-environment-generators/ and user-"
"environment-generators/, respectively\\&. Generators found in directories "
"listed earlier override the ones with the same name in directories lower in "
"the list\\&. A symlink to /dev/null or an empty file can be used to mask a "
"generator, thereby preventing it from running\\&. Please note that the order "
"of the two directories with the highest priority is reversed with respect to "
"the unit load path, and generators in /run overwrite those in /etc\\&."
msgstr ""

#. type: Plain text
msgid ""
"After installing new generators or updating the configuration, B<systemctl "
"daemon-reload> may be executed\\&. This will re-run all generators, updating "
"environment configuration\\&. It will be used for any services that are "
"started subsequently\\&."
msgstr ""

#. type: Plain text
msgid ""
"Environment file generators are executed similarly to unit file generators "
"described in B<systemd.generator>(7), with the following differences:"
msgstr ""

#. type: Plain text
msgid ""
"Generators are executed sequentially in the alphanumerical order of the "
"final component of their name\\&. The output of each generator output is "
"immediately parsed and used to update the environment for generators that "
"run after that\\&. Thus, later generators can use and/or modify the output "
"of earlier generators\\&."
msgstr ""

#. type: Plain text
msgid ""
"Generators are run by every manager instance, their output can be different "
"for each user\\&."
msgstr ""

#. type: Plain text
msgid ""
"It is recommended to use numerical prefixes for generator names to simplify "
"ordering\\&."
msgstr ""

#. type: SH
#, no-wrap
msgid "EXAMPLES"
msgstr "BEISPIELE"

#. type: Plain text
msgid ""
"B<Example\\ \\&1.\\ \\&A simple generator that extends an environment "
"variable if a directory exists in the file system>"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "# 50-xdg-data-dirs\\&.sh\n"
msgstr "# 50-xdg-data-dirs\\&.sh\n"

#. type: Plain text
#, no-wrap
msgid "#!/bin/bash\n"
msgstr "#!/bin/bash\n"

#. type: Plain text
#, no-wrap
msgid ""
"# set the default value\n"
"XDG_DATA_DIRS=\"${XDG_DATA_DIRS:-/usr/local/share/:/usr/share}\"\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"# add a directory if it exists\n"
"if [[ -d /opt/foo/share ]]; then\n"
"   XDG_DATA_DIRS=/opt/foo/share:${XDG_DATA_DIRS}\n"
"fi\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"# write our output\n"
"echo XDG_DATA_DIRS=$XDG_DATA_DIRS\n"
msgstr ""

#. type: Plain text
msgid ""
"B<Example\\ \\&2.\\ \\&A more complicated generator which reads existing "
"configuration and mutates one variable>"
msgstr ""

#. type: Plain text
#, no-wrap
msgid "# 90-rearrange-path\\&.py\n"
msgstr "# 90-rearrange-path\\&.py\n"

#. type: Plain text
#, no-wrap
msgid "#!/usr/bin/env python3\n"
msgstr "#!/usr/bin/env python3\n"

#. type: Plain text
#, no-wrap
msgid "\"\"\"\n"
msgstr "\"\"\"\n"

#. type: Plain text
#, no-wrap
msgid ""
"Proof-of-concept systemd environment generator that makes sure that bin dirs\n"
"are always after matching sbin dirs in the path\\&.\n"
"(Changes /sbin:/bin:/foo/bar to /bin:/sbin:/foo/bar\\&.)\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"This generator shows how to override the configuration possibly created by\n"
"earlier generators\\&. It would be easier to write in bash, but let\\*(Aqs have it\n"
"in Python just to prove that we can, and to serve as a template for more\n"
"interesting generators\\&.\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"import os\n"
"import pathlib\n"
msgstr ""
"import os\n"
"import pathlib\n"

#. type: Plain text
#, no-wrap
msgid ""
"def rearrange_bin_sbin(path):\n"
"    \"\"\"Make sure any pair of \\&.../bin, \\&.../sbin directories is in this order\n"
msgstr ""

#. type: Plain text
#, no-wrap
msgid ""
"    E<gt>E<gt>E<gt> rearrange_bin_sbin(\\*(Aq/bin:/sbin:/usr/sbin:/usr/bin\\*(Aq)\n"
"    \\*(Aq/bin:/sbin:/usr/bin:/usr/sbin\\*(Aq\n"
"    \"\"\"\n"
"    items = [pathlib\\&.Path(p) for p in path\\&.split(\\*(Aq:\\*(Aq)]\n"
"    for i in range(len(items)):\n"
"        if \\*(Aqsbin\\*(Aq in items[i]\\&.parts:\n"
"            ind = items[i]\\&.parts\\&.index(\\*(Aqsbin\\*(Aq)\n"
"            bin = pathlib\\&.Path(*items[i]\\&.parts[:ind], \\*(Aqbin\\*(Aq, *items[i]\\&.parts[ind+1:])\n"
"            if bin in items[i+1:]:\n"
"                j = i + 1 + items[i+1:]\\&.index(bin)\n"
"                items[i], items[j] = items[j], items[i]\n"
"    return \\*(Aq:\\*(Aq\\&.join(p\\&.as_posix() for p in items)\n"
msgstr ""
"    E<gt>E<gt>E<gt> rearrange_bin_sbin(\\*(Aq/bin:/sbin:/usr/sbin:/usr/bin\\*(Aq)\n"
"    \\*(Aq/bin:/sbin:/usr/bin:/usr/sbin\\*(Aq\n"
"    \"\"\"\n"
"    items = [pathlib\\&.Path(p) for p in path\\&.split(\\*(Aq:\\*(Aq)]\n"
"    for i in range(len(items)):\n"
"        if \\*(Aqsbin\\*(Aq in items[i]\\&.parts:\n"
"            ind = items[i]\\&.parts\\&.index(\\*(Aqsbin\\*(Aq)\n"
"            bin = pathlib\\&.Path(*items[i]\\&.parts[:ind], \\*(Aqbin\\*(Aq, *items[i]\\&.parts[ind+1:])\n"
"            if bin in items[i+1:]:\n"
"                j = i + 1 + items[i+1:]\\&.index(bin)\n"
"                items[i], items[j] = items[j], items[i]\n"
"    return \\*(Aq:\\*(Aq\\&.join(p\\&.as_posix() for p in items)\n"

#. type: Plain text
#, no-wrap
msgid ""
"if __name__ == \\*(Aq__main__\\*(Aq:\n"
"    path = os\\&.environ[\\*(AqPATH\\*(Aq] # This should be always set\\&.\n"
"                              # If it\\*(Aqs not, we\\*(Aqll just crash, we is OK too\\&.\n"
"    new = rearrange_bin_sbin(path)\n"
"    if new != path:\n"
"        print(\\*(AqPATH={}\\*(Aq\\&.format(new))\n"
msgstr ""

#. type: Plain text
msgid "B<Example\\ \\&3.\\ \\&Debugging a generator>"
msgstr "B<Beispiel\\ \\&3.\\ \\&Fehlersuche in einem Generator>"

#. type: Plain text
#, no-wrap
msgid ""
"SYSTEMD_LOG_LEVEL=debug VAR_A=something VAR_B=\"something else\" \\e\n"
"/lib/systemd/system-environment-generators/path-to-generator\n"
msgstr ""
"SYSTEMD_LOG_LEVEL=debug VAR_A=etwas VAR_B=\"etwas anderes\" \\e\n"
"/lib/systemd/system-environment-generators/pfad-zum-generator\n"

#. type: SH
#, no-wrap
msgid "SEE ALSO"
msgstr "SIEHE AUCH"

#. type: Plain text
msgid ""
"B<systemd-environment-d-generator>(8), B<systemd.generator>(7), "
"B<systemd>(1), B<systemctl>(1)"
msgstr ""
"B<systemd-environment-d-generator>(8), B<systemd.generator>(7), "
"B<systemd>(1), B<systemctl>(1)"
