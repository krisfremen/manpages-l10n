.\" 1999 PTM Przemek Borys
.\"- -*- nroff -*- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.\"
.\"This file describes version 3.0 of Aladdin Ghostscript.
.\"
.\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.de TQ
.br
.ns
.TP \\$1
..
.TH GS 1 "28 lipca 1994"
.SH NAZWA
gs \- Aladdin Ghostscript wersja 3.0 -- interpreter/przeglądarka
.SH SKŁADNIA
.B gs
[
.I opcje
] [
.I pliki
] ...
.br
.SH OPIS
Ghostscript jest językiem programowania, podobnym do języka PostScript (tm)
firmy Adobe Systems, który z kolei jest podobny do Fortha.
.I Gs
odczytuje kolejno
.I pliki
i wykonuje je jako programy Ghostscripta. Po zrobieniu tego, odczytuje
dalsze wejście ze strumienia standardowego wejścia (zwykle klawiatura).
Każda linia jest interpretowana osobno. Aby zakończyć pracę z interpreterem,
wykonaj komendę `quit'. Interpreter kończy działanie również po napotkaniu
końca pliku. Bezpieczne jest wpisanie znaku przerwanai (np. Ctrl-C).
.PP
Interpreter rozpoznaje różne niżej opisane przełączniki, które mogą pojawić
się w dowolnym miejscu linii komend i tyczyć się dalszych plików.
.PP
Informację o pomocy można uzyskać, wywołując Ghostscript z przełącznikiem
.B \-h
lub
.BR \-? .
Informacja ta zawiera też listę dostępnych urządzeń.
.PP
Ghostscript może zostać skompilowany z wieloma urządzeniami wyjściowymi.
Normalnie otwiera pierwsze i kieruje tam wyjście. Aby użyć urządzenia xyz,
załącz przełącznik
.nf
	\-sDEVICE=xyz
.fi
w linii komend. Zauważ, że ten przełącznik musi poprzedzać pierwszy plik .ps
i że tylko jego pierwsze wywołanie ma efekt. Na przykład dla wyjścia na
drukarce Epson, możesz użyć komendy powłoki
.nf
	gs \-sDEVICE=epson myfile.ps
.fi
zamiast
.nf
	gs myfile.ps
.fi
Możesz też wpisać
.nf
	(epson) selectdevice
	(myfile.ps) run
.fi
Całe wyjście idzie na drukarkę, zamiast na wyświetlacz, aż do notki. Możesz
przełączać urządzenia w dowolnym momencie, używając procedury selectdevice,
.nf
	(vga) selectdevice
.fi
lub
.nf
	(epson) selectdevice
.fi
Jako trzecią opcję, możesz zdefiniować zmienną środowiskową GS_DEVICE, która
przechowuje potrzebną nazwę. Priorytety tych sposobów, od najwyższego do
najniższego to:
.nf
	selectdevice
	(command line)
	GS_DEVICE
	(pierwsze urządzenie z listy kompilacji)
.fi
.PP
Aby wybrać gęstość wydruku na drukarce, użyj
.nf
	gs \-sDEVICE=<urządzenie> \-r<xwym>x<ywym>
.fi
Np. tryb najniższej gęstości na 9 igłowym Epsonie można uzyskać przez
.nf
	gs \-sDEVICE=epson \-r60x72
.fi
a najwyższej przez
.nf
	gs \-sDEVICE=epson \-r240x72.
.fi
.PP
Jeśli jako urządzenie wyjściowe wybierzesz drukarkę, Ghostscript umożliwi ci
kontrolowanie gdzie urządzenie wysyła swoje wyjście. Zazwyczaj wyjście idzie
na systemach uniksowych bezpośrednio do pliku scratch. Aby wysłać wyjście do
serii plików foo1.xyz, foo2.xyz, użyj przełącznika
.nf
	\-sOutputFile=foo%d.xyz
.fi
Znak %d jest specyfikacją formatu printf; możesz użyć innych formatów,
takich jak %02d. Każdy plik odbierze jedną stronę wyjścia.
W innym wypadku, aby wysłać wyjście do pojedynczego pliku foo.xyz, w którym
połączone są wszystkie strony, użyj przełącznika
.nf
	\-sOutputFile=foo.xyz
.fi
.PP
Na systemach uniksowych można wyjście przesyłać przez łącze. Na przykład, aby
przelać wyjście komendy `lpr' (która pod wieloma systemami Unixowymi jest
komendą, która składuje wyjście drukarki), użyj przełącznika
.nf
	\-sOutputFile=\\|lpr
.fi
Możesz też wysyłać wyjście na stdout, umożliwiając tworzenie łącza, 
.nf
	\-sOutputFile=\-
.fi
W tym wypadku musisz też użyć przełącznika \-q, aby uchronić Ghostscript
przed drukowaniem na stdout komunikatów.
.PP
Aby zobaczyć, jakie urządzenia są dostępne, wpisz po uruchomieniu
Ghostscripta
.nf
	devicenames ==
.fi
Listę tę możesz zobaczyć też używając przełączników \-h lub \-? w linii
komend.
.PP
Aby wybrać inny rozmiar papieru, użyj przełącznika linii komend
.nf
        \-sPAPERSIZE=znany rozmiar papieru
.fi
np,
.nf
        \-sPAPERSIZE=a4
.fi
lub
.nf
        \-sPAPERSIZE=legal
.fi
.SH "PLIKI INICJALIZACYJNE"
Szukając plików inicjalizacyjnych (gs_*.ps), plików związanych z fontami,
lub pliku dla operatora `run', Ghostscript najpierw próbuje otworzyć plik o
podanej nazwie (w bieżącym katalogu, jeśli nie podano żadnego). Jeśli to się
nie powiedzie, a nazwa pliku nie wskazuje jawnie katalogu, lub napędu (nie
rozpoczyna się od `/' na systemach uniksowych), Ghostscript korzysta z
następujących katalogów (odpowiednio w kolejności):
.TP
1.
Katalogi podane przełącznikami \-I w linii komend;
.TP
2.
Katalogi podane w zmiennej środowiskowej GS_LIB;
.TP
3.
Katalogi podane w makrze GS_LIB_DEFAULT w pliku makefile Ghostscripta (które
jest ustawione na
"/usr/local/lib/ghostscript:/usr/local/lib/ghostscript/fonts" ).
.PP
Katalogi podane w wyżej wymienionych sposobach mogą być pojedynczymi
katalogami, lub listami katalogów, rozdzielonymi znakiem `:'.
.SH ZASOBY X
Ghostscript szuka następujących zasobów dla programu o nazwie `Ghostscript':
.TP
.B borderWidth
Szerokość ramki w pikselach (domyślnie = 1).
.TP
.B borderColor
Nazwa koloru ramki (domyślnie = black).
.TP
.B geometry 
Rozmiar okna i jego położenie WxH+X+Y (domyślnie NULL).
.TP
.B xResolution 
Liczba pikseli x na cal (domyślnie obliczana z
WidthOfScreen i WidthMMOfScreen).
.TP
.B yResolution
Liczba pikseli y na cal (domyślnie obliczana z
HeightOfScreen i HeightMMOfScreen).
.TP
.B useBackingPixmap
Określa czy używać mechanizmu backing store do zachowywania okna
wyświetlania (domyślnie = true).
.PP
Zobacz tez plik `use.doc' dla kompletniejszej listy zasobów.
.PP
Aby ustawić te zasoby, wstaw je do pliku (takiego jak ~/.Xresources) w
następującej postaci:
.sp
.nf
	Ghostscript*geometry:	612x792\-0+0
	Ghostscript*xResolution: 72
	Ghostscript*yResolution: 72
.fi
.PP
Następnie załaduj wartości domyślne do serwera X:
.sp
.nf
	% xrdb \-merge ~/.Xresources
.fi
.SH OPCJE
.TP
.BI \-\- " nazwapliku arg1 ..."
Bierze następny argument jako nazwę pliku, lecz pozostałe argumenty pobiera
i definiuje nazwę ARGUMENTS w userdict (nie w systemdict) jako tablicę tych
łańcuchów,
.I przed
uruchomieniem pliku. Gdy Ghostscript zakończy wykonywanie pliku, wychodzi do
powłoki.
.TP
.BI \-D nazwa = token
.TQ
.BI \-d nazwa = token
Definiuj nazwę w systemdict na podaną definicję. Token musi być dokładnie
jeden (jak zdefiniowano operatorem `token') i nie może zawierać białych
spacji.
.TP
.BI \-D nazwa
.TQ
.BI \-d nazwa
Definiuj nazwę w systemdict, której wartość wynosi null.
.TP
.BI \-S nazwa = napis
.TQ
.BI \-s nazwa = napis
Definiuj nazwę w systemdict na podaną wartość napisową. Jest to różne od \-d.
Na przykład, \-dnazwa=35 jest równoważne fragmentowi programu
.br
			/nazwa 35 def 
.br
podczas gdy 
\-s nazwa=35 jest równoważne
.br
			/nazwa (35) def
.TP
.B \-q
Ciche uruchamianie \- nie drukuj normalnych komunikatów startowych i rób to,
co \-dQUIET.
.TP
.BI \-g liczba1 x liczba2
Równoważne z
.BI \-dDEVICEWIDTH= liczba1 
i
.BI \-dDEVICEHEIGHT= liczba2 .
Jest to dla użytku urządzeń (takich jak okna X11), które wymagają (lub
zezwalają) na podanie wysokości i szerokości.
.TP
.BI \-r liczba
.TQ
.BI \-r liczba1 x liczba2
Równoważne z
.BI \-dDEVICEXRESOLUTION= liczba1
i
.BI \-dDEVICEYRESOLUTION= liczba2 .
Jest to dla użytku urządzeń (takich jak drukarki), które obsługują wiele
rozdzielczości X i Y.
(Jeśli podana jest tylko jedna liczba, to używana jest ona dla
rozdzielczości zarówno X jak i Y.)
.TP
.BI \-I katalogi
Dodaje podaną listę katalogów na początek ścieżki przeszukiwania plików
bibliotecznych.
.TP
.B \-
Nie jest to tak naprawdę przełącznik. Mówi Ghostscriptowi, że z pliku, lub
potoku nadchodzi standardowe wejście. Ghostscript odczytuje to wejście aż do
końca pliku, wykonując je jak każdy inny plik, a następnie kontynuuje
przetwarzanie linii poleceń. Na końcu linii poleceń, Ghostscript kończy
działanie (a nie przechodzi do trybu interaktywnego).
.PP
Zauważ, że gs_init.ps powoduje, że systemdict staje się dostępny tylko dla
odczytu, więc wartości nazw zdefiniowanych przez
\-D/d/S/s nie mogą być zmieniane (choć oczywiście mogą być powstrzymywane
przez definicje w userdict, lub innych słownikach.)
.SH "NAZWY SPECJALNE"
.TP
.B \-dDISKFONTS
Powoduje, że kształty znaków będą ładowane z dysku za pierwszym napotkaniem.
(Normalnie Ghostscript ładuje wszystkie podczas ładowania fontu.) Może to
umożliwić załadowanie większej ilości fontów do pamięci, spowalniając
renderowanie.
.TP
.B \-dNOCACHE
Wyłącza buforowanie znaków. Przydatne tylko dla debuggowania.
.TP
.B \-dNOBIND
Wyłącza operator `bind'. Przydatne dla debuggowania.
.TP
.B \-dNODISPLAY
Powstrzymuje normalną inicjalizację urządzenia wyjściowego.
Może to być przydatne dla debuggowania.
.TP
.B \-dNOPAUSE
Wyłącza znak zachęty i pauzowanie na końcu każdej strony. Może to być
przydatne dla aplikacji, gdzie inny program kieruje Ghostscriptem.
.TP
.B \-dNOPLATFONTS
Wyłącza używanie fontów, przekazanych przez podlegającą platformę (np. X
Window System). Może to być potrzebne jeśli fonty platformy wyglądają gorzej
niż fonty skalowalne.
.TP
.B \-dSAFER
Wyłącza operatory deletefile i renamefile, oraz zdolność otwierania plików w
innych trybach niż tylko dla odczytu. Może to być przydatne dla składowisk i
innych wrażliwych środowisk.
.TP
.B \-dWRITESYSTEMDICT
Pozostawia systemdict w stanie zezwolenia na zapis. Jest to potrzebne
podczas uruchamiania specjalnych programów narzędziowych, takich jak font2c
i pcharstr, które muszą obchodzić normalną ochronę dostępu PostScript.
.TP
.BI \-sDEVICE= urządzenie
Wybierz alternatywne początkowe urządzenie wyjściowe.
.TP
.BI \-sOutputFile= nazwapliku
Wybierz alternatywny plik wyjściowy (lub łącze) dla początkowego urządzenia
wyjściowego.
.SH PLIKI
.TP 
.B /usr/local/lib/ghostscript/*
Pliki startowe, narzędzia i podstawowe definicje fontów.
.TP 
.B /usr/local/lib/ghostscript/fonts/*
Dodatkowe definicje fontów.
.TP
.B /usr/local/lib/ghostscript/examples/*
Demonstracyjne pliki Ghostscript.
.TP
.B /usr/local/lib/doc/ghostscript/doc/*
Dokumentacja.
.SH "ZOBACZ TAKŻE"
Pliki dokumentacji (patrz wyżej).
.SH BŁĘDY
Zobacz grupę dyskusyjną `comp.lang.postscript'.
