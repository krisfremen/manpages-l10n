# German translation of manpages
# This file is distributed under the same license as the manpages-de package.
# Copyright © of this file:
# Patrick Rother <krd@gulu.net>
# Chris Leick <c.leick@vollbio.de>, 2011.
msgid ""
msgstr ""
"Project-Id-Version: manpages-de\n"
"POT-Creation-Date: 2014-01-20 11:39+0100\n"
"PO-Revision-Date: 2011-01-20 22:19+0100\n"
"Last-Translator: Chris Leick <c.leick@vollbio.de>\n"
"Language-Team: German <debian-l10n-german@lists.debian.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#, no-wrap
msgid "STRING"
msgstr "STRING"

#. type: TH
#, no-wrap
msgid "2014-01-04"
msgstr "4. Januar 2014"

#. type: TH
#, no-wrap
msgid "Linux Programmer's Manual"
msgstr "Linux-Programmierhandbuch"

#. type: SH
#, no-wrap
msgid "NAME"
msgstr "BEZEICHNUNG"

#. type: Plain text
msgid ""
"stpcpy, strcasecmp, strcat, strchr, strcmp, strcoll, strcpy, strcspn, "
"strdup, strfry, strlen, strncat, strncmp, strncpy, strncasecmp, strpbrk, "
"strrchr, strsep, strspn, strstr, strtok, strxfrm, index, rindex - string "
"operations"
msgstr ""
"stpcpy, strcasecmp, strcat, strchr, strcmp, strcoll, strcpy, strcspn, "
"strdup, strfry, strlen, strncat, strncmp, strncpy, strncasecmp, strpbrk, "
"strrchr, strsep, strspn, strstr, strtok, strxfrm, index, rindex - "
"Zeichenkettenoperationen"

#. type: SH
#, no-wrap
msgid "SYNOPSIS"
msgstr "ÜBERSICHT"

#. type: Plain text
#, fuzzy
#| msgid "B<#include E<lt>strings.hE<gt>>\n"
msgid "B<#include E<lt>strings.hE<gt>>"
msgstr "B<#include E<lt>strings.hE<gt>>\n"

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<int strcasecmp(const char *>I<s1>B<, const char *>I<s2>B<);>\n"
msgid "B<int strcasecmp(const char *>I<s1>B<, const char *>I<s2>B<);>"
msgstr "B<int strcasecmp(const char *>I<s1>B<, const char *>I<s2>B<);>\n"

#. type: Plain text
msgid "Compare the strings I<s1> and I<s2> ignoring case."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<int strncasecmp(const char *>I<s1>B<, const char *>I<s2>B<, size_t >I<n>B<);>\n"
msgid "B<int strncasecmp(const char *>I<s1>B<, const char *>I<s2>B<, size_t >I<n>B<);>"
msgstr "B<int strncasecmp(const char *>I<s1>B<, const char *>I<s2>B<, size_t >I<n>B<);>\n"

#. type: Plain text
msgid ""
"Compare the first I<n> characters of the strings I<s1> and I<s2> ignoring "
"case."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *index(const char *>I<s>B<, int >I<c>B<);>\n"
msgid "B<char *index(const char *>I<s>B<, int >I<c>B<);>"
msgstr "B<char *index(const char *>I<s>B<, int >I<c>B<);>\n"

#. type: Plain text
msgid ""
"Return a pointer to the first occurrence of the character I<c> in the string "
"I<s>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *rindex(const char *>I<s>B<, int >I<c>B<);>\n"
msgid "B<char *rindex(const char *>I<s>B<, int >I<c>B<);>"
msgstr "B<char *rindex(const char *>I<s>B<, int >I<c>B<);>\n"

#. type: Plain text
msgid ""
"Return a pointer to the last occurrence of the character I<c> in the string "
"I<s>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<#include E<lt>string.hE<gt>>\n"
msgid "B<#include E<lt>string.hE<gt>>"
msgstr "B<#include E<lt>string.hE<gt>>\n"

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *stpcpy(char *>I<dest>B<, const char *>I<src>B<);>\n"
msgid "B<char *stpcpy(char *>I<dest>B<, const char *>I<src>B<);>"
msgstr "B<char *stpcpy(char *>I<ziel>B<, const char *>I<quelle>B<);>\n"

#. type: Plain text
msgid ""
"Copy a string from I<src> to I<dest>, returning a pointer to the end of the "
"resulting string at I<dest>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strcat(char *>I<dest>B<, const char *>I<src>B<);>\n"
msgid "B<char *strcat(char *>I<dest>B<, const char *>I<src>B<);>"
msgstr "B<char *strcat(char *>I<ziel>B<, const char *>I<quelle>B<);>\n"

#. type: Plain text
msgid ""
"Append the string I<src> to the string I<dest>, returning a pointer I<dest>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strchr(const char *>I<s>B<, int >I<c>B<);>\n"
msgid "B<char *strchr(const char *>I<s>B<, int >I<c>B<);>"
msgstr "B<char *strchr(const char *>I<s>B<, int >I<c>B<);>\n"

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<int strcmp(const char *>I<s1>B<, const char *>I<s2>B<);>\n"
msgid "B<int strcmp(const char *>I<s1>B<, const char *>I<s2>B<);>"
msgstr "B<int strcmp(const char *>I<s1>B<, const char *>I<s2>B<);>\n"

#. type: Plain text
msgid "Compare the strings I<s1> with I<s2>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<int strcoll(const char *>I<s1>B<, const char *>I<s2>B<);>\n"
msgid "B<int strcoll(const char *>I<s1>B<, const char *>I<s2>B<);>"
msgstr "B<int strcoll(const char *>I<s1>B<, const char *>I<s2>B<);>\n"

#. type: Plain text
msgid "Compare the strings I<s1> with I<s2> using the current locale."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strcpy(char *>I<dest>B<, const char *>I<src>B<);>\n"
msgid "B<char *strcpy(char *>I<dest>B<, const char *>I<src>B<);>"
msgstr "B<char *strcpy(char *>I<ziel>B<, const char *>I<quelle>B<);>\n"

#. type: Plain text
msgid ""
"Copy the string I<src> to I<dest>, returning a pointer to the start of "
"I<dest>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<size_t strcspn(const char *>I<s>B<, const char *>I<reject>B<);>\n"
msgid "B<size_t strcspn(const char *>I<s>B<, const char *>I<reject>B<);>"
msgstr "B<size_t strcspn(const char *>I<s>B<, const char *>I<ablehnen>B<);>\n"

#. type: Plain text
msgid ""
"Calculate the length of the initial segment of the string I<s> which does "
"not contain any of bytes in the string I<reject>,"
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strdup(const char *>I<s>B<);>\n"
msgid "B<char *strdup(const char *>I<s>B<);>"
msgstr "B<char *strdup(const char *>I<s>B<);>\n"

#. type: Plain text
msgid ""
"Return a duplicate of the string I<s> in memory allocated using I<malloc>(3)."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strfry(char *>I<string>B<);>\n"
msgid "B<char *strfry(char *>I<string>B<);>"
msgstr "B<char *strfry(char *>I<zeichenkette>B<);>\n"

#. type: Plain text
msgid "Randomly swap the characters in I<string>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<size_t strlen(const char *>I<s>B<);>\n"
msgid "B<size_t strlen(const char *>I<s>B<);>"
msgstr "B<size_t strlen(const char *>I<s>B<);>\n"

#. type: Plain text
msgid "Return the length of the string I<s>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strncat(char *>I<dest>B<, const char *>I<src>B<, size_t >I<n>B<);>\n"
msgid "B<char *strncat(char *>I<dest>B<, const char *>I<src>B<, size_t >I<n>B<);>"
msgstr ""
"B<char *strncat(char *>I<ziel>B<, const char *>I<quelle>B<,>\n"
"B<              size_t >I<n>B<);>\n"

#. type: Plain text
msgid ""
"Append at most I<n> characters from the string I<src> to the string I<dest>, "
"returning a pointer to I<dest>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<int strncmp(const char *>I<s1>B<, const char *>I<s2>B<, size_t >I<n>B<);>\n"
msgid "B<int strncmp(const char *>I<s1>B<, const char *>I<s2>B<, size_t >I<n>B<);>"
msgstr "B<int strncmp(const char *>I<s1>B<, const char *>I<s2>B<, size_t >I<n>B<);>\n"

#. type: Plain text
msgid "Compare at most I<n> bytes of the strings I<s1> and I<s2.>"
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strncpy(char *>I<dest>B<, const char *>I<src>B<, size_t >I<n>B<);>\n"
msgid "B<char *strncpy(char *>I<dest>B<, const char *>I<src>B<, size_t >I<n>B<);>"
msgstr ""
"B<char *strncpy(char *>I<ziel>B<, const char *>I<quelle>B<,>\n"
"B<              size_t >I<n>B<);>\n"

#. type: Plain text
msgid ""
"Copy at most I<n> bytes from string I<src> to I<dest>, returning a pointer "
"to the start of I<dest>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strpbrk(const char *>I<s>B<, const char *>I<accept>B<);>\n"
msgid "B<char *strpbrk(const char *>I<s>B<, const char *>I<accept>B<);>"
msgstr "B<char *strpbrk(const char *>I<s>B<, const char *>I<akzeptieren>B<);>\n"

#. type: Plain text
msgid ""
"Return a pointer to the first occurrence in the string I<s> of one of the "
"bytes in the string I<accept>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strrchr(const char *>I<s>B<, int >I<c>B<);>\n"
msgid "B<char *strrchr(const char *>I<s>B<, int >I<c>B<);>"
msgstr "B<char *strrchr(const char *>I<s>B<, int >I<c>B<);>\n"

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strsep(char **>I<stringp>B<, const char *>I<delim>B<);>\n"
msgid "B<char *strsep(char **>I<stringp>B<, const char *>I<delim>B<);>"
msgstr "B<char *strsep(char **>I<stringp>B<, const char *>I<delim>B<);>\n"

#. type: Plain text
msgid ""
"Extract the initial token in I<stringp> that is delimited by one of the "
"bytes in I<delim>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<size_t strspn(const char *>I<s>B<, const char *>I<accept>B<);>\n"
msgid "B<size_t strspn(const char *>I<s>B<, const char *>I<accept>B<);>"
msgstr "B<size_t strspn(const char *>I<s>B<, const char *>I<akzeptieren>B<);>\n"

#. type: Plain text
msgid ""
"Calculate the length of the starting segment in the string I<s> that "
"consists entirely of bytes in I<accept>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strstr(const char *>I<haystack>B<, const char *>I<needle>B<);>\n"
msgid "B<char *strstr(const char *>I<haystack>B<, const char *>I<needle>B<);>"
msgstr "B<char *strstr(const char *>I<heuhaufen>B<, const char *>I<nadel>B<);>\n"

#. type: Plain text
msgid ""
"Find the first occurrence of the substring I<needle> in the string "
"I<haystack>, returning a pointer to the found substring."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<char *strtok(char *>I<s>B<, const char *>I<delim>B<);>\n"
msgid "B<char *strtok(char *>I<s>B<, const char *>I<delim>B<);>"
msgstr "B<char *strtok(char *>I<s>B<, const char *>I<delim>B<);>\n"

#. type: Plain text
msgid ""
"Extract tokens from the string I<s> that are delimited by one of the bytes "
"in I<delim>."
msgstr ""

#. type: TP
#, fuzzy, no-wrap
#| msgid "B<size_t strxfrm(char *>I<dest>B<, const char *>I<src>B<, size_t >I<n>B<);>\n"
msgid "B<size_t strxfrm(char *>I<dest>B<, const char *>I<src>B<, size_t >I<n>B<);>"
msgstr ""
"B<size_t strxfrm(char *>I<ziel>B<, const char *>I<quelle>B<,>\n"
"B<               size_t >I<n>B<);>\n"

#. type: Plain text
msgid ""
"Transforms I<src> to the current locale and copies the first I<n> characters "
"to I<dest>."
msgstr ""

#. type: SH
#, no-wrap
msgid "DESCRIPTION"
msgstr "BESCHREIBUNG"

#. type: Plain text
msgid ""
"The string functions perform string operations on null-terminated strings.  "
"See the individual man pages for descriptions of each function."
msgstr ""
"Die Zeichenkettenfunktionen führen Operationen an Null-terminierten "
"Zeichenketten durch. Siehe dazu die einzelnen Handbuchseiten, um "
"Beschreibungen der einzelnen Funktionen zu erhalten."

#. type: SH
#, no-wrap
msgid "SEE ALSO"
msgstr "SIEHE AUCH"

#. type: Plain text
msgid ""
"B<index>(3), B<rindex>(3), B<stpcpy>(3), B<strcasecmp>(3), B<strcat>(3), "
"B<strchr>(3), B<strcmp>(3), B<strcoll>(3), B<strcpy>(3), B<strcspn>(3), "
"B<strdup>(3), B<strfry>(3), B<strlen>(3), B<strncasecmp>(3), B<strncat>(3), "
"B<strncmp>(3), B<strncpy>(3), B<strpbrk>(3), B<strrchr>(3), B<strsep>(3), "
"B<strspn>(3), B<strstr>(3), B<strtok>(3), B<strxfrm>(3)"
msgstr ""
"B<index>(3), B<rindex>(3), B<stpcpy>(3), B<strcasecmp>(3), B<strcat>(3), "
"B<strchr>(3), B<strcmp>(3), B<strcoll>(3), B<strcpy>(3), B<strcspn>(3), "
"B<strdup>(3), B<strfry>(3), B<strlen>(3), B<strncasecmp>(3), B<strncat>(3), "
"B<strncmp>(3), B<strncpy>(3), B<strpbrk>(3), B<strrchr>(3), B<strsep>(3), "
"B<strspn>(3), B<strstr>(3), B<strtok>(3), B<strxfrm>(3)"

#. type: SH
#, no-wrap
msgid "COLOPHON"
msgstr "KOLOPHON"

#. type: Plain text
msgid ""
"This page is part of release 3.56 of the Linux I<man-pages> project.  A "
"description of the project, and information about reporting bugs, can be "
"found at \\%http://www.kernel.org/doc/man-pages/."
msgstr ""
"Diese Seite ist Teil der Veröffentlichung 3.56 des Projekts Linux-I<man-"
"pages>. Eine Beschreibung des Projekts und Informationen, wie Fehler "
"gemeldet werden können, finden sich unter \\%http://www.kernel.org/doc/man-"
"pages/."
