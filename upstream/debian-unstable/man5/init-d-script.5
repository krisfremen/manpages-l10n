.\" Automatically generated by Pandoc 2.5
.\"
.TH "INIT\-D\-SCRIPT" "5" "2019\-08\-05" "" ""
.hy
.SH NAME
.PP
init\-d\-script \- interpreter for short and simple init.d scripts.
.SH DESCRIPTION
.PP
Generic init.d script framework to reduce the redundant code in
\f[I]/etc/init.d/\f[R].
The goal is to create an init.d script that is Debian and LSB compliant.
When the Debian policy conflict with the LSB, the Debian policy take
preference.
.PP
This is a simple example on how init\-d\-script can be used to start and
stop a daemon with PID file support:
.IP
.nf
\f[C]
#!/usr/bin/env /lib/init/init\-d\-script
### BEGIN INIT INFO
# Provides:          atd
# Required\-Start:    $syslog $time $remote_fs
# Required\-Stop:     $syslog $time $remote_fs
# Default\-Start:     2 3 4 5
# Default\-Stop:      0 1 6
# Short\-Description: run at jobs
# Description:       Debian init script to start the daemon
#                    running at jobs.
### END INIT INFO
DAEMON=/usr/sbin/atd
\f[R]
.fi
.PP
Following variables affect behaviour of init script:
.TP
.B \f[B]DAEMON\f[R]
path to daemon being started.
If init script is not supposed to start any kind of daemon, functions
\f[B]do_start_override\f[R], \f[B]do_stop_override\f[R] and
\f[B]do_status_override\f[R] should be defined instead.
.TP
.B \f[B]DAEMON_ARGS\f[R]
additional arguments, passed to daemon during start.
.TP
.B \f[B]NAME\f[R]
Additional environment variables are sources from
\f[I]/etc/default/${NAME}\f[R].
If unset, this variable defaults to basename of \[ga]DAEMON\[cq] value.
.TP
.B \f[B]COMMAND_NAME\f[R]
If this variable is set, it is used as argument to \f[B]\-\-name\f[R]
option of \f[B]start\-stop\-daemon\f[R].
It may be useful if value of \f[B]NAME\f[R] variable is too long.
.TP
.B \f[B]PIDFILE\f[R]
path to file, where process identifier of started daemon will be stored
during start.
If value is verbatim \f[B]none\f[R], process identifier will not be
stored in any file.
If this variable is not set, it gets sensible default value, so is
rarely necessary to set this variable explicitly.
.PP
Additionally, it is possible to behaviour of resulting shell script by
overriding some of internal functions.
To do so, define function with **_override** suffix.
So, for example, to override \f[B]do_status\f[R] function one should
define \f[B]do_status_override\f[R] function.
\f[B]EXCEPT\f[R] to redefine \f[B]do_reload\f[R] function, it should be
defined as\-is, \f[B]without\f[R] suffix.
.PP
Here is control flow chart, that expalins what functions are called and
when:
.IP
.nf
\f[C]
/etc/init.d/script start
  do_start
    do_start_prepare # no\-op
    do_start_cmd     # start\-stop\-daemon is called here
    do_start_cleanup # no\-op

/etc/init.d/script stop
  do_stop
    do_stop_prepare # no\-op
    do_stop_cmd     # start\-stop\-daemon is called here
    do_stop_cleanup # no\-op

/etc/init.d/script status
  do_status

/etc/init.d/script reload
  do_reload
    do_usage
    exit 3

/etc/init.d/script force\-reload
  do_force_reload
    do_reload   # if overridden
    do_restart 
      do_restart_prepare
      do_stop_cmd
      do_start_cmd
      do_restart_cleanup
  
/etc/init.d/script restart
  do_force_restart
  
/etc/init.d/script try\-restart
  if do_status ; then
    do_restart
      do_restart_prepare
      do_stop_cmd  # start\-stop\-daemon is called here
      do_start_cmd # start\-stop\-daemon is called here
      do_restart_cleanup

/etc/init.d/script <arg>
  do_unknown <arg>
    exit 3

/etc/init.d/script
  do_usage
\f[R]
.fi
.PP
As can be seen, by default script does not support \f[B]reload\f[R]
action, it should be implemented by script writer by defining
\f[B]do_reload\f[R] function.
.PP
If daemon performs reload action upon receiving \f[B]SIGUSR1\f[R]
signal, generic implementation can be used with following code:
.IP
.nf
\f[C]
alias do_reload=do_reload_sigusr1
\f[R]
.fi
.SH SEE ALSO
.PP
\f[B]inittab\f[R](8), \f[B]service\f[R](8), \f[B]update\-rc.d\f[R](8).
.SH AUTHORS
Petter Reinholdtsen <pere@debian.org>.
