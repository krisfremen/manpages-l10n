.\" (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" (c) 2003 by International Business Machines Corportion
.\" This file is distributed according to the GNU General Public License.
.TH GETCWD 2 2003-03-28 "Linux 2.4" "Linux Programmer's Manual"
.SH NAME
getcwd \- get current working directory
.SH SYNOPSIS
.nf
/*
 * This page documents the getcwd(2) system call, which
 * is not defined in any user-space header files; you should
 * use getcwd(3) defined in <unistd.h> instead in applications.
 */

.BI "long getcwd(char *" buf ", unsigned long " size );
.fi
.SH DESCRIPTION
The 
.BR getcwd ()
function copies an absolute pathname of the
current working directory to the array pointed to by 
.IR buf ,
which is of length 
.IR size .
.PP 
If the current absolute path name would require a buffer
longer than 
.I size 
elements, 
.B -1 
is returned, and 
.I errno 
is
set to 
.BR ERANGE ; 
an application should check for this error,
and allocate a larger buffer if necessary.
.PP
If 
.I buf 
is NULL, the behaviour of 
.BR getcwd () 
is undefined.

.SH "RETURN VALUE"
.B -1 
on failure (for example, if the current directory is not readable), with 
.I errno 
set accordingly, and the number of characters stored in 
.I buf 
on success. The contents of the array pointed to by 
.IR buf 
is undefined on error.
.PP
Note that this return value differs from the 
.BR getcwd (3) 
library function, which returns 
.B NULL 
on failure and the address of 
.I buf
on success.

.SH ERRORS
.TP
.B ENOMEM 
if user memory cannot be mapped
.TP
.B ENOENT 
if directory does not exist (i.e. it has been deleted)
.TP
.B ERANGE 
if not enough space available for storing the path
.TP
.B EFAULT 
if memory access violation occurs while copying

.SH "CONFORMING TO"
The 
.BR getcwd 
system call is Linux specific, use the 
.BR getcwd
C library function for portability.

.SH "SEE ALSO"
.BR getcwd (3)
