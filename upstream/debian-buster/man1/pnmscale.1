.TH pnmscale 1 "04 November 2000"
.IX pnmscale
.SH NAME
pnmscale - scale a portable anymap
.SH SYNOPSIS
.B pnmscale
.I scale_factor
.RI [ pnmfile ]
.br
.B pnmscale -reduce
.I reduction_factor
.RI [ pnmfile ]
.br
.B pnmscale
.RB [{ -xsize=\fIcols " | " -width=\fIcols " | " -xscale=\fIfactor }]
.RB [{ -ysize=\fIrows " | " -height=\fIrows " | " -yscale=\fIfactor }]
.RI [ pnmfile ]
.br
.B pnmscale -xysize
.I cols rows
.RI [ pnmfile ]
.br
.B pnmscale -pixels
.I n
.RI [ pnmfile ]

Miscellaneous options:
.br
.B -verbose -nomix


Minimum unique abbreviation of option is acceptable.  You may use double
hypens instead of single hyphen to denote options.  You may use white
space in place of the equals sign to separate an option name from its value.


.SH DESCRIPTION

Reads a PBM, PGM, or PPM image as input,
scales it by the specified factor or factors and produces a PGM or
PPM image as output.
.IX shrinking
.IX enlarging
If the input file is in color (PPM), the output will be too,
otherwise it will be grayscale (PGM).  This is true even if the input is
a black and white bitmap (PBM), because the process of scaling can
turn a combination of black and white pixels into a gray pixel.

If you want PBM output, use
.B pgmtopbm
to convert 
.BR pnmscale 's
output to PBM.  Also consider
.BR pbmreduce .

You can both enlarge (scale factor > 1) and reduce (scale factor < 1).

When you specify an absolute size or scale factor for both dimensions, 
.B pnmscale
scales each dimension independently without consideration of the aspect
ratio.

If you specify one dimension as a pixel size and don't specify the other
dimension, 
.B pnmscale
scales the unspecified dimension to preserve the aspect ratio.

If you specify one dimension as a scale factor and don't specify the other
dimension, 
.B pnmscale
leaves the unspecified dimension unchanged from the input.

If you specify the
.I scale_factor
parameter instead of dimension options, that is the scale factor for
both dimensions.  It is equivalent to
.BI -xscale= scale_factor " -yscale=" scale_factor
.RB .

Specifying the 
.B -reduce
.I reduction_factor
option is equivalent to specifying the 
.I scale_factor 
parameter, where 
.I scale_factor
is the reciprocal of
.IR reduction_factor .

.B -xysize
specifies a bounding box.  
.B pnmscale
scales the input image to the largest size that fits within the box,
while preserving its aspect ratio.

.B -pixels
specifies a maximum total number of output pixels.  
.B pnmscale
scales the image down to that number of pixels.  If the input image is 
already no more than that many pixels, 
.B pnmscale
just copies it as output; 
.B pnmscale
does not scale up with
.BR -pixels .

If you enlarge by a factor of 3 or more, you should probably add a
.I pnmsmooth
.IX pnmsmooth
step; otherwise, you can see the original pixels in the resulting image.

When the scale factor is not an integer (including all cases of
scaling down), there are two ways to do the scaling.  Which one
.B pnmscale 
does is controlled by its
.B -nomix
option.

By default,
.B pnmscale
mixes the colors of adjacent pixels to produce output pixels that contain
information from multiple input pixels.  This makes the image look more like
it would if it had infinite resolution.  Note that it means the output may
contain colors that aren't in the input at all.

But if you specify
.BR -nomix ,
.B pnmscale
never mixes pixels.  Each output pixel is derived from one input
pixel.  If you're scaling up, pixels get duplicated.  If you're
scaling down, pixels get omitted.  Note that this means the image is
rather distorted.  If you scale up by 1.5 horizontally, for example,
the even numbered input pixels are doubled in the output and the
odd numbered ones are copied singly.

When the scale factor is an integer (which means you're scaling up),
the
.B -nomix
option has no effect -- output pixels are always just N copies of the 
input pixels.  In this case, though, consider using
.B pamstretch
instead of 
.B pnmscale
to get the added pixels interpolated instead of just copied and thereby
get a smoother enlargement.

.B pnmscale 
with
.B -nomix
is faster than without, but
.B pnmenlarge
is faster still.
.B pnmenlarge
works only on integer enlargements.

A useful application of
.B pnmscale
is to blur an image.  Scale it down (without 
.B -nomix )
to discard some information, then scale it back up using
.BR pamstretch .

Or scale it back up with
.B pnmscale
and create a "pixelized" image, which is sort of a computer-age version
of blurring.


.SS PRECISION

.B pnmscale 
uses floating point arithmetic internally.  There is a speed cost
associated with this.  For some images, you can get the acceptable
results (in fact, sometimes identical results) faster with 
.BR pnmscalefixed ,
which uses fixed point arithmetic.
.B pnmscalefixed
may, however, distort your image a little.  See 
.BR pnmscalefixed 's
man page for a complete discussion of the difference.

.SH "SEE ALSO"
.BR pnmscalefixed (1),
.BR pamstretch (1),
.BR pbmreduce (1), 
.BR pnmenlarge (1), 
.BR pnmsmooth (1), 
.BR pnmcut (1),
.BR pnm(5)

.SH AUTHOR
Copyright (C) 1989, 1991 by Jef Poskanzer.
.\" Permission to use, copy, modify, and distribute this software and its
.\" documentation for any purpose and without fee is hereby granted, provided
.\" that the above copyright notice appear in all copies and that both that
.\" copyright notice and this permission notice appear in supporting
.\" documentation.  This software is provided "as is" without express or
.\" implied warranty.
