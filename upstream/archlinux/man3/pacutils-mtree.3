.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "pacutils-mtree 3"
.TH pacutils-mtree 3 "2021-08-14" "pacutils" "pacutils-mtree"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pacutils\-mtree \- read mtree data for installed packages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <pacutils/mtree.h>
\&
\& typedef struct pu_mtree_t {
\&   char *path;
\&   char *type;
\&   uid_t uid;
\&   gid_t gid;
\&   mode_t mode;
\&   off_t size;
\&   char *md5digest;
\&   char *sha256digest;
\& } pu_mtree_t;
\&
\& typedef struct {
\&   FILE *stream;
\&   int eof;
\&   pu_mtree_t defaults;
\& } pu_mtree_reader_t;
\&
\& pu_mtree_reader_t *pu_mtree_reader_open_stream(FILE *stream);
\& pu_mtree_reader_t *pu_mtree_reader_open_package(alpm_handle_t *h, alpm_pkg_t *p);
\& pu_mtree_t *pu_mtree_reader_next(pu_mtree_reader_t *reader, pu_mtree_t *dest);
\& void pu_mtree_reader_free(pu_mtree_reader_t *reader);
\& void pu_mtree_free(pu_mtree_t *mtree);
\&
\& /* deprecated */
\& alpm_list_t *pu_mtree_load_pkg_mtree(alpm_handle_t *handle, alpm_pkg_t *pkg);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Package mtree reading functions are provided to fill gaps in libarchive's mtree
reader, notably \f(CW\*(C`md5digest\*(C'\fR and \f(CW\*(C`sha256digest\*(C'\fR which are currently not read
by libarchive.  Support is incomplete and should only be used to supplement
libalpm's native mtree reader.
.IP "pu_mtree_reader_t *pu_mtree_reader_open_stream(\s-1FILE\s0 *stream);" 4
.IX Item "pu_mtree_reader_t *pu_mtree_reader_open_stream(FILE *stream);"
Open a file stream for parsing.
.IP "pu_mtree_reader_t *pu_mtree_reader_open_package(alpm_handle_t *h, alpm_pkg_t *p);" 4
.IX Item "pu_mtree_reader_t *pu_mtree_reader_open_package(alpm_handle_t *h, alpm_pkg_t *p);"
Open an installed package's mtree file for parsing.  Results are undefined if
\&\f(CW\*(C`p\*(C'\fR is not a locally installed package.
.IP "pu_mtree_t *pu_mtree_reader_next(pu_mtree_reader_t *reader, pu_mtree_t *dest);" 4
.IX Item "pu_mtree_t *pu_mtree_reader_next(pu_mtree_reader_t *reader, pu_mtree_t *dest);"
Read and return the next entry in the mtree file.  If \f(CW\*(C`dest\*(C'\fR is \f(CW\*(C`NULL\*(C'\fR a new
\&\f(CW\*(C`pu_mtree_t\*(C'\fR object will be allocated that should be freed by the caller.
Otherwise, it will be filled with the parsed data.  Internally allocated memory
will automatically be freed as needed.
.IP "void pu_mtree_free(pu_mtree_t *mtree);" 4
.IX Item "void pu_mtree_free(pu_mtree_t *mtree);"
Free a \f(CW\*(C`pu_mtree_t\*(C'\fR struct.
.IP "void pu_mtree_reader_free(pu_mtree_reader_t *reader);" 4
.IX Item "void pu_mtree_reader_free(pu_mtree_reader_t *reader);"
Free a \f(CW\*(C`pu_mtree_reader_t\*(C'\fR object.
.IP "alpm_list_t *pu_mtree_load_pkg_mtree(alpm_handle_t *handle, alpm_pkg_t *pkg);" 4
.IX Item "alpm_list_t *pu_mtree_load_pkg_mtree(alpm_handle_t *handle, alpm_pkg_t *pkg);"
Returns a list of mtree entries for \f(CW\*(C`pkg\*(C'\fR.  \fB\s-1DEPRECATED\s0\fR: use
\&\f(CW\*(C`pu_mtree_reader_open_package\*(C'\fR instead.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "Print file md5sums for a package:" 4
.IX Item "Print file md5sums for a package:"
.Vb 2
\& pu_mtree_t *m;
\& pu_mtree_reader_t *r;
\&
\& if((r = pu_mtree_reader_open_package(handle, pkg)) == NULL) {
\&     fprintf(stderr, "error: unable to load mtree data for \*(Aq%s\*(Aq\en",
\&        alpm_pkg_get_name(pkg));
\&     return;
\& }
\&
\& while((m = pu_mtree_reader_next(r, NULL))) {
\&     const char *md5 = m\->md5digest;
\&     printf("%s: %s\en", m\->path,
\&         md5 && md5[0] != \*(Aq\e0\*(Aq ? md5 : "(no md5sum provided)");
\&     pu_mtree_free(m);
\& }
\& if(!reader\->eof) {
\&     fprintf(stderr, "error: unable to read mtree data for \*(Aq%s\*(Aq\en",
\&        alpm_pkg_get_name(pkg));
\& }
\&
\& pu_mtree_reader_free(r);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\fBalpm_pkg_mtree_open\fR\|(3), \fBalpm_pkg_mtree_next\fR\|(3), \fBalpm_pkg_mtree_close\fR\|(3)" 4
.IX Item "alpm_pkg_mtree_open, alpm_pkg_mtree_next, alpm_pkg_mtree_close"
.PD 0
.ie n .IP "\fBmtree\fR\|(5) \- description of ""pu_mtree_t"" members" 4
.el .IP "\fBmtree\fR\|(5) \- description of \f(CWpu_mtree_t\fR members" 4
.IX Item "mtree - description of pu_mtree_t members"
