.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GDBM_File 3perl"
.TH GDBM_File 3perl "2021-11-13" "perl v5.34.0" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GDBM_File \- Perl5 access to the gdbm library.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use GDBM_File;
\&    [$db =] tie %hash, \*(AqGDBM_File\*(Aq, $filename, &GDBM_WRCREAT, 0640;
\&    # Use the %hash array.
\&
\&    $e = $db\->errno;
\&    $e = $db\->syserrno;
\&    $str = $db\->strerror;
\&    $bool = $db\->needs_recovery;
\&
\&    $db\->clear_error;
\&
\&    $db\->reorganize;
\&    $db\->sync;
\&
\&    $n = $db\->count;
\&
\&    $n = $db\->flags;
\&
\&    $str = $db\->dbname;
\&
\&    $db\->cache_size;
\&    $db\->cache_size($newsize);
\&
\&    $n = $db\->block_size;
\&
\&    $bool = $db\->sync_mode;
\&    $db\->sync_mode($bool);
\&
\&    $bool = $db\->centfree;
\&    $db\->centfree($bool);
\&
\&    $bool = $db\->coalesce;
\&    $db\->coalesce($bool);
\&
\&    $bool = $db\->mmap;
\&
\&    $size = $db\->mmapsize;
\&    $db\->mmapsize($newsize);
\&
\&    $db\->recover(%args);
\&
\&    untie %hash ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBGDBM_File\fR is a module which allows Perl programs to make use of the
facilities provided by the \s-1GNU\s0 gdbm library.  If you intend to use this
module you should really have a copy of the gdbm manualpage at hand.
.PP
Most of the libgdbm.a functions are available through the GDBM_File
interface.
.PP
Unlike Perl's built-in hashes, it is not safe to \f(CW\*(C`delete\*(C'\fR the current
item from a GDBM_File tied hash while iterating over it with \f(CW\*(C`each\*(C'\fR.
This is a limitation of the gdbm library.
.SH "STATIC METHODS"
.IX Header "STATIC METHODS"
.SS "GDBM_version"
.IX Subsection "GDBM_version"
.Vb 2
\&    $str = GDBM_File\->GDBM_version;
\&    @ar = GDBM_File\->GDBM_version;
.Ve
.PP
Returns the version number of the underlying \fBlibgdbm\fR library. In scalar
context, returns the library version formatted as string:
.PP
.Vb 1
\&    MINOR.MAJOR[.PATCH][ (GUESS)]
.Ve
.PP
where \fI\s-1MINOR\s0\fR, \fI\s-1MAJOR\s0\fR, and \fI\s-1PATCH\s0\fR are version numbers, and \fI\s-1GUESS\s0\fR is
a guess level (see below).
.PP
In list context, returns a list:
.PP
.Vb 1
\&    ( MINOR, MAJOR, PATCH [, GUESS] )
.Ve
.PP
The \fI\s-1GUESS\s0\fR component is present only if \fBlibgdbm\fR version is 1.8.3 or
earlier. This is because earlier releases of \fBlibgdbm\fR did not include
information about their version and the \fBGDBM_File\fR module has to implement
certain guesswork in order to determine it. \fI\s-1GUESS\s0\fR is a textual description
in string context, and a positive number indicating how rough the guess is
in list context. Possible values are:
.IP "1  \- exact guess" 4
.IX Item "1 - exact guess"
The major and minor version numbers are guaranteed to be correct. The actual
patchlevel is most probably guessed right, but can be 1\-2 less than indicated.
.IP "2  \- approximate" 4
.IX Item "2 - approximate"
The major and minor number are guaranteed to be correct. The patchlevel is
set to the upper bound.
.IP "3  \- rough guess" 4
.IX Item "3 - rough guess"
The version is guaranteed to be not newer than \fB\f(BI\s-1MAJOR\s0\fB.\f(BI\s-1MINOR\s0\fB\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "close"
.IX Subsection "close"
.Vb 1
\&    $db\->close;
.Ve
.PP
Closes the database. You are not advised to use this method directly. Please,
use \fBuntie\fR instead.
.SS "errno"
.IX Subsection "errno"
.Vb 1
\&    $db\->errno
.Ve
.PP
Returns the last error status associated with this database.
.SS "syserrno"
.IX Subsection "syserrno"
.Vb 1
\&    $db\->syserrno
.Ve
.PP
Returns the last system error status (C \f(CW\*(C`errno\*(C'\fR variable), associated with
this database,
.SS "strerror"
.IX Subsection "strerror"
.Vb 1
\&    $db\->strerror
.Ve
.PP
Returns textual description of the last error that occurred in this database.
.SS "clear_error"
.IX Subsection "clear_error"
.Vb 1
\&    $db\->clear_error
.Ve
.PP
Clear error status.
.SS "needs_recovery"
.IX Subsection "needs_recovery"
.Vb 1
\&    $db\->needs_recovery
.Ve
.PP
Returns true if the database needs recovery.
.SS "reorganize"
.IX Subsection "reorganize"
.Vb 1
\&    $db\->reorganize;
.Ve
.PP
Reorganizes the database.
.SS "sync"
.IX Subsection "sync"
.Vb 1
\&    $db\->sync;
.Ve
.PP
Synchronizes recent changes to the database with its disk copy.
.SS "count"
.IX Subsection "count"
.Vb 1
\&    $n = $db\->count;
.Ve
.PP
Returns number of keys in the database.
.SS "flags"
.IX Subsection "flags"
.Vb 1
\&    $db\->flags;
.Ve
.PP
Returns flags passed as 4th argument to \fBtie\fR.
.SS "dbname"
.IX Subsection "dbname"
.Vb 1
\&    $db\->dbname;
.Ve
.PP
Returns the database name (i.e. 3rd argument to \fBtie\fR.
.SS "cache_size"
.IX Subsection "cache_size"
.Vb 2
\&    $db\->cache_size;
\&    $db\->cache_size($newsize);
.Ve
.PP
Returns the size of the internal \fB\s-1GDBM\s0\fR cache for that database.
.PP
Called with argument, sets the size to \fI\f(CI$newsize\fI\fR.
.SS "block_size"
.IX Subsection "block_size"
.Vb 1
\&    $db\->block_size;
.Ve
.PP
Returns the block size of the database.
.SS "sync_mode"
.IX Subsection "sync_mode"
.Vb 2
\&    $db\->sync_mode;
\&    $db\->sync_mode($bool);
.Ve
.PP
Returns the status of the automatic synchronization mode. Called with argument,
enables or disables the sync mode, depending on whether \f(CW$bool\fR is \fBtrue\fR or
\&\fBfalse\fR.
.PP
When synchronization mode is on (\fBtrue\fR), any changes to the database are
immediately written to the disk. This ensures database consistency in case
of any unforeseen errors (e.g. power failures), at the expense of considerable
slowdown of operation.
.PP
Synchronization mode is off by default.
.SS "centfree"
.IX Subsection "centfree"
.Vb 2
\&    $db\->centfree;
\&    $db\->centfree($bool);
.Ve
.PP
Returns status of the central free block pool (\fB0\fR \- disabled,
\&\fB1\fR \- enabled).
.PP
With argument, changes its status.
.PP
By default, central free block pool is disabled.
.SS "coalesce"
.IX Subsection "coalesce"
.Vb 2
\&    $db\->coalesce;
\&    $db\->coalesce($bool);
.Ve
.SS "mmap"
.IX Subsection "mmap"
.Vb 1
\&    $db\->mmap;
.Ve
.PP
Returns true if memory mapping is enabled.
.PP
This method will \fBcroak\fR if the \fBlibgdbm\fR library is complied without
memory mapping support.
.SS "mmapsize"
.IX Subsection "mmapsize"
.Vb 2
\&    $db\->mmapsize;
\&    $db\->mmapsize($newsize);
.Ve
.PP
If memory mapping is enabled, returns the size of memory mapping. With
argument, sets the size to \fB\f(CB$newsize\fB\fR.
.PP
This method will \fBcroak\fR if the \fBlibgdbm\fR library is complied without
memory mapping support.
.SS "recover"
.IX Subsection "recover"
.Vb 1
\&    $db\->recover(%args);
.Ve
.PP
Recovers data from a failed database. \fB\f(CB%args\fB\fR is optional and can contain
following keys:
.IP "err => sub { ... }" 4
.IX Item "err => sub { ... }"
Reference to code for detailed error reporting. Upon encountering an error,
\&\fBrecover\fR will call this sub with a single argument \- a description of the
error.
.IP "backup => \e$str" 4
.IX Item "backup => $str"
Creates a backup copy of the database before recovery and returns its
filename in \fB\f(CB$str\fB\fR.
.ie n .IP "max_failed_keys => $n" 4
.el .IP "max_failed_keys => \f(CW$n\fR" 4
.IX Item "max_failed_keys => $n"
Maximum allowed number of failed keys. If the actual number becomes equal
to \fI\f(CI$n\fI\fR, \fBrecover\fR aborts and returns error.
.ie n .IP "max_failed_buckets => $n" 4
.el .IP "max_failed_buckets => \f(CW$n\fR" 4
.IX Item "max_failed_buckets => $n"
Maximum allowed number of failed buckets. If the actual number becomes equal
to \fI\f(CI$n\fI\fR, \fBrecover\fR aborts and returns error.
.ie n .IP "max_failures => $n" 4
.el .IP "max_failures => \f(CW$n\fR" 4
.IX Item "max_failures => $n"
Maximum allowed number of failures during recovery.
.IP "stat => \e%hash" 4
.IX Item "stat => %hash"
Return recovery statistics in \fI\f(CI%hash\fI\fR. Upon return, the following keys will
be present:
.RS 4
.IP "recovered_keys" 8
.IX Item "recovered_keys"
Number of successfully recovered keys.
.IP "recovered_buckets" 8
.IX Item "recovered_buckets"
Number of successfully recovered buckets.
.IP "failed_keys" 8
.IX Item "failed_keys"
Number of keys that failed to be retrieved.
.IP "failed_buckets" 8
.IX Item "failed_buckets"
Number of buckets that failed to be retrieved.
.RE
.RS 4
.RE
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
gdbm is available from any \s-1GNU\s0 archive.  The master site is
\&\f(CW\*(C`ftp.gnu.org\*(C'\fR, but you are strongly urged to use one of the many
mirrors.  You can obtain a list of mirror sites from
<http://www.gnu.org/order/ftp.html>.
.SH "SECURITY AND PORTABILITY"
.IX Header "SECURITY AND PORTABILITY"
\&\fBDo not accept \s-1GDBM\s0 files from untrusted sources.\fR
.PP
\&\s-1GDBM\s0 files are not portable across platforms.
.PP
The \s-1GDBM\s0 documentation doesn't imply that files from untrusted sources
can be safely used with \f(CW\*(C`libgdbm\*(C'\fR.
.PP
A maliciously crafted file might cause perl to crash or even expose a
security vulnerability.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1), \fBDB_File\fR\|(3), perldbmfilter,
\&\fBgdbm\fR\|(3),
<https://www.gnu.org.ua/software/gdbm/manual.html>.
