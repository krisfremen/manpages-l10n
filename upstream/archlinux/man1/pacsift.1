.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PACSIFT 1"
.TH PACSIFT 1 "2021-08-14" "pacutils" "pacsift"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pacsift \- query and filter packages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& pacsift [options] (<field> <term>)...
\& pacsift (\-\-help|\-\-version)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
By default the intersection of matched packages are returned.  If a field is
provided multiple times the union of matches will be used for that field.
.PP
If \fIstdin\fR is not connected to a terminal, packages to filter will be read
from \fIstdin\fR.
.PP
Combine with \fBpacinfo\fR to display brief package information similar to
\&\f(CW\*(C`pacman \-Qs\*(C'\fR and \f(CW\*(C`pacman \-Ss\*(C'\fR:
.PP
.Vb 1
\& pacsift \-\-name pacman | pacinfo \-\-short
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-config\fR=\fIpath\fR" 4
.IX Item "--config=path"
Set an alternate configuration file path.
.IP "\fB\-\-dbext\fR=\fIextension\fR" 4
.IX Item "--dbext=extension"
Set an alternate sync database extension.
.IP "\fB\-\-dbpath\fR=\fIpath\fR" 4
.IX Item "--dbpath=path"
Set an alternate database path.
.IP "\fB\-\-root\fR=\fIpath\fR" 4
.IX Item "--root=path"
Set an alternate installation root.
.IP "\fB\-\-sysroot\fR=\fIpath\fR" 4
.IX Item "--sysroot=path"
Set an alternate system root.  See \fBpacutils\-sysroot\fR\|(7).
.IP "\fB\-\-null\fR[=\fIsep\fR]" 4
.IX Item "--null[=sep]"
Set an alternate separator for values parsed from \fIstdin\fR.  By default
a newline \f(CW\*(C`\en\*(C'\fR is used as the separator.  If \fB\-\-null\fR is used without
specifying \fIsep\fR \f(CW\*(C`NUL\*(C'\fR will be used.
.IP "\fB\-\-exists\fR" 4
.IX Item "--exists"
Exit with a non-zero value if no matches are found.
.IP "\fB\-\-not\-exists\fR" 4
.IX Item "--not-exists"
Exit with a non-zero value if matches are found.
.IP "\fB\-\-invert\fR" 4
.IX Item "--invert"
Return packages that \fB\s-1DO NOT\s0\fR match the provided search terms.
.IP "\fB\-\-any\fR" 4
.IX Item "--any"
Return the union of matched packages rather than the intersection.
.IP "\fB\-\-exact\fR" 4
.IX Item "--exact"
Match values exactly.
.IP "\fB\-\-regex\fR" 4
.IX Item "--regex"
Treat string values as extended case-insensitive regular expressions.
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Display usage information and exit.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Display version information and exit.
.SS "Filters"
.IX Subsection "Filters"
Filters limit the initial set of packages to be searched.  They may not be used
if packages are provided on \fIstdin\fR and they are not affected by \fB\-\-invert\fR
or \fB\-\-any\fR.
.IP "\fB\-\-local\fR" 4
.IX Item "--local"
Search locally installed packages.  Similar to:
 pacsift \-\-repo=local | pacsift ...
.IP "\fB\-\-sync\fR" 4
.IX Item "--sync"
Search packages in sync databases.  Similar to:
 pacsift \-\-invert \-\-repo=local | pacsift ...
.IP "\fB\-\-cache\fR (\fB\s-1EXPERIMENTAL\s0\fR)" 4
.IX Item "--cache (EXPERIMENTAL)"
Search packages in cache directories.
.SS "String Fields"
.IX Subsection "String Fields"
By default string fields will use a case-insensitive substring search.  If
\&\fB\-\-exact\fR is used string fields must match \fIval\fR exactly.  If \f(CW\*(C`\-\-regex\*(C'\fR is
used \fIval\fR will be used as an extended case-insensitive regular expression.
.IP "\fB\-\-repo\fR=\fIval\fR" 4
.IX Item "--repo=val"
.PD 0
.IP "\fB\-\-name\fR=\fIval\fR" 4
.IX Item "--name=val"
.IP "\fB\-\-base\fR=\fIval\fR" 4
.IX Item "--base=val"
.IP "\fB\-\-description\fR=\fIval\fR" 4
.IX Item "--description=val"
.IP "\fB\-\-packager\fR=\fIval\fR" 4
.IX Item "--packager=val"
.IP "\fB\-\-group\fR=\fIval\fR" 4
.IX Item "--group=val"
.IP "\fB\-\-owns\-file\fR=\fIpath\fR" 4
.IX Item "--owns-file=path"
.PD
File paths must match the package database; no attempt is made to resolve the
provided path.  \fBNote:\fR when used with \fB\-\-exact\fR the installation root will
be removed from \fIpath\fR if present, otherwise \fIpath\fR will be used exactly as
provided.  May be used with \fBrealpath\fR or \fBwhich\fR to more easily search for
the owner of installed files:
.Sp
.Vb 1
\& pacsift \-\-local \-\-exact \-\-owns\-file="$(which pacsift)"
.Ve
.IP "\fB\-\-license\fR=\fIval\fR" 4
.IX Item "--license=val"
.PD 0
.IP "\fB\-\-url\fR=\fIval\fR" 4
.IX Item "--url=val"
.PD
.SS "Dependency Fields"
.IX Subsection "Dependency Fields"
Dependencies may be specified in the format \f(CW\*(C`<pkgname>[<cmp><version]\*(C'\fR.
\&\f(CW\*(C`cmp\*(C'\fR may be any of the following: \f(CW\*(C`=\*(C'\fR, \f(CW\*(C`<\*(C'\fR, \f(CW\*(C`<=\*(C'\fR, \f(CW\*(C`>\*(C'\fR,
\&\f(CW\*(C`>=\*(C'\fR.  If \f(CW\*(C`version\*(C'\fR is provided the package dependency must be an exact
match to the search term.  If \f(CW\*(C`version\*(C'\fR is omitted only \f(CW\*(C`pkgname\*(C'\fR will be
compared unless \fB\-\-exact\fR is used.  If \f(CW\*(C`\-\-exact\*(C'\fR is used and \f(CW\*(C`version\*(C'\fR is
not provided only dependencies with no version specified will be matched.
.PP
Dependency fields are not affected by \fB\-\-regex\fR.
.IP "\fB\-\-provides\fR" 4
.IX Item "--provides"
.PD 0
.IP "\fB\-\-conflicts\fR" 4
.IX Item "--conflicts"
.IP "\fB\-\-replaces\fR" 4
.IX Item "--replaces"
.IP "\fB\-\-depends\fR" 4
.IX Item "--depends"
.IP "\fB\-\-optdepends\fR" 4
.IX Item "--optdepends"
.PD
.SS "Size Fields"
.IX Subsection "Size Fields"
Size fields may be prefixed with any of the following comparisons: \f(CW\*(C`=\*(C'\fR, \f(CW\*(C`!=\*(C'\fR,
\&\f(CW\*(C`<\*(C'\fR, \f(CW\*(C`<=\*(C'\fR, \f(CW\*(C`>\*(C'\fR, \f(CW\*(C`>=\*(C'\fR.  If no comparison is provided \f(CW\*(C`=\*(C'\fR
will be used.  The size may be followed by abbreviated unit.  Units are
case-sensitive.
.IP "\fB\-\-size\fR" 4
.IX Item "--size"
.PD 0
.IP "\fB\-\-installed\-size\fR" 4
.IX Item "--installed-size"
.IP "\fB\-\-download\-size\fR" 4
.IX Item "--download-size"
.PD
.SS "Date Fields"
.IX Subsection "Date Fields"
Date fields may be prefixed with any of the following comparisons: \f(CW\*(C`=\*(C'\fR, \f(CW\*(C`!=\*(C'\fR,
\&\f(CW\*(C`<\*(C'\fR, \f(CW\*(C`<=\*(C'\fR, \f(CW\*(C`>\*(C'\fR, \f(CW\*(C`>=\*(C'\fR.  If no comparison is provided \f(CW\*(C`=\*(C'\fR
will be used.  Dates may be provided as seconds since the epoch or any of the
following \f(CW\*(C`strptime\*(C'\fR formats: \f(CW\*(C`%Y\-%m\-%d\*(C'\fR, \f(CW\*(C`%Y\-%m\-%d %H:%M\*(C'\fR,
\&\f(CW\*(C`%Y\-%m\-%d %H:%M:%S\*(C'\fR.
.IP "\fB\-\-install\-date\fR" 4
.IX Item "--install-date"
.PD 0
.IP "\fB\-\-build\-date\fR" 4
.IX Item "--build-date"
.PD
.SS "Other"
.IX Subsection "Other"
.IP "\fB\-\-satisfies\fR=\fIdependency\fR" 4
.IX Item "--satisfies=dependency"
Search for packages that satisfy \fIdependency\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "Find broken packages:" 4
.IX Item "Find broken packages:"
.Vb 1
\& pacsift \-\-packager allan
.Ve
.IP "Find large installed packages:" 4
.IX Item "Find large installed packages:"
.Vb 1
\& pacsift \-\-local \-\-size \*(Aq>1.5GB\*(Aq
.Ve
.ie n .IP "Find packages with either ""pacman"" or ""alpm"" in their description:" 4
.el .IP "Find packages with either \f(CWpacman\fR or \f(CWalpm\fR in their description:" 4
.IX Item "Find packages with either pacman or alpm in their description:"
.Vb 1
\& pacsift \-\-description pacman \-\-description alpm
.Ve
.ie n .IP "Find packages with both ""pacman"" and ""alpm"" in their description:" 4
.el .IP "Find packages with both \f(CWpacman\fR and \f(CWalpm\fR in their description:" 4
.IX Item "Find packages with both pacman and alpm in their description:"
.Vb 1
\& pacsift \-\-description pacman | pacsift \-\-description alpm
.Ve
.IP "Check if a package is installed:" 4
.IX Item "Check if a package is installed:"
.Vb 1
\& pacsift \-\-local \-\-exists \-\-satisfies pacman && echo "pacman is installed"
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
\&\fBpacsift\fR determines whether or not to read packages from \fIstdin\fR based on
a naive check using \fBisatty\fR\|(3).  If \fBpacsift\fR is called in an environment,
such as a shell function or script being used in a pipe, where \fIstdin\fR is not
connected to a terminal but does not contain packages to filter, \fBpacsift\fR
should be called with \fIstdin\fR closed.  For POSIX-compatible shells, this can
be done with \f(CW\*(C`<&\-\*(C'\fR.
