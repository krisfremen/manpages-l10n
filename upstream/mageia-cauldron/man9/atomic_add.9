.\" -*- nroff -*-
.\"
.\" copyright (C) 1997 Stephen Williams <steve@icarus.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.TH atomic_add 9 "$Date:$" "Linux DDI" "Kernel Functions"
.\"
.\" Turn off hyphenation and right justification for the first sections.
.hlm 0
.na
.\" The name should be formatted this way for apropos to work
.SH NAME
atomic_add, atomic_sub, atomic_inc, atomic_dec \- thread/SMP safe arithmetic on atomic data
.\"
.\"
.SH SYNOPSIS
.B #include <asm/atomic.h>
.sp
.BI "void atomic_add(int " i ", volatile atomic_t*" v ")"
.br
.BI "void atomic_sub(int " i ", volatile atomic_t*" v ")"
.br
.BI "void atomic_inc(volatile atomic_t*" v ")"
.br
.BI "void atomic_dec(volatile atomic_t*" v ")"
.br
.BI "int atomic_read(volatile atomic_t*" v ")"
.br
.BI "void atomic_set(volatile atomic_t*" v ", int " i ")"
.br
.BI "int atomic_dec_and_test(volatile atomic_t*" v ")"
.HP
.\"
.\" Turn hyphenation and adjustment back on.
.hlm 1
.ad
.SH DESCRIPTION
These functions manipulate variables of type
.B atomic_t
is SMP and interrupt safe ways. These variables can be used to hold
spin locks or SMP-safe reference counters. These functions guarantee
that the operation that they represent is performed correctly. If
necessary, hardware bus locking is performed to protect the operation.
Usually, the CPU has some sort of atomic instructions that allow these
operations to be performed quickly and safely.
.PP
The
.B atomic_dec_and_test
decrements the atomic variable, and returns true if the result is
zero. This function is particularly useful in implementing spin locks
on SMP systems.
.SH "RETURN VALUE"
The
.B atomic_read
function returns the integer value of the atomic variable.
.PP
The
.B atomic_dec_and_test
returns TRUE if the value becomes zero after the decrement.
.SH AVAILABILITY
Linux 2.0+
.SH "SEE ALSO"
.hlm 0
.na
.BR intro "(9)"
.ad
.hlm 1
.SH AUTHOR
Stephen Williams <steve@icarus.com>
.SH BUGS
The read and set operations generally have no special protections.
