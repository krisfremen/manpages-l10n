.\" (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\" Modified Sat Jul 24 19:00:59 1993 by Rik Faith (faith@cs.unc.edu)
.\" Clarification concerning realloc, iwj10@cus.cam.ac.uk (Ian Jackson), 950701
.\" Translated to German Sat Jun 01 21:14:00 1996 by Patrick Rother <krd@gulu.net>
.\"
.TH MALLOC 3  "1. Juni 1996" "GNU" "Bibliotheksfunktionen"
.SH BEZEICHNUNG
calloc, malloc, free, realloc \- belegen und freigeben von dynamischem Speicher
.PP
Diese Handbuchseite ist veraltet. Im Zweifelsfall ziehen Sie
die englischsprachige Handbuchseite zu Rate, indem Sie
.IP
man -LC 3 malloc
.PP
eingeben.
.SH ÜBERSICHT
.nf
.B #include <stdlib.h>
.sp
.BI "void *calloc(size_t " "nmemb" ", size_t " "size" ");"
.nl
.BI "void *malloc(size_t " "size" ");"
.nl
.BI "void free(void " "*ptr" ");"
.nl
.BI "void *realloc(void " "*ptr" ", size_t "  "size" ");"
.fi
.SH BESCHREIBUNG
.B calloc()
belegt Speicher für ein Array von
.I nmemb
Elementen von jeweils
.I size
Byte und gibt einen Zeiger auf den belegten Speicherbereich zurück.
Der Speicher wird auf Null gesetzt.
.PP
.B malloc()
belegt
.I size
Byte und gibt einen Zeiger auf den belegten Speicherbereich zurück.
Der Speicher wird nicht mit Nullen beschrieben.
.PP
.B free()
gibt den Speicher frei, auf den 
.IR ptr
zeigt, welcher von einem früheren Aufruf von
.BR malloc() ,
.B calloc()
oder
.BR realloc()
zurückgegeben worden sein muss.
Wenn
.I ptr
.BR NULL
ist, wird keine Operation ausgeführt.
.PP
.B realloc()
ändert die Größe des Speicherblocks, auf den 
.I ptr
zeigt, auf
.I size
Byte.
Der Inhalt bleibt unverändert bis zum Minimum von alter und neuer Größe;
neu angeforderter Speicher bleibt uninitialisiert.
Wenn
.I ptr
.BR NULL
ist,
ist der Aufruf äquivalent zu
.BR malloc(size) ;
wenn die Größe Null ist, ist der Aufruf äquivalent zu
.BI "free(" "ptr" ) \fR.
Wenn
.I ptr
nicht
.BR NULL
ist, muss er von einem früheren Aufruf von 
.BR malloc() ,
.BR calloc()
oder
.BR realloc()
zurückgegeben worden sein.
.SH "RÜCKGABEWERTE"
Bei
.BR calloc() " und " malloc()
ist der zurückgegebene Wert ein Zeiger auf den belegten Speicher, welcher
passend ausgerichtet ist für alle Arten von Variablen, oder
.B NULL
falls die Anforderung scheitert.
.PP
.B free()
gibt keinen Wert zurück.
.PP
.B realloc()
gibt einen Pointer auf den neu belegten Speicher zurück, welcher passend
ausgerichtet ist für alle Arten von Variablen und welcher sich von
.IR ptr
unterscheiden kann, oder
.B NULL
falls die Anforderung scheitert oder falls die Größe Null war.  Wenn
.B realloc()
scheitert bleibt der ursprüngliche Block unverändert - er wird nicht 
freigegeben oder verändert.
.SH "KONFORM ZU"
ANSI-C
.SH "SIEHE AUCH"
.BR brk (2).
