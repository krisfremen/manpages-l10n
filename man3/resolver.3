.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 11:01:53 1993 by Rik Faith (faith@cs.unc.edu)
.\" Translated to German Sun Nov 10 1996 by Patrick Rother (krd@gulu.net)
.\"
.TH RESOLVER 3  "10. November 1996" "BSD" "Bibliotheksfunktionen"
.SH BEZEICHNUNG
res_init, res_query, res_search, res_querydomain, res_mkquery, res_send, 
dn_comp, dn_expand \- Resolverroutinen
.SH ÜBERSICHT
.nf
.B #include <netinet/in.h>
.B #include <arpa/nameser.h>
.B #include <resolv.h>
.B extern struct state _res;
.sp
.B int res_init(void);
.sp
.BI "int res_query(const char *" dname ", int " class ", int " type ,
.RS
.BI "unsigned char *" answer ", int " anslen );
.RE
.sp
.BI "int res_search(const char *" dname ", int " class ", int " type ,
.RS
.BI "unsigned char *" answer ", int " anslen );
.RE
.sp
.BI "int res_querydomain(const char *" name ", const char *" domain ,
.RS
.BI "int " class ", int " type ", unsigned char *" answer ", int " anslen );
.RE
.sp
.BI "int res_mkquery(int " op ", const char *" dname ", int " class ", int " type ,
.RS
.BI "char *" data ", int " datalen ", struct rrec *" newrr ", char *" buf , 
.BI "int " buflen );
.RE
.sp
.BI "int res_send(const char *" msg ", int " msglen ", char *" answer , 
.RS
.BI "int " anslen );
.RE
.sp
.BI "int dn_comp(unsigned char *" exp_dn ", unsigned char *" comp_dn ,
.RS
.BI "int " length ", unsigned char **" dnptrs ", unsigned char *" exp_dn ,
.BI "unsigned char **" lastdnptr );
.RE
.sp
.BI "int dn_expand(unsigned char *" msg ", unsigned char *" eomorig ,
.RS
.BI "unsigned char *" comp_dn ", unsigned char *" exp_dn ", int " length );
.RE
.fi
.SH BESCHREIBUNG
Diese Funktionen machen Anfragen an Internet Domain Nameserver und
interpretieren die Rückmeldungen.
.PP
Die Funktion
.B res_init()
liest die Konfigurationsdateien (siehe
.BR resolv+ (8)),
um den vorgegebenen Domainnamen, ide Suchreihenfolge und 
Nameserveradresse(n) zu erhalten.  Wenn kein Server angegeben ist, wird
der lokale Host verwendet.  Wenn keine Domain angegeben ist, wird diejenige
benutzt, die mit dem lokalen Host in Verbindung gebracht wird.
Dies kann mit der Umgebungsvariable LOCALDOMAIN überschrieben werden .
.B res_init()
wird normalerweise durch den ersten Aufruf von einer der anderen
Funktionen ausgeführt.
.PP
Die Funktion
.B res_query()
fragt den Nameserver nach dem vollständigen Host- und Domainnamen von
.I name
vom spezifizierten
.IR type " und " class . 
Die Antwort verbleibt im Puffer
.I answer
der Länge
.IR anslen ,
der von Aufrufer angegeben ist.
.PP
Die Funktion
.B res_search()
macht eine Anfrage und wartet auf die Antwort wie
.BR res_query() ,
implementiert jedoch zusätzlich die Vorgabe- und Such-Regeln, die durch
RES_DEFNAMES und RES_DNSRCH kontrolliert werden (siehe Beschreibung von
.IR _res "-Optionen unten)."
.PP
Die Funktion
.B res_querydomain()
macht eine Anfrage über
.B res_query()
auf die Verkettung von
.IR name " und " domain .
.PP
Die folgenden Funktionen sind Routinen tieferer Ebene, die von
.B res_query()
benutzt werden.
.PP
Die Funktion
.B res_mkquery()
konstruiert eine Anfrage-Nachricht für den Domainnamen
.IR dname " in " buf
der Länge
.IR buflen . 
Der Anfragetyp
.I op
ist gewöhnlich QUERY, kann aber jeder der in
.I <arpa/nameser.h>
definierten Typen sein. 
.I newrr
ist momentan unbenutzt.
.PP
Die Funktion
.B res_send()
sendet eine vorformatierte Anfrage, die in 
.I msg
gegeben ist und die Länge
.I msglen
hat, und gibt die Antwort in
.I answer
zurück, die die Länge
.I anslen
hat.  Sie ruft 
.B res_init()
auf, wenn es noch nicht aufgerufen wurde.
.PP
Die Funktion
.B dn_comp()
komprimiert den Domainnamen
.I exp_dn
und speichert ihn in dem Puffer
.I comp_dn
der Länge
.IR length .
Die Komprimierung benutzt ein Feld von Zeigern
.I dnptrs
auf bereits komprimierte Namen in der aktuellen Nachricht.  Der
erste Zeiger zeigt auf den Anfang der Nachricht und die Liste endet
mit NULL.  Die Grenze des Feldes ist angegeben durch
.IR lastdnptr . 
Wenn
.I dnptr
NULL ist, dann sind Domainnamen nicht komprimiert.  Wenn
.I lastdnptr
NULL ist, dann ist die Liste der Namen nicht aktualisiert.
.PP
Die Funktion
.B dn_expand()
expandiert den komprimierten Domainnamen
.I comp_dn
zu einem vollen Domainnamen, welcher in dem Puffer
.I exp_dn
der Größe
.I length
plaziert ist.  Der komprimierte Name ist enthalten in einer
Anfrage- oder Antwortnachricht, und
.I msg
zeigt auf den Anfang der Nachicht.
.PP
Die Resolverroutinen benutzen globale Konfigurations- und Statusinformationen,
die in der Struktur
.I _res
enthalten sind, welche in
.I <resolv.h>
definiert ist.  Das einzige Feld, das normalerweise vom Benutzer manipuliert
wird, ist
.IR _res.options . 
Dieses Feld kann bitweise oder-Verknüpfungen der folgenden Optionen enthaltenn:
.sp
.TP
.B RES_INIT
Wahr wenn
.B res_init()
aufgerufen wurde.
.TP
.B RES_DEBUG
Drucke Debugnachrichten.
.TP
.B RES_AAONLY
Akzeptiere nur authoritative Antworten. 
.B res_send()
fährt fort bis es eine authoritative Antwort findet, oder gibt einen
Fehler zurück.  [Noch nicht implementiert.]
.TP
.B RES_USEVC
Benutze TCP-Verbindungen für Anfragen, nicht UDP-Datagramme.
.TP
.B RES_PRIMARY
Frage nur primäre Domainnameserver.
.TP
.B RES_IGNTC
Ignoriere Fehler bei verstümmelten Antworten.  Versuche es nicht
erneut mit TCP.  [Noch nicht implementiert.]
.TP
.B RES_RECURSE
Setze das Rekursionswunsch-Bit in Anfragen.  Rekursion wird von dem
Domainnameserver ausgeführt, nicht von
.BR res_send() .
[Eingeschaltet durch Vorgabe.]
.TP
.B RES_DEFNAMES
Wenn gesetzt, fügt
.B res_search()
den Vorgabedomainnamen an Einzelnamen an, d.h. an solche, die keinen
Punkt enthalten.  [Eingeschaltet durch Vorgabe.]
.TP
.B RES_STAYOPEN
Benutzt mit
.B RES_USEVC
um die TCP-Verbindung zwischen Anfragen geöffnet zu halten.
.TP
.B RES_DNSRCH
Wenn gesetzt, sucht
.B res_search()
nach Hostnamen in der aktuellen und in übergeordneten Domains.  Diese
Option wird von 
.BR gethostbyname (3)
benutzt.  [Eingeschaltet durch Vorgabe.]
.SH "RÜCKGABEWERT"
Die Funktion
.B res_init()
gibt 0 zurück be Erfolg, oder \-1 wenn ein Fehler auftritt.
.PP
Die Funktionen
.BR res_query() ", " res_search() ", " res_querydomain() ,
.BR res_mkquery() " und " res_send()
geben die Länge der Antwort zurück, oder \-1 wenn ein Fehler auftritt.
.PP
Die Funktionen
.BR dn_comp() " und " dn_expand()
geben die Länge des komprimierten Namens zurück, oder \-1 wenn ein
Fehler auftritt.
.SH DATEIEN
.TP
.I /etc/resolv.conf
Resolverkonfigurationsdatei
.TP
.I /etc/host.conf
Resolverkonfigurationsdatei
.fi
.SH "KONFORM ZU"
BSD 4.3
.SH "SIEHE AUCH"
.BR gethostbyname (3),
.BR hostname (7),
.BR named (8),
.BR resolv+ (8).

