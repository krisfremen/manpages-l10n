.\" Copyright (c) 1990, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)stdio.3	6.5 (Berkeley) 5/6/91
.\"
.\" Converted for Linux, Mon Nov 29 16:07:22 1993, faith@cs.unc.edu
.\" Translated to German Mon Aug 01 18:00:00 1996 by Patrick Rother <krd@gulu.net>
.\"
.TH STDIO 3  "1. August 1996" "BSD MANPAGE" "Linux Programmierhandbuch"
.SH BEZEICHNUNG
stdio \- Standard-Ein-/Ausgabe-Bibliotheksfunktionen
.SH ÜBERSICHT
.B #include <stdio.h>
.sp
.B FILE *stdin;
.br
.B FILE *stdout;
.br
.B FILE *stderr;
.SH BESCHREIBUNG
Die Standard-E/A-Bibliothek stellt eine einfache und effiziente gepufferte
Stream-E/A-Schnittstelle zur Verfügung. Ein- und Ausgabe wird in logische
Datenstreams geleitet und physikalische E/A-Charakteristiken werden
verborgen. Die Funktionen und Makros sind unten aufgelistet; weitere
Informationen sind verfügbar durch die individuellen Handbuchseiten.
.PP
Ein Stream wird mit einer externen Datei (die ein
physikalisches Gerät sein darf) verbunden, indem eine Datei
.I geöffnet
wird, was das Erzeugen einer neuen Datei nach sich ziehen kann.
Erzeugen einer bestehenden Datei bewirkt, dass die früheren Inhalte gelöscht
werden.  Wenn die Datei Positionierungsanweisungen unterstützt (wie eine
Festplattendatei, im Gegensatz zu einem Terminal), dann wird ein
.I Dateipositionszeiger
(file position indicator) mit dem Stream in Verbindung gebracht und auf
den Anfang der Datei positioniert (Byte Null), solange die Datei nicht im 
Anhängen-Modus geöffnet wurde. Wenn Anhängen-Modus gewählt wird, wird 
der Dateipositionszeiger auf das Ende der Datei gesetzt.  Der Positionszeiger
wird durch aufeinanderfolgende Lese-, Schreib- und Positionierungszugriffe
verwaltet. Jede Eingabe erscheint, als wenn die Zeichen durch
aufeinanderfolgende Aufrufe der Funktion
.BR fgetc (3)
gelesen worden wären; jede Ausgabe findet statt als wenn alle Zeichen durch
aufeinanderfolgende Aufrufe der Funktion
.BR fputc (3)
gelesen worden wären.
.PP
Eine Datei wird von einem Stream gelöst durch
.I Schließen
der Datei. Ausgabestreams werden geflusht (noch nicht geschriebene 
Pufferinhalte werden übertragen) bevor der Stream von der Datei getrennt
wird.  Der Wert eines Zeigers auf ein Objekt
.B FILE
ist ungültig, nachdem die Datei geschlossen wurde.
.PP
Eine Datei kann nachfolgend wieder geöffnet, durch das selbe
oder ein anderes Programm, und ihre Inhalte zurückgelesen oder verändert
(wenn sie auf den Anfang repositioniert werden kann) werden.  Wenn die
Hauptfunktion zu ihren ursprünglichen Aufrufer zurückkehrt, oder die Funktion
.BR exit (3)
aufgerufen wird, werden alle offenen Dateien vor Programmende geschlossen
(nachdem alle Ausgabestreams geflusht wurden).  Andere Methoden zur Beendigung
von Programmen wie
.BR abort (3)
kümmern sich nicht um das korrekte Schließen von Dateien.
.PP
Bei Programmstart sind drei Textstreams vordefiniert und brauchen nicht
explizit geöffnet zu werden \(em
.I Standardeingabe
(zum Lesen konventioneller Eingabe), \(em
.I Standardausgabe
(zum Schreiben konventioneller Ausgabe) und
.I Standardfehlerausgabe
(zum Schreiben von Diagnosedaten).  Diese Streams werden abgekürzt durch
.IR stdin , stdout
und
.IR stderr .
Der Stream der Standardfehlerausgabe ist nicht voll gepuffert wenn er
geöffnet ist; die Streams der Standardein- und -ausgabe sind voll gepuffert
genau dann, wenn die Streams nicht auf ein interaktives Gerät verweisen.
.PP
Ausgabestreams, die auf Terminalgeräte verweisen, sind immer zeilengepuffert
per Vorgabe; noch ausstehende Ausgabe zu solchen Streams wird automatisch
geschrieben wann immer ein Eingabestream, der sich auf ein Terminalgerät 
bezieht, gelesen wird.  In Fällen, wo eine große Rechenarbeit durchgeführt
wird nach Ausgabe eines Teils einer Zeile auf ein Ausgabeterminal, ist es
nötig,
.BR fflush (3)
aufzurufen um die Standardausgabe zu flushen bevor die Rechnung durchgeführt
wird so dass die Ausgabe auch erscheint.
.PP
Die Bibliothek
.B stdio
ist Teil der Bibliothek
.B libc
und Routinen werden automatisch geladen wenn sie von den Compilern
.BR cc (1)
und
.BR pc (1)
benötigt.
Die Abschnitte
.B ÜBERSICHT
der folgenden Handbuchseiten zeigen, welche Include-Dateien zu benutzen sind,
wie die Compilerdeklaration für die Funktion aussieht und welche externen
Variablen interessant sind.
.PP
Die folgenden sind als Makros definiert; diese Namen dürfen nicht
wiederbenutzt werden ohne sie vorher mit
.BR #undef
zu entfernen:
.BR BUFSIZ ,
.BR EOF ,
.BR FILENAME_MAX ,
.BR FOPEN_MAX ,
.BR L_cuserid ,
.BR L_ctermid ,
.BR L_tmpnam,
.BR NULL ,
.BR SEEK_END ,
.BR SEEK_SET ,
.BR SEE_CUR ,
.BR TMP_MAX ,
.BR clearerr ,
.BR feof ,
.BR ferror ,
.BR fileno ,
.BR fropen ,
.BR fwopen ,
.BR getc ,
.BR getchar ,
.BR putc ,
.BR putchar ,
.BR stderr ,
.BR stdin ,
.BR stdout .
Funktionsversionen der Makrofunktionen
.BR feof ,
.BR ferror ,
.BR clearerr ,
.BR fileno ,
.BR getc ,
.BR getchar ,
.B putc
und
.B putchar
existieren und werden benutzt wenn die Makrodefinitionen explizit entfernt
werden.
.SH "SIEHE AUCH"
.BR open (2),
.BR close (2),
.BR read (2),
.BR write (2).
.SH BUGS
Die gepufferten Standardfunktionen arbeiten nicht gut mit bestimmten anderen
Bibliotheks- und Systemfunktionen zusammen, insbesondere
.B vfork
und
.BR abort .
Dies muss nicht der Fall sein unter Linux.
.SH STANDARDS
Die Bibliotheksfunktion
.B stdio
ist konform zu ANSI C3.159-1989 (``ANSI C'').
.SH "LISTE VON FUNKTIONEN"
.TP
.B Funktion
.B Beschreibung
.TP
clearerr
Teste Stream-Status und setze ihn zurück.
.TP
fclose
Schließe einen Stream.
.TP
fdopen
Funktionen zum Öffnen eines Streams.
.TP
feof
Teste Streamstatus und setze ihn zurück.
.TP
ferror
Teste Streamstatus und setze ihn zurück.
.TP
fflush
Schreibe ausstehende Daten des Streams.
.TP
fgetc
Hole das nächste Zeichen oder Wort vom Eingabestream.
.TP
fgetline
Hole eine Zeile vom Stream.
.TP
fgetpos
Re-positioniere den Positionszeiger des Streams.
.TP
fgets
Hole eine Zeile vom Stream.
.TP
fileno
Teste den Stream-Status und setze ihn zurück.
.TP
fopen
Funktionen zum Öffnen eines Streams.
.TP
fprintf
Gib Text formatiert auf dem Stream aus.
.TP
fpurge
Flushe einen Stream.
.TP
fputc
Gib ein Zeichen oder Wort auf dem Stream aus.
.TP
fputs
Gib eine Zeile auf dem Stream aus.
.TP
fread
Binäres Lesen von einem Stream.
.TP
freopen
Funktionen zum Öffnen eines Streams.
.TP
fropen
Öffne einen Stream.
.TP
fscanf
Formatiertes Einlesen.
.TP
fseek
Repositioniere einen Stream.
.TP
fsetpos
Repositioniere einen Stream.
.TP
ftell
Repositioniere einen Stream.
.TP
fwrite
Binäres Schreiben auf einem Stream.
.TP
getc
Hole das nächsten Zeichen oder Wort vom Eingabestream.
.TP
getchar
Hole das nächsten Zeichen oder Wort vom Eingabestream.
.TP
gets
Hole eine Zeile vom Eingabestream.
.TP
getw
Hole das nächsten Zeichen oder Wort vom Eingabestream.
.TP
mktemp
Erzeuge einen eindeutigen temporären Dateinamen.
.TP
perror
Systemfehlermeldungen.
.TP
printf
Formatierte Ausgabeumwandlung.
.TP
putc
Gib ein Zeichen oder Wort auf dem Stream aus.
.TP
putchar
Gib ein Zeichen oder Wort auf dem Stream aus.
.TP
puts
Gib eine Zeile auf dem Stream aus.
.TP
putw
Gib ein Zeichen oder Wort auf dem Stream aus.
.TP
remove
Lösche einen Verzeichniseintrag.
.TP
rewind
Repositioniere einen Stream.
.TP
scanf
Formatiertes Einlesen.
.TP
setbuf
Stream-Puffer Operationen.
.TP
setbuffer
Stream-Puffer Operationen.
.TP
setlinebuf
Stream-Puffer Operationen.
.TP
setvbuf
Stream-Puffer Operationen.
.TP
sprintf
Formatierte Ausgabeumwandlung.
.TP
sscanf
Formatiertes Einlesen.
.TP
strerror
Systemfehlermeldungen.
.TP
sys_errlist
Systemfehlermeldungen.
.TP
sys_nerr
Systemfehlermeldungen.
.TP
tempnam
Routinen für temporäre Dateien.
.TP
tmpfile
Routinen für temporäre Dateien.
.TP
tmpnam
Routinen für temporäre Dateien.
.TP
ungetc
Lege ein Zeichen zurück in den Eingabestream.
.TP
vfprintf
Formatierte Ausgabeumwandlung.
.TP
vfscanf
Formatiertes Einlesen.
.TP
vprintf
Formatierte Ausgabeumwandlung.
.TP
vscanf
Formatiertes Einlesen.
.TP
vsprintf
Formatierte Ausgabeumwandlung.
.TP
vsscanf
Formatiertes Einlesen.
