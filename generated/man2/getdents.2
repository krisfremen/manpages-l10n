.\" -*- coding: UTF-8 -*-
.\" Copyright (C) 1995 Andries Brouwer (aeb@cwi.nl)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Written 11 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 22 July 1995 by Michael Chastain <mec@duracef.shout.net>:
.\"   Derived from 'readdir.2'.
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH GETDENTS 2 "21. November 2010" Linux Linux\-Programmierhandbuch
.SH BEZEICHNUNG
getdents \- Verzeichniseinträge ermitteln
.SH ÜBERSICHT
.nf
\fBint getdents(unsigned int \fP\fIfd\fP\fB, struct linux_dirent *\fP\fIdirp\fP\fB,\fP
\fB             unsigned int \fP\fIcount\fP\fB);\fP
.fi
.SH BESCHREIBUNG
Dies ist nicht die Funktion, an der Sie interessiert sind. Lesen Sie
\fBreaddir\fP(3) für die POSIX\-konforme C\-Bibliotheksschnittstelle. Diese Seite
dokumentiert die nackte Kernel\-Systemaufruf\-Schnittstelle.
.PP
Der Systemaufruf \fBgetdents\fP() liest mehrere \fIlinux_dirent\fP\-Strukturen aus
dem Verzeichnis, auf das der offene Dateideskriptor \fIfd\fP verweist, in den
Puffer, auf den \fIdirp\fP zeigt. Das Argument \fIcount\fP spezifiziert die Größe
dieses Puffers.
.PP
Die Struktur \fIlinux_dirent\fP ist wie folgt deklariert:
.PP
.in +4n
.nf
struct linux_dirent {
    unsigned long  d_ino;     /* Inode number */
    unsigned long  d_off;     /* Offset to next \fIlinux_dirent\fP */
    unsigned short d_reclen;  /* Length of this \fIlinux_dirent\fP */
    char           d_name[];  /* Filename (null\-terminated) */
                        /* length is actually (d_reclen \- 2 \-
                           offsetof(struct linux_dirent, d_name) */
    /*
    char           pad;       // Zero padding byte
    char           d_type;    // File type (only since Linux 2.6.4;
                              // offset is (d_reclen \- 1))
    */

}
.fi
.in
.PP
\fId_ino\fP is an inode number.  \fId_off\fP is the distance from the start of the
directory to the start of the next \fIlinux_dirent\fP.  \fId_reclen\fP is the size
of this entire \fIlinux_dirent\fP.  \fId_name\fP is a null\-terminated filename.

\fId_type\fP ist ein Byte am Ende der Struktur, das den Dateityp anzeigt. Es
enthält einen der folgenden Werte (definiert in \fI<dirent.h>\fP):
.TP  12
\fBDT_BLK\fP
Dies ist ein Blockgerät
.TP 
\fBDT_CHR\fP
Dies ist ein Zeichengerät
.TP 
\fBDT_DIR\fP
Dies ist ein Verzeichnis
.TP 
\fBDT_FIFO\fP
This is a named pipe (FIFO).
.TP 
\fBDT_LNK\fP
Dies ist ein symbolischer Link
.TP 
\fBDT_REG\fP
Dies ist eine reguläre Datei
.TP 
\fBDT_SOCK\fP
This is a UNIX domain socket.
.TP 
\fBDT_UNKNOWN\fP
Der Dateityp ist unbekannt
.PP
The \fId_type\fP field is implemented since Linux 2.6.4.  It occupies a space
that was previously a zero\-filled padding byte in the \fIlinux_dirent\fP
structure.  Thus, on kernels before 2.6.3, attempting to access this field
always provides the value 0 (\fBDT_UNKNOWN\fP).
.PP
.\" kernel 2.6.27
.\" The same sentence is in readdir.2
Derzeit haben nur einige Dateisysteme (darunter: Btrfs, Ext2, Ext3 und Ext4)
volle Unterstützung für die Rückgabe des Dateityps in \fId_type\fP. Alle
Anwendungen müssen korrekt mit der Rückgabe von \fBDT_UNKNOWN\fP umgehen.
.SH RÜCKGABEWERT
Bei Erfolg wird die Anzahl der gelesenen Bytes zurückgeliefert. Am
Verzeichnisende wird 0 zurückgeliefert. Im Fehlerfall wird \-1
zurückgeliefert und \fIerrno\fP entsprechend gesetzt.
.SH FEHLER
.TP 
\fBEBADF\fP
Ungültiger Dateideskriptor \fIfd\fP
.TP 
\fBEFAULT\fP
Argument points outside the calling process's address space.
.TP 
\fBEINVAL\fP
Ergebnispuffer ist zu klein
.TP 
\fBENOENT\fP
Kein solches Verzeichnis.
.TP 
\fBENOTDIR\fP
Der Deskriptor bezieht sich nicht auf ein Verzeichnis
.SH "KONFORM ZU"
.\" SVr4 documents additional ENOLINK, EIO error conditions.
SVr4.
.SH ANMERKUNGEN
Glibc does not provide a wrapper for this system call; call it using
\fBsyscall\fP(2).  You will need to define the \fIlinux_dirent\fP structure
yourself.

Dieser Aufruf ersetzt \fBreaddir\fP(2).

The original Linux \fBgetdents\fP()  system call did not handle large file
systems and large file offsets.  Consequently, Linux 2.4 added
\fBgetdents64\fP(), with wider types for the \fId_ino\fP and \fId_off\fP fields
employed in the \fIlinux_dirent\fP structure.
.SH BEISPIEL
.\" FIXME: This program uses the older getdents(0 system call
.\" and the structure with smaller field widths.
Das nachfolgende Programm zeigt die Verwendung von \fBgetdents\fP(). Die
folgende Ausgabe zeigt ein Beispiel davon, was bei der Ausführung des
Programms auf einem Ext2\-Verzeichnis gesehen werden kann.

.in +4n
.nf
$\fB ./a.out /testfs/\fP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- nread=120 \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
i\-node#  file type  d_reclen  d_off   d_name
       2  directory    16         12  .
       2  directory    16         24  ..
      11  directory    24         44  lost+found
      12  regular      16         56  a
  228929  directory    16         68  sub
   16353  directory    16         80  sub2
  130817  directory    16       4096  sub3
.fi
.in
.SS Programmquelle
\&
.nf
#define _GNU_SOURCE
#include <dirent.h>     /* Definiert DT_*\-Konstanten */
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/syscall.h>

#define handle_error(msg) \e
        do { perror(msg); exit(EXIT_FAILURE); } while (0)

struct linux_dirent {
    long           d_ino;
    off_t          d_off;
    unsigned short d_reclen;
    char           d_name[];
};

#define BUF_SIZE 1024

int
main(int argc, char *argv[])
{
    int fd, nread;
    char buf[BUF_SIZE];
    struct linux_dirent *d;
    int bpos;
    char d_type;

    fd = open(argc > 1 ? argv[1] : ".", O_RDONLY | O_DIRECTORY);
    if (fd == \-1)
        handle_error("open");

    for ( ; ; ) {
        nread = syscall(SYS_getdents, fd, buf, BUF_SIZE);
        if (nread == \-1)
            handle_error("getdents");

        if (nread == 0)
            break;

        printf("\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- nread=%d \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\en", nread);
        printf("i\-node#  file type  d_reclen  d_off   d_name\en");
        for (bpos = 0; bpos < nread;) {
            d = (struct linux_dirent *) (buf + bpos);
            printf("%8ld  ", d\->d_ino);
            d_type = *(buf + bpos + d\->d_reclen \- 1);
            printf("%\-10s ", (d_type == DT_REG) ?  "regular" :
                             (d_type == DT_DIR) ?  "directory" :
                             (d_type == DT_FIFO) ? "FIFO" :
                             (d_type == DT_SOCK) ? "socket" :
                             (d_type == DT_LNK) ?  "symlink" :
                             (d_type == DT_BLK) ?  "block dev" :
                             (d_type == DT_CHR) ?  "char dev" : "???");
            printf("%4d %10lld  %s\en", d\->d_reclen,
                    (long long) d\->d_off, (char *) d\->d_name);
            bpos += d\->d_reclen;
        }
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH "SIEHE AUCH"
\fBreaddir\fP(2), \fBreaddir\fP(3)
.SH KOLOPHON
Diese Seite ist Teil der Veröffentlichung 3.40 des Projekts
Linux\-\fIman\-pages\fP. Eine Beschreibung des Projekts und Informationen, wie
Fehler gemeldet werden können, finden sich unter
http://www.kernel.org/doc/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Helge Kreutzmann <debian@helgefjell.de>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
