.\" -*- coding: UTF-8 -*-
.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" and Copyright (c) 1998 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (c) 2007, 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-07-09 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-05-18 by Michael Haardt <michael@cantor.informatik.rwth-aachen.de>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2007-07-08, mtk, added an example program; updated SYNOPSIS
.\" 2008-05-08, mtk, Describe rules governing ownership of new files
.\"     (bsdgroups versus sysvgroups, and the effect of the parent
.\"     directory's set-group-ID permission bit).
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH CHOWN 2 "22. November 2010" Linux Linux\-Programmierhandbuch
.SH BEZEICHNUNG
chown, fchown, lchown \- Besitzverhältnisse einer Datei ändern
.SH ÜBERSICHT
\fB#include <unistd.h>\fP
.sp
\fBint chown(const char *\fP\fIpath\fP\fB, uid_t \fP\fIowner\fP\fB, gid_t \fP\fIgroup\fP\fB);\fP
.br
\fBint fchown(int \fP\fIfd\fP\fB, uid_t \fP\fIowner\fP\fB, gid_t \fP\fIgroup\fP\fB);\fP
.br
\fBint lchown(const char *\fP\fIpath\fP\fB, uid_t \fP\fIowner\fP\fB, gid_t \fP\fIgroup\fP\fB);\fP
.sp
.in -4n
Mit Glibc erforderliche Makros (siehe \fBfeature_test_macros\fP(7)):
.in
.sp
\fBfchown\fP(), \fBlchown\fP():
.PD 0
.ad l
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.br
|| /* Seit Glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
.RE
.ad
.PD
.SH BESCHREIBUNG
Diese Systemaufrufe ändern den Eigentümer und die Gruppe einer Datei. Sie
unterscheiden sich nur in der Angabe der Datei:
.IP * 2
\fBchown\fP()  changes the ownership of the file specified by \fIpath\fP, which is
dereferenced if it is a symbolic link.
.IP *
\fBfchown\fP() ändert die Eigentümerschaft der Datei, die über den offenen
Dateideskriptor \fIfd\fP festgelegt wird.
.IP *
\fBlchown\fP()  is like \fBchown\fP(), but does not dereference symbolic links.
.PP
Only a privileged process (Linux: one with the \fBCAP_CHOWN\fP capability) may
change the owner of a file.  The owner of a file may change the group of the
file to any group of which that owner is a member.  A privileged process
(Linux: with \fBCAP_CHOWN\fP)  may change the group arbitrarily.

Falls \fIowner\fP oder \fIgroup\fP als \-1 übergeben werden, dann wird diese ID
nicht geändert.

.\" In Linux 2.0 kernels, superuser was like everyone else
.\" In 2.2, up to 2.2.12, these bits were not cleared for superuser.
.\" Since 2.2.13, superuser is once more like everyone else.
When the owner or group of an executable file are changed by an unprivileged
user the \fBS_ISUID\fP and \fBS_ISGID\fP mode bits are cleared.  POSIX does not
specify whether this also should happen when root does the \fBchown\fP(); the
Linux behavior depends on the kernel version.  In case of a
non\-group\-executable file (i.e., one for which the \fBS_IXGRP\fP bit is not
set) the \fBS_ISGID\fP bit indicates mandatory locking, and is not cleared by a
\fBchown\fP().
.SH RÜCKGABEWERT
Bei Erfolg wird Null zurückgegeben. Bei einem Fehler wird \-1 zurückgegeben
und \fIerrno\fP entsprechend gesetzt.
.SH FEHLER
Die hüufigsten Fehler für \fBchown\fP sind unten aufgeführt.  Je nach
Dateisystem können andere Fehler zurückgegeben werden.
.TP 
\fBEACCES\fP
Eine Komponente des Pfad\-Präfix darf nicht durchsucht werden. (Siehe auch
\fBpath_resolution\fP(7).)
.TP 
\fBEFAULT\fP
\fIpath\fP zeigt aus Ihrem adressierbaren Adressraum heraus.
.TP 
\fBELOOP\fP
Bei der Auflösung von \fIpath\fP wurden zu viele symbolische Verknüpfungen
gefunden.
.TP 
\fBENAMETOOLONG\fP
\fIpath\fP ist zu lang.
.TP 
\fBENOENT\fP
Die Datei existiert nicht.
.TP 
\fBENOMEM\fP
Zu wenig Kernelspeicher verfügbar.
.TP 
\fBENOTDIR\fP
Eine Komponente des Pfad\-Präfixes ist kein Verzeichnis.
.TP 
\fBEPERM\fP
Der aufrufende Prozess hatte nicht die benötigten Rechte (siehe oben), um
den Eigentümer und/oder die Gruppe zu ändern.
.TP 
\fBEROFS\fP
Die angegebene Datei befindet sich auf einem nur lesbaren (read\-only)
Dateisystem.
.PP
Die allgemeinen Fehler von \fBfchown\fP() sind im Folgenden aufgeführt:
.TP 
\fBEBADF\fP
Der Dateideskriptor ist ungültig.
.TP 
\fBEIO\fP
Bei der Bearbeitung des Inodes trat ein system\-/hardwarenaher E/A\-Fehler
auf.
.TP 
\fBENOENT\fP
Siehe oben.
.TP 
\fBEPERM\fP
Siehe oben.
.TP 
\fBEROFS\fP
Siehe oben.
.SH "KONFORM ZU"
4.4BSD, SVr4, POSIX.1\-2001.

.\" chown():
.\" SVr4 documents EINVAL, EINTR, ENOLINK and EMULTIHOP returns, but no
.\" ENOMEM.  POSIX.1 does not document ENOMEM or ELOOP error conditions.
.\" fchown():
.\" SVr4 documents additional EINVAL, EIO, EINTR, and ENOLINK
.\" error conditions.
Die Version aus 4.4BSD kann nur vom Superuser verwandt werden (d.h., normale
Benutzer können keine Dateien weggeben).
.SH ANMERKUNGEN
The original Linux \fBchown\fP(), \fBfchown\fP(), and \fBlchown\fP()  system calls
supported only 16\-bit user and group IDs.  Subsequently, Linux 2.4 added
\fBchown32\fP(), \fBfchown32\fP(), and \fBlchown32\fP(), supporting 32\-bit IDs.  The
glibc \fBchown\fP(), \fBfchown\fP(), and \fBlchown\fP()  wrapper functions
transparently deal with the variations across kernel versions.

When a new file is created (by, for example, \fBopen\fP(2)  or \fBmkdir\fP(2)),
its owner is made the same as the file system user ID of the creating
process.  The group of the file depends on a range of factors, including the
type of file system, the options used to mount the file system, and whether
or not the set\-group\-ID permission bit is enabled on the parent directory.
If the file system supports the \fI\-o\ grpid\fP (or, synonymously \fI\-o\ bsdgroups\fP)  and \fI\-o\ nogrpid\fP (or, synonymously \fI\-o\ sysvgroups\fP)
\fBmount\fP(8)  options, then the rules are as follows:
.IP * 2
If the file system is mounted with \fI\-o\ grpid\fP, then the group of a new
file is made the same as that of the parent directory.
.IP *
If the file system is mounted with \fI\-o\ nogrpid\fP and the set\-group\-ID bit
is disabled on the parent directory, then the group of a new file is made
the same as the process's file system GID.
.IP *
If the file system is mounted with \fI\-o\ nogrpid\fP and the set\-group\-ID bit
is enabled on the parent directory, then the group of a new file is made the
same as that of the parent directory.
.PP
As at Linux 2.6.25, the \fI\-o\ grpid\fP and \fI\-o\ nogrpid\fP mount options are
supported by ext2, ext3, ext4, and XFS.  File systems that don't support
these mount options follow the \fI\-o\ nogrpid\fP rules.
.PP
The \fBchown\fP()  semantics are deliberately violated on NFS file systems
which have UID mapping enabled.  Additionally, the semantics of all system
calls which access the file contents are violated, because \fBchown\fP()  may
cause immediate access revocation on already open files.  Client side
caching may lead to a delay between the time where ownership have been
changed to allow access for a user and the time where the file can actually
be accessed by the user on other clients.

In versions of Linux prior to 2.1.81 (and distinct from 2.1.46), \fBchown\fP()
did not follow symbolic links.  Since Linux 2.1.81, \fBchown\fP()  does follow
symbolic links, and there is a new system call \fBlchown\fP()  that does not
follow symbolic links.  Since Linux 2.1.86, this new call (that has the same
semantics as the old \fBchown\fP())  has got the same syscall number, and
\fBchown\fP()  got the newly introduced number.
.SH BEISPIEL
.PP
The following program changes the ownership of the file named in its second
command\-line argument to the value specified in its first command\-line
argument.  The new owner can be specified either as a numeric user ID, or as
a username (which is converted to a user ID by using \fBgetpwnam\fP(3)  to
perform a lookup in the system password file).
.nf

#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    uid_t uid;
    struct passwd *pwd;
    char *endptr;

    if (argc != 3 || argv[1][0] == \(aq\e0\(aq) {
        fprintf(stderr, "%s <owner> <file>\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    uid = strtol(argv[1], &endptr, 10);  /* Eine nummerische Zeichenkette erlauben */

    if (*endptr != \(aq\e0\(aq) {         /* Was not pure numeric string */
        pwd = getpwnam(argv[1]);   /* Try getting UID for username */
        if (pwd == NULL) {
            perror("getpwnam");
            exit(EXIT_FAILURE);
        }

        uid = pwd\->pw_uid;
    }

    if (chown(argv[2], uid, \-1) == \-1) {
        perror("chown");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH "SIEHE AUCH"
\fBchmod\fP(2), \fBfchownat\fP(2), \fBflock\fP(2), \fBpath_resolution\fP(7),
\fBsymlink\fP(7)
.SH KOLOPHON
Diese Seite ist Teil der Veröffentlichung 3.40 des Projekts
Linux\-\fIman\-pages\fP. Eine Beschreibung des Projekts und Informationen, wie
Fehler gemeldet werden können, finden sich unter
http://www.kernel.org/doc/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Florian Jenn <jennf@tu-cottbus.de>
und
Helge Kreutzmann <debian@helgefjell.de>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
