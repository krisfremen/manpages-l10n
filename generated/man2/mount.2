.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 1993 Rickard E. Faith <faith@cs.unc.edu>
.\" and Copyright (C) 1994 Andries E. Brouwer <aeb@cwi.nl>
.\" and Copyright (C) 2002, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1996-11-04 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-10-13 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on historical behavior of MS_NOSUID
.\" Modified 2002-05-16 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Extensive changes and additions
.\" Modified 2002-05-27 by aeb
.\" Modified 2002-06-11 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Enhanced descriptions of MS_MOVE, MS_BIND, and MS_REMOUNT
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2005-05-18, mtk, Added MNT_EXPIRE, plus a few other tidy-ups.
.\" 2008-10-06, mtk: move umount*() material into separate umount.2 page.
.\" 2008-10-06, mtk: Add discussion of namespaces.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH MOUNT 2 "10. September 2010" Linux Linux\-Programmierhandbuch
.SH BEZEICHNUNG
mount \- Dateisystem einhängen
.SH ÜBERSICHT
.nf
\fB#include <sys/mount.h>\fP
.sp
\fBint mount(const char *\fP\fIquelle\fP\fB, const char *\fP\fIziel\fP\fB,\fP
\fB          const char *\fP\fIdateisystemtyp\fP\fB,\fP
\fB          unsigned long \fP\fIeinhängeschalter\fP\fB,\fP
\fB          const void *\fP\fIdaten\fP\fB);\fP
.fi
.SH BESCHREIBUNG
\fBMount\fP hängt das durch \fIquelle\fP angegebene Dateisystem (was oft ein
Gerätename ist, aber auch ein Verzeichnisname oder ein Platzhalter sein
kann) in das Verzeichnis \fIziel\fP ein.

Zum Einhängen von Dateisystemen sind geeignete Rechte erforderlich (Linux:
\fBCAP_SYS_ADMIN\fP\-Fähigkeit).

.\" Multiple mounts on same mount point: since 2.3.99pre7.
Seit Linux 2.4 kann ein einzelnes Dateisystem an mehreren Einhängepunkten
sichtbar sein und mehrere Einhängungen können auf dem gleichen Einhängepunkt
gestapelt werden.

Die Werte für das Argument \fIdateisystemtyp\fP, die der Kernel unterstützt,
werden in \fI/proc/filesystems\fP aufgelistet (wie »minix«, »ext2«, »ext3«,
»jfs«, »xfs«, »reiserfs«, »msdos«, »proc«, »nfs«, »iso9660« etc.). Weitere
Typen könnten verfügbar werden, wenn geeignete Module geladen sind.

.\" FIXME 2.6.15 added flags for "shared subtree" functionality:
.\" MS_UNBINDABLE, MS_PRIVATE, MS_SHARED, MS_SLAVE
.\" These need to be documented on this page.
.\" See:
.\" Documentation/filesystems/sharedsubtree.txt
.\"
.\" http://lwn.net/Articles/159077/
.\"
.\" http://myweb.sudhaa.com:2022/~ram/sharedsubtree/paper/sharedsubtree.1.pdf
.\" Shared-Subtree Concept, Implementation, and Applications in Linux
.\" Al Viro viro@ftp.linux.org.uk
.\" Ram Pai linuxram@us.ibm.com
.\"
.\" http://foss.in/2005/slides/sharedsubtree1.pdf
.\" Shared Subtree Concept and Implementation in the Linux Kernel
.\" Ram Pai
.\"
.\" 2.6.25 Added MS_I_VERSION, which needs to be documented.
.\"
Das Argument \fIeinhängeschalter\fP hat die Magische Zahl 0xC0ED
(\fBMS_MGC_VAL\fP) in den oberen 16 Bit (dies wurde in den Kernel\-Versionen vor
2.4 benötigt, ist aber nicht länger notwendig und wird ignoriert, falls es
angegeben wird) und verschiedene Einhängeschalter (wie sie in
\fI<linux/fs.h>\fP für Libc4 und Libc5 und in \fI<sys/mount.h>\fP
für Glibc2 definiert wurden) in den unteren 16 Bit:
.TP 
\fBMS_BIND\fP (Linux 2.4 onward)
.\" since 2.4.0-test9
.\" with the exception of the "hidden" MS_REC mountflags bit
Ein Einhängen per »Bind« macht eine Datei oder ein Unterverzeichnis an einem
anderen Punkt innerhalb eines Dateisystems sichtbar. Einhängen per »Bind«
darf Dateisystemgrenzen überqueren und sich über \fBchroot\fP(2)\-Jails
erstrecken. Die Argumente \fIdateisystemtyp\fP und \fIdaten\fP werden
ignoriert. Vor Linux 2.6.26 wurden außerdem \fIeinhängeschalter\fP ignoriert
(das Einhängen per »Bind« hat die gleichen Einhängeoptionen wie der
darunterliegende Einhängepunkt). Seit Linux 2.6.26 wird der Schalter
\fBMS_RDONLY\fP berücksichtigt, wenn per »Bind« eingehängt wird.
.TP 
\fBMS_DIRSYNC\fP (seit Linux 2.5.19)
Verzeichniswechsel auf diesem System synchron ausführen.(Diese Eigenschaft
kann für einzelne Verzeichnisse oder Unterverzeichnisse durch Benutzung von
\fBchattr\fP(1) erreicht werden.)
.TP 
\fBMS_MANDLOCK\fP
.\" FIXME Say more about MS_MOVE
Zwingendes Sperren von Dateien auf diesem Dateisystem erlauben. (Zwingendes
Sperren muss immer noch für jede Datei eingeschaltet werden, wie es in
\fBfcntl\fP(2) beschrieben ist.)
.TP 
\fBMS_MOVE\fP
Ein Unterverzeichnis verschieben. \fIquelle\fP gibt einen existierenden
Einhängepunkt und \fIziel\fP den neuen Ort an. Das Verschieben ist atomar: Das
Unterverzeichnis wird zu keinem Zeitpunkt ausgehängt. Die Argumente
\fIdateisystemtyp\fP, \fIeinhängeschalter\fP und \fIdaten\fP werden ignoriert.
.TP 
\fBMS_NOATIME\fP
Nicht die Zugriffszeiten für (alle Typen von) Dateien auf diesem Dateisystem
aktualisieren.
.TP 
\fBMS_NODEV\fP
Keinen Zugriff auf Geräte (Spezialdateien) auf diesem Dateisystem erlauben.
.TP 
\fBMS_NODIRATIME\fP
Nicht die Zugriffszeiten für Verzeichnisse auf diesem Dateisystem
aktualisieren. Dieser Schalter stellt eine Untermenge der Funktionalität vom
\fBMS_NOATIME\fP bereit; sprich \fBMS_NOATIME\fP impliziert \fBMS_NODIRATIME\fP.
.TP 
\fBMS_NOEXEC\fP
.\" (Possibly useful for a file system that contains non-Linux executables.
.\" Often used as a security feature, e.g., to make sure that restricted
.\" users cannot execute files uploaded using ftp or so.)
Nicht erlauben, dass Programme von diesem Dateisystem ausgeführt werden.
.TP 
\fBMS_NOSUID\fP
.\" (This is a security feature to prevent users executing set-user-ID and
.\" set-group-ID programs from removable disk devices.)
Die Bits Set\-User\-ID und Set\-User\-Group\-ID nicht berücksichtigen, wenn
Programme von diesem Dateisystem ausgeführt werden.
.TP 
\fBMS_RDONLY\fP
.\"
.\" FIXME Document MS_REC, available since 2.4.11.
.\" This flag has meaning in conjunction with MS_BIND and
.\" also with the shared subtree flags.
Dateisystem nur zum Lesen einhängen
.TP 
\fBMS_RELATIME\fP (Seit Linux 2.6.20)
.\" Matthew Garrett notes in the patch that added this behavior
.\" that this lets utilities such as tmpreaper (which deletes
.\" files based on last acces time) work correctly.
Wenn auf eine Datei auf diesem Dateisystem zugegriffen wird, nur die letzte
Zugriffzeit der Datei (atime) aktualisieren, falls der aktuelle Wert von
»atime« kleiner oder gleich der letzten Änderungszeit der Datei (mtime) oder
der Zeit der letzten Statusänderung (ctime) ist. Diese Option ist für
Programme wie \fBmutt\fP(1), die wissen müssen, ob eine Datei seit der letzten
Änderung gelesen wurde. Seit Linux 2.6.30 verhält sich der Kernel wie es
dieser Schalter vorgibt (falls nicht \fBMS_NOATIME\fP angegeben wurde) und der
Schalter \fBMS_STRICTATIME\fP wird benötigt, um traditionelle Semantiken zu
erhalten. Zusätzlich wird seit Linux 2.6.30 die letzte Zugriffszeit der
Datei immer aktualisiert, wenn sie älter als ein Tag ist.
.TP 
\fBMS_REMOUNT\fP
Eine existierende Einhängung erneut einhängen. Dies erlaubt Ihnen, die
\fIEINHÄNGSCHALTER\fP und \fIdaten\fP von einer existierenden Einhängung zu
ändern, ohne das Dateisystem aus\- und wieder einzuhängen. \fIquelle\fP und
\fIziel\fP sollten die gleichen Werte sein, wie beim anfänglichen Aufruf von
\fBmount\fP() angegeben wurden; \fIdateisystemtyp\fP wird ignoriert.

Die folgenden \fIEINHÄNGSCHALTER\fP können geändert werden: \fBMS_RDONLY\fP,
\fBMS_SYNCHRONOUS\fP, \fBMS_MANDLOCK\fP; vor Kernel 2.6.16 konnten außerdem die
folgenden geändert werden: \fBMS_NOATIME\fP und \fBMS_NODIRATIME\fP; und
zusätzlich, vor Kernel 2.4.10, konnten außerdem die folgenden geändert
werden: \fBMS_NOSUID\fP, \fBMS_NODEV\fP, \fBMS_NOEXEC\fP.
.TP 
\fBMS_SILENT\fP (seit Linux 2.6.17)
Die Anzeige bestimmter Warnungen (\fIprintk\fP()) im Kernel\-Protokoll
unterdrücken. Dieser Schalter ersetzt den falsch benannten und veralteten
Schalter \fBMS_VERBOSE\fP (verfügbar seit Linux 2.4.12), der die gleiche
Bedeutung hat.
.TP 
\fBMS_STRICTATIME\fP (seit Linux 2.6.30)
Die letzte Zugriffszeit (atime) immer aktualisieren, wenn auf Dateien auf
diesem Dateisystem zugegriffen wird (dies war das Standardverhalten vor
Linux 2.6.30). Die Angabe dieses Schalters überschreibt den Effekt der
Schalter \fBMS_NOATIME\fP und \fBMS_RELATIME\fP.
.TP 
\fBMS_SYNCHRONOUS\fP
Schreiben auf diesem Dateisystem synchronisieren (als ob der Schalter
\fBO_SYNC\fP für \fBopen\fP(2) für alle offenen Dateien auf diesem Dateisystem
angegeben worden wäre).
.PP
From Linux 2.4 onward, the \fBMS_NODEV\fP, \fBMS_NOEXEC\fP, and \fBMS_NOSUID\fP flags
are settable on a per\-mount\-point basis.  From kernel 2.6.16 onward,
\fBMS_NOATIME\fP and \fBMS_NODIRATIME\fP are also settable on a per\-mount\-point
basis.  The \fBMS_RELATIME\fP flag is also settable on a per\-mount\-point basis.
.PP
Das Argument \fIdaten\fP wird von den verschiedenen Dateisystemen
interpretiert. Typischerweise ist es eine Zeichenkette aus Optionen, die
durch Kommata getrennt sind, und die von diesem Dateisystem verstanden
werden. Lesen Sie \fBmount\fP(8), um weitere Einzelheiten über die verfügbaren
Optionen für jeden Dateisystemtyp zu erhalten.
.SH RÜCKGABEWERT
Bei Erfolg wird Null zurückgegeben. Bei einem Fehler wird \-1 zurückgegeben
und \fIerrno\fP entsprechend gesetzt.
.SH FEHLER
The error values given below result from filesystem type independent
errors.  Each file\-system type may have its own special errors and its own
special behavior.  See the kernel source code for details.
.TP 
\fBEACCES\fP
.\" mtk: Probably: write permission is required for MS_BIND, with
.\" the error EPERM if not present; CAP_DAC_OVERRIDE is required.
A component of a path was not searchable.  (See also \fBpath_resolution\fP(7).)
Or, mounting a read\-only file system was attempted without giving the
\fBMS_RDONLY\fP flag.  Or, the block device \fIsource\fP is located on a file
system mounted with the \fBMS_NODEV\fP option.
.TP 
\fBEBUSY\fP
\fIquelle\fP ist bereits eingehängt. Oder es kann kann nicht neu mit reinem
Lesezugriff eingehängt werden, weil noch Dateien darauf mit Schreibzugriff
geöffnet sind. Oder es kann nicht auf \fIziel\fP eingehängt werden, weil
\fIziel\fP immer noch beschäftigt ist (es ist Arbeitsverzeichnis eines
Prozesses, Einhängepunkt eines anderen Gerätes, hat geöffnete Dateien,
etc.).
.TP 
\fBEFAULT\fP
Eines der Zeiger\-Argumente zeigt außerhalb des Adressraums der Benutzer.
.TP 
\fBEINVAL\fP
\fIquelle\fP hat einen ungültigen Superblock. Oder es wurde ein erneutes
Einhängen (\fBMS_REMOUNT\fP) versucht, aber \fIquelle\fP war bereits auf \fIziel\fP
eingehängt. Oder es wurde versucht, zu verschieben (\fBMS_MOVE\fP), \fIquelle\fP
war jedoch kein Einhängepunkt oder \(aq/\(aq.
.TP 
\fBELOOP\fP
Bei der Auflösung des Pfadnamens wurden zu viele Links vorgefunden. Oder es
wurde versucht, zu verschieben, während \fIziel\fP unterhalb von \fIquelle\fP lag.
.TP 
\fBEMFILE\fP
(Falls kein blockorientiertes Gerät benötigt wird:) Die Tabelle der
Platzhaltergeräte ist voll.
.TP 
\fBENAMETOOLONG\fP
Ein Pfadname war länger als \fBMAXPATHLEN\fP.
.TP 
\fBENODEV\fP
\fIdateisystemtyp\fP ist nicht im Kernel konfiguriert.
.TP 
\fBENOENT\fP
Ein Pfadname war leer oder hatte eine nicht existierende Komponente.
.TP 
\fBENOMEM\fP
Der Kernel konnte keine freie Seite reservieren, um Dateinamen oder Daten
hinein zu kopieren.
.TP 
\fBENOTBLK\fP
\fIquelle\fP ist kein blockorientiertes Gerät (und ein Gerät war erforderlich).
.TP 
\fBENOTDIR\fP
\fIziel\fP oder ein Präfix von \fIquelle\fP ist kein Verzeichnis.
.TP 
\fBENXIO\fP
Die Major\-Nummer des blockorientierten Gerätes \fIquelle\fP liegt außerhalb des
Bereichs.
.TP 
\fBEPERM\fP
Der Aufrufende verfügt nicht über die erforderlichen Rechte.
.SH VERSIONEN
.\" FIXME: Definitions of the so-far-undocumented MS_UNBINDABLE, MS_PRIVATE,
.\"  MS_SHARED, and MS_SLAVE were (also) only added to glibc headers in 2.12.
Die Definitionen von \fBMS_DIRSYNC\fP, \fBMS_MOVE\fP, \fBMS_REC\fP, \fBMS_RELATIME\fP
und \fBMS_STRICTATIME\fP wurden erst in der Version 2.12 in die Glibc\-Header
aufgenommen.
.SH "KONFORM ZU"
Diese Funktion ist Linux\-spezifisch und sollte nicht in Programmen benutzt
werden, die portabel gehalten werden sollen.
.SH ANMERKUNGEN
Der Originalschalter \fBMS_SYNC\fP wurde in 1.1.69 in \fBMS_SYNCHRONOUS\fP
umbenannt, als ein anderer \fBMS_SYNC\fP zu \fI<mman.h>\fP hinzugefügt
wurde.
.LP
.\" The change is in patch-2.4.0-prerelease.
Before Linux 2.4 an attempt to execute a set\-user\-ID or set\-group\-ID program
on a file system mounted with \fBMS_NOSUID\fP would fail with \fBEPERM\fP.  Since
Linux 2.4 the set\-user\-ID and set\-group\-ID bits are just silently ignored in
this case.
.SS "Namensräume pro Prozess"
Seit Kernel 2.4.19 stellt Linux Einhänge\-Namensräume pro Prozess bereit. Ein
Einhänge\-Namensraum ist eine Zusammenstellung von eingehängten
Dateisystemen, die für einen Prozess sichtbar
sind. Einhängepunkt\-Namensräume können (und werden gewöhnlich) gemeinsam von
mehreren Prozessen benutzt und Änderungen am Namensraum (d.h. Ein\- und
Aushängen) durch einen Prozess sind für alle anderen Prozesse sichtbar, die
den gleichen Namesraum gemeinsam verwenden. (Die Situation in Linux vor
2.4.19 kann so betrachtet werden, als ob ein einzelner Namensraum von jedem
Prozess im System gemeinsam benutzt würde.)

Ein untergeordneter Prozess, der durch \fBfork\fP(2) erzeugt wurde, nutzt den
Einhänge\-Namensraum seines übergeordneten Prozesses; der Einhänge\-Namensraum
wird über ein \fBexecve\fP(2) erhalten.

A process can obtain a private mount namespace if: it was created using the
\fBclone\fP(2)  \fBCLONE_NEWNS\fP flag, in which case its new namespace is
initialized to be a \fIcopy\fP of the namespace of the process that called
\fBclone\fP(2); or it calls \fBunshare\fP(2)  with the \fBCLONE_NEWNS\fP flag, which
causes the caller's mount namespace to obtain a private copy of the
namespace that it was previously sharing with other processes, so that
future mounts and unmounts by the caller are invisible to other processes
(except child processes that the caller subsequently creates) and vice
versa.

Die Linux\-spezifische Datei \fI/proc/PID/mounts\fP stellt die Liste der
Einhängepunkte in dem Einhänge\-Namensraum des Prozesses mit der angegebenen
ID dar; lesen Sie \fBproc\fP(5), um Einzelheiten zu erfahren.
.SH "SIEHE AUCH"
\fBumount\fP(2), \fBpath_resolution\fP(7), \fBmount\fP(8), \fBumount\fP(8)
.SH KOLOPHON
Diese Seite ist Teil der Veröffentlichung 3.32 des Projekts
Linux\-\fIman\-pages\fP. Eine Beschreibung des Projekts und Informationen, wie
Fehler gemeldet werden können, finden sich unter
http://www.kernel.org/doc/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Patrick Rother <krd@gulu.net>
und
Chris Leick <c.leick@vollbio.de>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
