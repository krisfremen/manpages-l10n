.\" -*- coding: UTF-8 -*-
.\" t
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     $Id: socket.2,v 1.4 1999/05/13 11:33:42 freitag Exp $
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998, 1999 by Andi Kleen <ak@muc.de>
.\" Modified 2002-07-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SOCKET 2 "19. Januar 2009" Linux Linux\-Programmierhandbuch
.SH BEZEICHNUNG
socket \- einen Kommunikationsendpunkt erzeugen
.SH ÜBERSICHT
\fB#include <sys/types.h>\fP /* Siehe ANMERKUNGEN */
.br
\fB#include <sys/socket.h>\fP
.sp
\fBint socket(int \fP\fIdomain\fP\fB, int \fP\fItype\fP\fB, int \fP\fIprotocol\fP\fB);\fP
.SH BESCHREIBUNG
\fBsocket\fP() erzeugt einen Kommunikationsendpunkt und gibt einen Deskriptor
zurück.
.PP
Der Parameter \fIdomain\fP spezifiziert eine Kommunikations\-Domain; dies wählt
die Protokollfamilie aus, die benutzt werden soll. Diese Familien sind in
\fI<sys/socket.h>\fP definiert. Zu den derzeit verstandenen Formaten
gehören:
.TS
tab(:);
l l l.
Name:Zweck:Handbuchseite
T{
\fBAF_UNIX\fP, \fBAF_LOCAL\fP
T}:T{
Lokale Kommunikation
T}:T{
\fBunix\fP(7)
T}
T{
\fBAF_INET\fP
T}:IPv4\-Internet\-Protokolle:T{
\fBip\fP(7)
T}
T{
\fBAF_INET6\fP
T}:IPv6\-Internet\-Protokolle:T{
\fBipv6\fP(7)
T}
T{
\fBAF_IPX\fP
T}:IPX\-Novell\-Protokolle:
T{
\fBAF_NETLINK\fP
T}:T{
Kernel\-Benutzerschnittstellengerät
T}:T{
\fBnetlink\fP(7)
T}
T{
\fBAF_X25\fP
T}:ITU\-T\-X.25\- / ISO\-8208\-Protokoll:T{
\fBx25\fP(7)
T}
T{
\fBAF_AX25\fP
T}:T{
Amateurfunk\-AX.25\-Protokoll
T}:
T{
\fBAF_ATMPVC\fP
T}:Zugriff auf unbearbeitete ATM PVCs:
T{
\fBAF_APPLETALK\fP
T}:Appletalk:T{
\fBddp\fP(7)
T}
T{
\fBAF_PACKET\fP
T}:T{
Low level packet interface
T}:T{
\fBpacket\fP(7)
T}
.TE
.PP
Der Socket hat den in \fItype\fP angegebenen Typ, der die Art der Kommunikation
bestimmt. Zur Zeit sind folgende Typen definiert:
.TP  16
\fBSOCK_STREAM\fP
Provides sequenced, reliable, two\-way, connection\-based byte streams.  An
out\-of\-band data transmission mechanism may be supported.
.TP 
\fBSOCK_DGRAM\fP
Unterstützt Datagramme (verbindungslose, unzuverlässige Nachrichten mit
einer festen Maximallänge)
.TP 
\fBSOCK_SEQPACKET\fP
Provides a sequenced, reliable, two\-way connection\-based data transmission
path for datagrams of fixed maximum length; a consumer is required to read
an entire packet with each input system call.
.TP 
\fBSOCK_RAW\fP
Provides raw network protocol access.
.TP 
\fBSOCK_RDM\fP
Provides a reliable datagram layer that does not guarantee ordering.
.TP 
\fBSOCK_PACKET\fP
Missbilligt und sollte nicht in neuen Programmen verwandt werden; siehe
\fBpacket\fP(7).
.PP
Einige Socket\-Typen können nicht von allen Protokollfamilien implementiert
sein; beispielsweise ist \fBSOCK_SEQPACKET\fP nicht für \fBAF_INET\fP
implementiert.
.PP
Seit Linux 2.6.27 dient das Argument \fItype\fP einem zweiten Zweck: Zusätzlich
zur Angabe des Socket\-Typs kann es ein bitweises ODER von einem der
folgenden Werte enthalten, um das Verhalten von \fBsocket\fP() zu verändern:
.TP  16
\fBSOCK_NONBLOCK\fP
Set the \fBO_NONBLOCK\fP file status flag on the new open file description.
Using this flag saves extra calls to \fBfcntl\fP(2)  to achieve the same
result.
.TP 
\fBSOCK_CLOEXEC\fP
Set the close\-on\-exec (\fBFD_CLOEXEC\fP)  flag on the new file descriptor.  See
the description of the \fBO_CLOEXEC\fP flag in \fBopen\fP(2)  for reasons why this
may be useful.
.PP
Das \fIprotocol\fP bezeichnet ein spezielles Protokoll, das auf diesem Socket
benutzt wird. Normalerweise gibt es nur ein einziges Protokoll, das von
einem speziellen Sockettyp einer Protokollfamilie unterstützt wird. In
diesem Fall kann \fIprotocol\fP als 0 angegeben werden. Nichtsdestotrotz ist es
möglich, dass mehrere Protokolle existieren. In diesem Fall muss das zu
Verwendende auf diese Art angegeben werden. Die Protokollnummer ist
individuell für die bestimmte »Kommunikations\-Domain«. Siehe dazu auch
\fBprotocols\fP(5). Lesen Sie \fBgetprotoent\fP(3), um zu erfahren, wie Sie die
Protokollnamenzeichenketten auf Protokollnummern abbilden.
.PP
Sockets of type \fBSOCK_STREAM\fP are full\-duplex byte streams, similar to
pipes.  They do not preserve record boundaries.  A stream socket must be in
a \fIconnected\fP state before any data may be sent or received on it.  A
connection to another socket is created with a \fBconnect\fP(2)  call.  Once
connected, data may be transferred using \fBread\fP(2)  and \fBwrite\fP(2)  calls
or some variant of the \fBsend\fP(2)  and \fBrecv\fP(2)  calls.  When a session
has been completed a \fBclose\fP(2)  may be performed.  Out\-of\-band data may
also be transmitted as described in \fBsend\fP(2)  and received as described in
\fBrecv\fP(2).
.PP
The communications protocols which implement a \fBSOCK_STREAM\fP ensure that
data is not lost or duplicated.  If a piece of data for which the peer
protocol has buffer space cannot be successfully transmitted within a
reasonable length of time, then the connection is considered to be dead.
When \fBSO_KEEPALIVE\fP is enabled on the socket the protocol checks in a
protocol\-specific manner if the other end is still alive.  A \fBSIGPIPE\fP
signal is raised if a process sends or receives on a broken stream; this
causes naive processes, which do not handle the signal, to exit.
\fBSOCK_SEQPACKET\fP sockets employ the same system calls as \fBSOCK_STREAM\fP
sockets.  The only difference is that \fBread\fP(2)  calls will return only the
amount of data requested, and any data remaining in the arriving packet will
be discarded.  Also all message boundaries in incoming datagrams are
preserved.
.PP
\fBSOCK_DGRAM\fP\- und \fBSOCK_RAW\fP\-Sockets erlauben das Senden von Datagrammen
zu Empfängern, die im \fBsend\fP(2)\-Aufrufen benannt werden. Datagramme werden
grundsätzlich mit \fBrecvfrom\fP(2) empfangen, das das nächste Datagramm
zusammen mit der Absenderadresse zurückliefert.
.PP
\fBSOCK_PACKET\fP is an obsolete socket type to receive raw packets directly
from the device driver.  Use \fBpacket\fP(7)  instead.
.PP
An \fBfcntl\fP(2)  \fBF_SETOWN\fP operation can be used to specify a process or
process group to receive a \fBSIGURG\fP signal when the out\-of\-band data
arrives or \fBSIGPIPE\fP signal when a \fBSOCK_STREAM\fP connection breaks
unexpectedly.  This operation may also be used to set the process or process
group that receives the I/O and asynchronous notification of I/O events via
\fBSIGIO\fP.  Using \fBF_SETOWN\fP is equivalent to an \fBioctl\fP(2)  call with the
\fBFIOSETOWN\fP or \fBSIOCSPGRP\fP argument.
.PP
When the network signals an error condition to the protocol module (e.g.,
using a ICMP message for IP) the pending error flag is set for the socket.
The next operation on this socket will return the error code of the pending
error.  For some protocols it is possible to enable a per\-socket error queue
to retrieve detailed information about the error; see \fBIP_RECVERR\fP in
\fBip\fP(7).
.PP
The operation of sockets is controlled by socket level \fIoptions\fP.  These
options are defined in \fI<sys/socket.h>\fP.  The functions
\fBsetsockopt\fP(2)  and \fBgetsockopt\fP(2)  are used to set and get options,
respectively.
.SH RÜCKGABEWERT
Bei Erfolg wird ein Dateideskriptor mit dem neuen Socket zurückgegeben. Bei
einem Fehler wird \-1 zurückgegeben und \fIerrno\fP entsprechend gesetzt.
.SH FEHLER
.TP 
\fBEACCES\fP
Permission to create a socket of the specified type and/or protocol is
denied.
.TP 
\fBEAFNOSUPPORT\fP
Die Implementierung unterstützt die angegebene Adressfamilie nicht.
.TP 
\fBEINVAL\fP
Unbekanntes Protokoll oder Protokollfamilie nicht verfügbar.
.TP 
\fBEINVAL\fP
.\" Since Linux 2.6.27
Invalid flags in \fItype\fP.
.TP 
\fBEMFILE\fP
Überlauf der Prozessdateitabelle
.TP 
\fBENFILE\fP
Der Systemschwellwert für die Anzahl geöffneter Dateien ist erreicht.
.TP 
\fBENOBUFS\fP oder \fBENOMEM\fP
Es ist nicht ausreichend Speicher verfügbar. Der Socket kann nicht erzeugt
werden, bis ausreichend Ressourcen freigegeben wurden.
.TP 
\fBEPROTONOSUPPORT\fP
Der Protokolltyp oder das angegebene Protokoll wird von dieser
Kommunikations\-Domain nicht unterstützt.
.PP
Andere Fehler können von den unterliegenden Protokollmodulen erzeugt werden.
.SH "KONFORM ZU"
4.4BSD, POSIX.1\-2001.

The \fBSOCK_NONBLOCK\fP and \fBSOCK_CLOEXEC\fP flags are Linux\-specific.

\fBsocket\fP()  appeared in 4.2BSD.  It is generally portable to/from non\-BSD
systems supporting clones of the BSD socket layer (including System V
variants).
.SH ANMERKUNGEN
POSIX.1\-2001 erfordert nicht, dass \fI<sys/types.h>\fP eingebunden
wird. Diese Header\-Datei ist in Linux nicht erforderlich. Allerdings
benötigen einige historische Implementierungen (BSD) diese Header\-Datei. Es
wird empfohlen, sie für portierbare Anwendungen einzubinden.

The manifest constants used under 4.x BSD for protocol families are
\fBPF_UNIX\fP, \fBPF_INET\fP, etc., while \fBAF_UNIX\fP etc. are used for address
families.  However, already the BSD man page promises: "The protocol family
generally is the same as the address family", and subsequent standards use
AF_* everywhere.
.SH BEISPIEL
Ein Beispiel für die Verwendung von \fBsocket\fP() ist in \fBgetaddrinfo\fP(3)
dargestellt.
.SH "SIEHE AUCH"
\fBaccept\fP(2), \fBbind\fP(2), \fBconnect\fP(2), \fBfcntl\fP(2), \fBgetpeername\fP(2),
\fBgetsockname\fP(2), \fBgetsockopt\fP(2), \fBioctl\fP(2), \fBlisten\fP(2), \fBread\fP(2),
\fBrecv\fP(2), \fBselect\fP(2), \fBsend\fP(2), \fBshutdown\fP(2), \fBsocketpair\fP(2),
\fBwrite\fP(2), \fBgetprotoent\fP(3), \fBip\fP(7), \fBsocket\fP(7), \fBtcp\fP(7),
\fBudp\fP(7), \fBunix\fP(7)
.PP
\(lqAn Introductory 4.3BSD Interprocess Communication Tutorial\(rq ist in
\fIUNIX Programmer's Supplementary Documents Volume 1\fP nochmals gedruckt
.PP
\(lqBSD Interprocess Communication Tutorial\(rq ist in \fIUNIX Programmer's
Supplementary Documents Volume 1\fP nochmals gedruckt.
.SH KOLOPHON
Diese Seite ist Teil der Veröffentlichung 3.40 des Projekts
Linux\-\fIman\-pages\fP. Eine Beschreibung des Projekts und Informationen, wie
Fehler gemeldet werden können, finden sich unter
http://www.kernel.org/doc/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Martin Schulze <joey@infodrom.org>,
Sebastian Rittau <srittau@jroger.in-berlin.de>
und
Helge Kreutzmann <debian@helgefjell.de>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
