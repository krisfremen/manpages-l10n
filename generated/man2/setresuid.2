.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 1997 Andries Brouwer (aeb@cwi.nl)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified, 2003-05-26, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SETRESUID 2 "22. November 2010" Linux Linux\-Programmierhandbuch
.SH BEZEICHNUNG
setresuid, setresgid \- reale, effektive und gespeicherte Benutzer\- oder
Gruppen\-ID setzen
.SH ÜBERSICHT
\fB#define _GNU_SOURCE\fP /* Siehe feature_test_macros(7) */
.br
\fB#include <unistd.h>\fP
.sp
\fBint setresuid(uid_t \fP\fIruid\fP\fB, uid_t \fP\fIeuid\fP\fB, uid_t \fP\fIsuid\fP\fB);\fP
.br
\fBint setresgid(gid_t \fP\fIrgid\fP\fB, gid_t \fP\fIegid\fP\fB, gid_t \fP\fIsgid\fP\fB);\fP
.SH BESCHREIBUNG
\fBsetresuid\fP() setzt die wirkliche Benutzer\-ID, die effektive Benutzer\-ID
und die gespeicherte Benutzer\-ID des aufrufenden Prozesses.

Unprivilegierte Prozesse eines Benutzers können die wirkliche UID, die
effektive UID und die gespeicherte SUID jeweils zu einem der Folgenden
ändern: der aktuellen wirklichen UID, der aktuellen effektiven UID oder der
aktuellen gespeicherten SUID.

Privilegierte Prozesse (auf Linux diejenigen, die die
\fBCAP_SETUID\fP\-Fähigkeit haben) können die wirkliche UID, die effektive UID
und die gespeicherte SUID auf beliebige Werte setzen.

Wenn eines der Argumente \-1 ist, wird der dazugehörige Wert nicht geändert.

Ohne Rücksicht auf die Änderungen an der wirklichen UID, der effektiven UID
und der gespeicherten SUID wird die Dateisystem\-UID stets auf den gleichen
Wert wie die (möglicherweise neue) effektive UID gesetzt.

\fBsetresgid\fP() setzt vollständig analog dazu die wirkliche GID, die
effektive GID und die gespeicherte SGID des aufrufenden Prozesses (und
ändert stets die GID des Dateisystems auf den gleichen Wert, wie die
effektive GID) mit den gleichen Einschränkungen für nicht privilegierte
Prozesse.
.SH RÜCKGABEWERT
Bei Erfolg wird Null zurückgegeben. Bei einem Fehler wird \-1 zurückgegeben
und \fIerrno\fP entsprechend gesetzt.
.SH FEHLER
.TP 
\fBEAGAIN\fP
\fIuid\fP  ist nicht die aktuelle UID und die neue Benutzer\-ID hätte durch
diesen Aufruf mehr Prozesse als durch die \fBRLIMIT_NPROC\fP\-Beschränkung
erlaubt.
.TP 
\fBEPERM\fP
Der aufrufende Prozess ist nicht privilegiert (hatte nicht die Fähigkeit
\fBCAP_SETUID\fP) und versuchte die IDs auf nicht erlaubte Werte zu ändern.
.SH VERSIONEN
Diese Systemaufrufe sind unter Linux seit Linux 2.1.44 verfügbar.
.SH "KONFORM ZU"
Diese Systemaufrufe sind nicht Standard. Sie kommen auch in HP\-UX und
einigen BSDs vor.
.SH ANMERKUNGEN
Unter HP\-UX und FreeBSD befinden sich die Prototypen in
<unistd.h>. Unter Linux wird der Prototyp durch Glibc seit Version
2.3.2 bereitgestellt.

Der Original\-Linux\-Systemaufrufe \fBsetresuid\fP() und \fBsetresgid\fP()
unterstützen nur 16\-Bit\-Benutzer\- und \-Gruppen\-IDs. Nachfolgend fügte Linux
2.4 \fBsetresuid32\fP() und \fBsetresgid32\fP() hinzu, die 32\-Bit\-IDs
unterstützen. Die Glibc\-Wrapper\-Funktionen \fBsetfsuid\fP() \fBsetresgid\fP() und
stellen die Änderungen transparent über Kernel\-Versionen hinweg bereit.
.SH "SIEHE AUCH"
\fBgetresuid\fP(2), \fBgetuid\fP(2), \fBsetfsgid\fP(2), \fBsetfsuid\fP(2),
\fBsetreuid\fP(2), \fBsetuid\fP(2), \fBcapabilities\fP(7), \fBcredentials\fP(7)
.SH KOLOPHON
Diese Seite ist Teil der Veröffentlichung 3.32 des Projekts
Linux\-\fIman\-pages\fP. Eine Beschreibung des Projekts und Informationen, wie
Fehler gemeldet werden können, finden sich unter
http://www.kernel.org/doc/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Chris Leick <c.leick@vollbio.de>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
