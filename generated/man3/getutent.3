.\" -*- coding: UTF-8 -*-
.\" Copyright 1995 Mark D. Roth (roth@uiuc.edu)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Solaris manpages
.\"
.\" Modified Thu Jul 25 14:43:46 MET DST 1996 by Michael Haardt
.\"     <michael@cantor.informatik.rwth-aachen.de>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH GETUTENT 3 "29. Juni 2008" "" Linux\-Programmierhandbuch
.SH BEZEICHNUNG
getutent, getutid, getutline, pututline, setutent, endutent, utmpname \- auf
Einträge der utmp\-Datei zugreifen
.SH ÜBERSICHT
\fB#include <utmp.h>\fP
.sp
\fBstruct utmp *getutent(void);\fP
.br
\fBstruct utmp *getutid(struct utmp *\fP\fIut\fP\fB);\fP
.br
\fBstruct utmp *getutline(struct utmp *\fP\fIut\fP\fB);\fP
.sp
\fBstruct utmp *pututline(struct utmp *\fP\fIut\fP\fB);\fP
.sp
\fBvoid setutent(void);\fP
.br
\fBvoid endutent(void);\fP
.sp
\fBint utmpname(const char *\fP\fIfile\fP\fB);\fP
.SH BESCHREIBUNG
Neue Applikationen sollten die in POSIX.1 spezifizierten »utmpx«\-Versionen
dieser Funktionen verwenden, siehe KONFORM ZU.

\fButmpname\fP() setzt den Namen der Datei im utmp\-Format, auf die die anderen
utmp\-Funktionen zugreifen. Wenn \fButmpname\fP() nicht benutzt wird, um den
Dateinamen zu setzen bevor die anderen Funktionen benutzt werden, wird von
diesen \fB_PATH_UTMP\fP angenommen, wie in \fI<paths.h>\fP definiert.
.PP
\fBsetutent\fP() setzt den Dateizeiger auf den Anfang der utmp\-Datei zurück. Im
Allgemeinen ist es sinnvoll, dies vor Verwendung der anderen Funktionen
aufzurufen.
.PP
\fBendutent\fP() schließt die utmp\-Datei. Sie sollte aufgerufen werden, wenn
die Verwendung der anderen Funktionen im Benutzercode beendet ist.
.PP
\fBgetutent\fP() liest eine Zeile ab der aktuellen Dateiposition in der
utmp\-Datei. Es wird ein Zeiger auf eine Struktur zurückgegeben, die die
Felder der Zeile enthält. Die Definition dieser Struktur ist in \fButmp\fP(5)
aufgeschlüsselt.
.PP
\fBgetutid\fP()sucht ab der aktuellen Dateiposition in der utmp\-Datei vorwärts,
basierend auf \fIut\fP. Wenn \fIut\->ut_type\fP gleich \fBRUN_LVL\fP,
\fBBOOT_TIME\fP, \fBNEW_TIME\fP oder \fBOLD_TIME\fP ist, findet \fBgetutid\fP() den
ersten Eintrag, dessen Feld \fIut_type\fP \fIut\->ut_type\fP entspricht. Wenn
\fIut\->ut_type\fP gleich \fBINIT_PROCESS\fP, \fBLOGIN_PROCESS\fP, \fBUSER_PROCESS\fP
oder \fBDEAD_PROCESS\fP ist, findet \fBgetutid\fP() den ersten Eintrag, dessen
Feld \fIut_id\fP \fIut\->ut_id\fP entspricht.
.PP
\fBgetutline\fP() sucht ab der aktuellen Dateiposition in der utmp\-Datei
vorwärts. Die Funktion überprüft Einträge, deren Feld \fIut_type\fP gleich
\fBUSER_PROCESS\fP oder \fBLOGIN_PROCESS\fP ist und gibt den ersten Eintrag
zurück, dessen Feld \fIut_line\fP \fIut\->ut_line\fP entspricht.
.PP
\fBpututline\fP() schreibt die utmp\-Struktur \fIut\fP in die utmp\-Datei. Die
Funktion benutzt \fBgetutid\fP(), um den geeigneten Platz in der Datei für das
Einfügen des neuen Eintrags zu finden. Wenn kein geeigneter Platz für \fIut\fP
gefunden werden kann, hängt \fBpututline\fP() den neuen Eintrag am Ende der
Datei an.
.SH RÜCKGABEWERT
\fBgetutent\fP(), \fBgetutid\fP() und \fBgetutline\fP() liefern bei Erfolg einen
Zeiger auf eine \fIstruct utmp\fP\-Struktur zurück und NULL bei Fehlern (dies
schließt den Fall ein, dass ein Eintrag nicht gefunden wird, »record not
found«). Die Struktur \fIstruct utmp\fP wird als statischer Speicher alloziiert
und kann von nachfolgenden Aufrufen überschrieben werden.

Bei Erfolg gibt \fBpututline\fP() \fIut\fP zurück; bei Fehlern gibt die Funktion
NULL zurück.

Wenn der Name erfolgreich gespeichert wurde, gibt \fButmpname\fP() 0 zurück,
bei Fehlern \-1.
.SH FEHLER
.TP 
\fBENOMEM\fP
Speicher aufgebraucht.
.TP 
\fBESRCH\fP
Eintrag nicht gefunden.
.PP
\fBsetutent\fP(), \fBpututline\fP() und die \fBgetut* ()\fP\-Funktionen können aus den
gleichen Gründen fehlschlagen wie in \fBopen\fP(2) beschrieben.
.SH DATEIEN
/var/run/utmp	Datenbank aktuell angemeldeter Benutzer
.br
/var/log/wtmp	Datenbank früher angemeldeter Benutzer
.SH "KONFORM ZU"
XPG2, SVr4.
.LP
In XPG2 and SVID 2 the function \fBpututline\fP()  is documented to return
void, and that is what it does on many systems (AIX, HP\-UX, Linux libc5).
HP\-UX introduces a new function \fB_pututline\fP()  with the prototype given
above for \fBpututline\fP()  (also found in Linux libc5).
.LP
All these functions are obsolete now on non\-Linux systems.  POSIX.1\-2001,
following SUSv1, does not have any of these functions, but instead uses
.sp
\fB#include <utmpx.h>\fP
.sp
\fBstruct utmpx *getutxent(void);\fP
.br
\fBstruct utmpx *getutxid(const struct utmpx *);\fP
.br
\fBstruct utmpx *getutxline(const struct utmpx *);\fP
.br
\fBstruct utmpx *pututxline(const struct utmpx *);\fP
.br
\fBvoid setutxent(void);\fP
.br
\fBvoid endutxent(void);\fP
.PP
These functions are provided by glibc, and perform the same task as their
equivalents without the "x", but use \fIstruct utmpx\fP, defined on Linux to be
the same as \fIstruct utmp\fP.  For completeness, glibc also provides
\fButmpxname\fP(), although this function is not specified by POSIX.1.
.PP
On some other systems, the \fIutmpx\fP structure is a superset of the \fIutmp\fP
structure, with additional fields, and larger versions of the existing
fields, and parallel files are maintained, often \fI/var/*/utmpx\fP and
\fI/var/*/wtmpx\fP.
.LP
Linux glibc on the other hand does not use a parallel \fIutmpx\fP file since
its \fIutmp\fP structure is already large enough.  The functions \fBgetutxent\fP()
etc. are aliases for \fBgetutent\fP() etc.
.SH ANMERKUNGEN
.SS "Anmerkungen zur Glibc"
The above functions are not thread\-safe.  Glibc adds reentrant versions
.sp
.nf
\fB#define _GNU_SOURCE\fP    /* oder _SVID_SOURCE oder _BSD_SOURCE;
\&                          siehe \fBfeature_test_macros(7)\fP */
\fB#include <utmp.h>\fP
.sp
\fBint getutent_r(struct utmp *\fP\fIubuf\fP\fB, struct utmp **\fP\fIubufp\fP\fB);\fP
.sp
\fBint getutid_r(struct utmp *\fP\fIut\fP\fB,\fP
\fB              struct utmp *\fP\fIubuf\fP\fB, struct utmp **\fP\fIubufp\fP\fB);\fP
.sp
\fBint getutline_r(struct utmp *\fP\fIut\fP\fB,\fP
\fB                struct utmp *\fP\fIubuf\fP\fB, struct utmp **\fP\fIubufp\fP\fB);\fP
.fi
.sp
These functions are GNU extensions, analogs of the functions of the same
name without the _r suffix.  The \fIubuf\fP argument gives these functions a
place to store their result.  On success they return 0, and a pointer to the
result is written in \fI*ubufp\fP.  On error these functions return \-1.  There
are no utmpx equivalents of the above functions.  (POSIX.1 does not specify
such functions.)
.SH BEISPIEL
The following example adds and removes a utmp record, assuming it is run
from within a pseudo terminal.  For usage in a real application, you should
check the return values of \fBgetpwuid\fP(3)  and \fBttyname\fP(3).
.PP
.nf
#include <string.h>
#include <stdlib.h>
#include <pwd.h>
#include <unistd.h>
#include <utmp.h>

int
main(int argc, char *argv[])
{
    struct utmp entry;

    system("echo before adding entry:;who");

    entry.ut_type = USER_PROCESS;
    entry.ut_pid = getpid();
    strcpy(entry.ut_line, ttyname(STDIN_FILENO) + strlen("/dev/"));
    /* only correct for ptys named /dev/tty[pqr][0\-9a\-z] */
    strcpy(entry.ut_id, ttyname(STDIN_FILENO) + strlen("/dev/tty"));
    time(&entry.ut_time);
    strcpy(entry.ut_user, getpwuid(getuid())\->pw_name);
    memset(entry.ut_host, 0, UT_HOSTSIZE);
    entry.ut_addr = 0;
    setutent();
    pututline(&entry);

    system("echo after adding entry:;who");

    entry.ut_type = DEAD_PROCESS;
    memset(entry.ut_line, 0, UT_LINESIZE);
    entry.ut_time = 0;
    memset(entry.ut_user, 0, UT_NAMESIZE);
    setutent();
    pututline(&entry);

    system("echo after removing entry:;who");

    endutent();
    exit(EXIT_SUCCESS);
}
.fi
.SH "SIEHE AUCH"
\fBgetutmp\fP(3), \fButmp\fP(5)
.SH KOLOPHON
Diese Seite ist Teil der Veröffentlichung 3.40 des Projekts
Linux\-\fIman\-pages\fP. Eine Beschreibung des Projekts und Informationen, wie
Fehler gemeldet werden können, finden sich unter
http://www.kernel.org/doc/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Tobias Quathamer <toddy@debian.org>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
