.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:06:49 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Aug 25 23:17:51 1995 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Wed Dec 18 00:47:18 1996 by Andries Brouwer (aeb@cwi.nl)
.\" 2007-06-15, Marc Boyer <marc.boyer@enseeiht.fr> + mtk
.\"     Improve discussion of strncpy().
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH STRCPY 3 "4. Dezember 2009" GNU Linux\-Programmierhandbuch
.SH BEZEICHNUNG
strcpy, strncpy \- kopiert eine Zeichenkette
.SH ÜBERSICHT
.nf
\fB#include <string.h>\fP
.sp
\fBchar *strcpy(char *\fP\fIZiel\fP\fB, const char *\fP\fIQuelle\fP\fB);\fP
.sp
\fBchar *strncpy(char *\fP\fIZiel\fP\fB, const char *\fP\fIQuelle\fP\fB, size_t \fP\fIn\fP\fB);\fP
.fi
.SH BESCHREIBUNG
Die Funktion \fBstrcpy\fP() kopiert die Zeichenkette, auf die der Zeiger
\fIQuelle\fP zeigt, inklusive des abschließenden Null\-Bytes (\(aq\e0\(aq) an
die Stelle, auf die \fIZiel\fP zeigt. Die Zeichenketten dürfen sich nicht
überlappen und die Zielzeichenkette \fIZiel\fP muss groß genug sein, um die
Kopie aufzunehmen.
.PP
Die Funktion \fBstrncpy\fP() arbeitet ähnlich, allerdings werden maximal \fIn\fP
Byte von \fIQuelle\fP kopiert. \fBWarnung\fP: Ist kein Null\-Byte innerhalb der
ersten \fIn\fP Byte von \fIQuelle\fP, wird die Zeichenkette in \fIZiel\fP nicht durch
ein Null\-Byte abgeschlossen.
.PP
Ist die Länge von \fIQuelle\fP kleiner als \fIn\fP, füllt \fBstrncpy\fP() den Rest
von \fIZiel\fP mit Null\-Bytes auf.
.PP
Eine einfache Implementierung von \fBstrncpy\fP() ist:
.in +4n
.nf

char*
strncpy(char *ziel, const char *quelle, size_t n){
    size_t i;

    for (i = 0 ; i < n && quelle[i] != \(aq\e0\(aq ; i++)
        ziel[i] = quelle[i];
    for ( ; i < n ; i++)
        ziel[i] = \(aq\e0\(aq;

    return ziel;
}
.fi
.in
.SH RÜCKGABEWERT
Die Funktionen \fBstrcpy\fP() und \fBstrncpy\fP() geben einen Zeiger auf die
Zielzeichenkette \fIZiel\fP zurück.
.SH "KONFORM ZU"
SVr4, 4.3BSD, C89, C99.
.SH ANMERKUNGEN
Einige Programmierer halten \fBstrncpy\fP() für ineffizient und
fehleranfällig. Wenn der Programmierer weiß, dass die Größe von \fIZiel\fP
größer ist als die Länge von \fIQuelle\fP (indem er Code verwendet, der das
überprüft!), kann \fBstrcpy\fP() benutzt werden.

Wenn kein abschließendes Null\-Byte innerhalb der ersten \fIn\fP Zeichen von
\fIQuelle\fP enthalten ist, erstellt \fBstrncpy\fP() eine nicht abgeschlossene
Zeichenkette in \fIZiel\fP. Programmierer verhindern diesen Fehler oftmals
dadurch, dass sie den Abschluss folgendermaßen erzwingen:
.in +4n
.nf

strncpy(buf, str, n);
if (n > 0)
    buf[n \- 1]= \(aq\e0\(aq;
.fi
.in
.SH FEHLER
Wenn die Zielzeichenkette beim Aufruf von \fBstrcpy\fP() nicht groß genug ist,
kann alles Denkbare passieren. Der Überlauf von Zeichenkettenpuffern mit
fester Länge ist eine beliebte Cracker\-Technik, um vollständige Kontrolle
über einen Rechner zu erlangen. Immer, wenn ein Programm Daten aus einem
Puffer liest oder in ihn schreibt, muss das Programm zuerst überprüfen, ob
es genug freien Platz gibt. Das kann überflüssig sein, wenn Sie beweisen
können, dass ein Überlauf unmöglich ist, aber seien Sie vorsichtig:
Programme können im Lauf der Zeit geändert werden. Und plötzlich wird das
Unmögliche möglich.
.SH "SIEHE AUCH"
\fBbcopy\fP(3), \fBmemccpy\fP(3), \fBmemcpy\fP(3), \fBmemmove\fP(3), \fBstpcpy\fP(3),
\fBstrdup\fP(3), \fBwcscpy\fP(3), \fBwcsncpy\fP(3)
.SH KOLOPHON
Diese Seite ist Teil der Veröffentlichung 3.25 des Projekts
Linux\-\fIman\-pages\fP. Eine Beschreibung des Projekts und Informationen, wie
Fehler gemeldet werden können, finden sich unter
http://www.kernel.org/doc/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Markus Schmitt <fw@vieta.math.uni-sb.de>
und
Tobias Quathamer <toddy@debian.org>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
