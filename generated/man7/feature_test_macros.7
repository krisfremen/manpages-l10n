.\" -*- coding: UTF-8 -*-
.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 2006, Michael Kerrisk
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH FEATURE_TEST_MACROS 7 "17. September 2011" Linux Linux\-Programmierhandbuch
.SH BEZEICHNUNG
feature_test_macros \- Feature\-Test\-Makros
.SH ÜBERSICHT
.nf
\fB#include <features.h>\fP
.fi
.SH BESCHREIBUNG
Mit Feature\-Test\-Makros kann der Programmierer steuern, welche Definitionen
aus System\-Header\-Dateien bei der Kompilierung eines Programms verwendet
werden.

\fBHINWEIS:\fP Um wirksam zu sein, \fImuss die Definition eines
Feature\-Test\-Makros im Quelltext vor den #include\-Anweisungen für die
Header\-Dateien stehen\fP. Dies kann entweder im Kompilierbefehl (\fIcc
\-DMACRO=value\fP) oder durch die Definition des Makros innerhalb des
Quellcodes vor dem Einlesen aller Header erreicht werden.

Einige Feature\-Test\-Makros helfen bei der Erstellung von portablen
Anwendungen, indem sie die Verwendung nicht standardgemäßer Definitionen
verhindern. Andere Makros können verwendet werden, um gezielt nicht
standardisierte Definitionen, die sonst per Voreinstellung nicht verwendet
werden, zu verwenden. Die genauen Auswirkungen jedes der im Folgenden
beschriebenen Feature\-Test\-Makros können Sie durch Auswertung der
Header\-Datei \fI<features.h>\fP ermitteln.
.SS "Spezifikation der Funktion\-Test\-Makro\-Anforderungen in Handbuchseiten"
Wenn eine Funktion die Definition eines Feature\-Test\-Makros erfordert,
enthält die ÜBERSICHT einer Handbuchseit in der Regel einen Vermerk der
folgenden Form (dieses Beispiel finden Sie in der Handbuchseite von
\fBacct\fP(2)):
.RS 8
.sp
\fB#include <unistd.h>\fP
.sp
\fBint acct(const char *\fP\fIfilename\fP\fB);\fP
.sp
.nf
.in -4n
Mit Glibc erforderliche Makros (siehe feature_test_macros(7)):
.fi
.in
.sp
\fBacct\fP(): _BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.PP
Das \fB||\fP bedeutet, dass zwecks Ermittlung der Deklaration von \fBacct\fP(2)
aus \fI<unistd.h>\fP \fIeine der beiden\fP folgenden Makro\-Definitionen
vor dem Einfügen jeglicher Header\-Dateien erfolgen muss:
.RS
.nf

#define _BSD_SOURCE
#define _XOPEN_SOURCE        /* oder jeder Wert < 500 */
.fi
.RE
.PP
Alternativ können gleichwertige Definitionen in den Kompilierbefehl
eingebettet werden:
.RS
.nf

cc \-D_BSD_SOURCE
cc \-D_XOPEN_SOURCE           # Oder jeder Wert < 500
.fi
.RE
.PP
Beachten Sie, dass \fBeinige Feature\-Test\-Makros standardmäßig definiert
sind\fP. Daher ist es nicht immer erforderlich, die in der ÜBERSICHT
angegebenen Feature\-Test\-Makro(s) explizit anzugeben. Einzelheiten finden
Sie weiter unten.

In wenigen Fällen verwenden Handbuchseiten eine Abkürzung für die
Anforderungen der Feature\-Test\-Makros (dieses Beispiel stammt aus
\fBreadahead\fP(2)):
.RS
.nf

\fB#define _GNU_SOURCE\fP
\fB#include <fcntl.h>\fP
.sp
\fBssize_t readahead(int \fP\fIfd\fP\fB, off64_t *\fP\fIoffset\fP\fB, size_t \fP\fIcount\fP\fB);\fP
.fi
.RE
.PP
Dieses Format wird immer dann angewendet, wenn nur ein einziges
Feature\-Test\-Makro die Verwendung der Funktions\-Deklaration ermöglicht und
das Makro nicht standardmäßig definiert wird.
.SS "Von Glibc »verstandene« Feature\-Test\-Makros"
.\" The details in glibc 2.0 are simpler, but combining a
.\" a description of them with the details in later glibc versions
.\" would make for a complicated description.
Im Folgenden wird erläutert, wie Feature\-Test\-Makros in Linux\-Glibc 2.\fIx\fP,
\fIx\fP\ >\ 0, behandelt werden.

Die Linux\-Glibc »versteht« die folgenden Feature\-Test\-Makros:
.TP 
\fB__STRICT_ANSI__\fP
ISO Standard C. Dieses Makro wird impliziert definiert, wenn \fBgcc\fP(1)
beispielsweise mit den Schaltern \fI\-std=c99\fP oder \fI\-ansi\fP aufgerufen wird.
.TP 
\fB_POSIX_C_SOURCE\fP
Mit der Definition dieses Makros stellen Header\-Dateien Definitionen wie
folgt bereit:
.RS
.IP \(bu 3
Der Wert 1 aktiviert Definitionen gemäß POSIX.1\-1990 und ISO C (1990).
.IP \(bu
Ein Wert gleich oder größer als 2 aktiviert zusätzlich Definitionen gemäß
POSIX.2\-1992.
.IP \(bu
.\" 199506L functionality is only available since glibc 2.1
Der Wert 199309L oder größer aktiviert Definitionen gemäß POSIX.1b
(Echtzeiterweiterungen).
.IP \(bu
Der Wert 199506L oder größer aktiviert Definitionen gemäß POSIX.1c
(Threads).
.IP \(bu
(Seit Glibc 2.3.3) Der Wert 200112L oder größer aktiviert Definitionen gemäß
der POSIX.1\-2001 Base Specification (ohne die XSI\-Erweiterung).
.IP \(bu
(Seit Glibc 2.10) Der Wert 200809L oder größer aktiviert Definitionen gemäß
der POSIX.1\-2008 Base Specification (ohne die XSI\-Erweiterung).
.RE
.TP 
\fB_POSIX_SOURCE\fP
Die Definition dieses überholten Makros mit einem beliebigen Wert hat die
gleiche Wirkung wie die Definition von \fB_POSIX_C_SOURCE\fP mit dem Wert 1.
.TP 
\fB_XOPEN_SOURCE\fP
Mit der Definition dieses Makros stellen Header\-Dateien Definitionen wie
folgt bereit:
.RS
.IP \(bu 3
Die Zuweisung eines beliebigen Wertes aktiviert Definitionen nach POSIX.1,
POSIX.2 und XPG4.
.IP \(bu
Der Wert 500 oder größer aktiviert zusätzlich die Definitionen für SUSv2
(UNIX 98).
.IP \(bu
(Seit Glibc 2.2) Der Wert 600 oder größer aktiviert zusätzlich Definitionen
für SUSv3 (UNIX 03, also die POSIX.1\-2001 Base Specification und die
XSI\-Erweiterung) sowie C99\-Definitionen.
.IP \(bu
(Seit Glibc 2.10) Der Wert 700 oder größer aktiviert zusätzlich Definitionen
für SUSv4 (d.h. die POSIX.1\-2001 Base Specification und die
XSI\-Erweiterung).
.RE
.TP 
\fB_XOPEN_SOURCE_EXTENDED\fP
Wenn dieses Makro und \fB_XOPEN_SOURCE\fP definiert sind, dann werden
Definitionen entsprechend den XPG4v2\- (SUSv1\-)UNIX\-Erweiterungen (UNIX 95)
aktiviert. Dieses Makro wird auch implizit definiert, wenn \fB_XOPEN_SOURCE\fP
ein Wert von 500 oder größer zugewiesen wird.
.TP 
\fB_ISOC95_SOURCE\fP
Aktiviert »ISO C (1990) Amendment 1«\-Definitionen (auch bekannt als
C95). Dieses Makro wird seit Glibc 2.12 erkannt. Die hauptsächliche Änderung
in C95 war die Unterstützung internationaler Zeichensätze. Die Änderungen
von C95 wurden in den nachfolgenden Standard C99 aufgenommen (mit anderen
Worten impliziert \fB_ISOC99_SOURCE\fP \fB_ISOC95_SOURCE\fP).
.TP 
\fB_ISOC99_SOURCE\fP
Aktiviert C99\-Ergänzungen zu ISO C (1990). Dieses Makro wird seit Glibc
2.1.3 erkannt; frühere Glibc 2.1.x\-Versionen verarbeiteten das gleichwertige
Makro \fB_ISOC9X_SOURCE\fP (weil der C99\-Standard noch nicht fertig
war). Obwohl das letztere Makro obsolet ist, wird es von der Glibc weiter
zwecks Abwärtskompatibilität unterstützt.
.TP 
\fB_LARGEFILE64_SOURCE\fP
Aktiviert Definitionen für die alternative API\-Spezifikation von der LFS
(Large File Summit), die als »Erweiterung für den Übergang« zur Single UNIX
Specification gedacht ist. (Siehe http://opengroup.org/platform/lfs.html.)
Die alternative API besteht aus einer Reihe von neuen Objekten
(d.h. Funktionen und Typen), deren Namen mit »64« endet (z. B. \fIoff64_t \fP
versus \fIoff_t\fP, \fBlseek64\fP() versus \fBlseek\fP(), usw.). Neue Programme
sollten diese Schnittstelle nicht verwenden, sondern \fI_FILE_OFFSET_BITS=64\fP
einsetzen.
.TP 
\fB_FILE_OFFSET_BITS\fP
Wird diesem Makro der Wert 64 zugewiesen, werden automatisch Verweise auf
32\-Bit\-Funktionen und \-Datentypen für Datei\-Ein/Ausgabe und
Dateisystem\-Operationen in Verweise auf ihre 64\-Bit\-Pendants
konvertiert. Dies ist nützlich für die Ein\-/Ausgabe in und aus großen
Dateien (> 2 Gigabyte) auf 32\-Bit\-Systemen. (Mit der Definition dieses
Makros können korrekt geschriebene Programme nach einer einfachen
Neukompilierung große Dateien bearbeiten.) 64\-Bit\-Systeme erlauben natürlich
Dateigrößen größer als 2 Gigabyte. Auf diesen Systemen dieses Makro hat
keine Wirkung.
.TP 
\fB_BSD_SOURCE\fP
Die Zuweisung eines beliebigen Wertes für dieses Makro aktiviert von BSD
abgeleitete Definitionen. Die Definition dieses Makros bewirkt auch, dass
BSD\-Definitionen in manchen Situationen vorgezogen werden, wenn sich
Standards widersprechen. Sind aber eines oder mehrere Makros aus der Gruppe
\fB_SVID_SOURCE\fP, \fB_POSIX_SOURCE\fP, \fB_POSIX_C_SOURCE\fP, \fB_XOPEN_SOURCE\fP,
\fB_XOPEN_SOURCE_EXTENDED\fP oder \fB_GNU_SOURCE\fP definiert, werden
BSD\-Definitionen missachtet.
.TP 
\fB_SVID_SOURCE\fP
Die Definition dieses Makros mit einem beliebigen Wert veranlasst
Header\-Dateien zur Aktivierung von von System V abgeleiteten
Definitionen. (SVID steht für System V Interface Definition; siehe
\fBstandards\fP(7).)
.TP 
\fB_ATFILE_SOURCE\fP (seit Glibc 2.4)
Die Definition dieses Makros mit einem beliebigen Wert veranlasst
Header\-Dateien zur Aktivierung einer Auswahl von Funktion mit der Endung
»at«, siehe \fBopenat\fP(2). Seit Glibc 2.10 wird dieses Makro auch implizit
definiert, wenn \fB_POSIX_C_SOURCE\fP mit einem Wert größer oder gleich 200809L
definiert ist.
.TP 
\fB_GNU_SOURCE\fP
Die Definition dieses Makros (mit einem beliebigen Wert) ist gleichwertig
mit der Definition von \fB_BSD_SOURCE\fP, \fB_SVID_SOURCE\fP, \fB_ATFILE_SOURCE\fP,
\fB_LARGEFILE64_SOURCE\fP, \fB_ISOC99_SOURCE\fP, \fB_XOPEN_SOURCE_EXTENDED\fP,
\fB_POSIX_SOURCE\fP, \fB_POSIX_C_SOURCE\fP mit dem Wert 200809L (200112L in
Glibc\-Versionen vor 2.10; 199506L in Glibc\-Versionen vor 2.5; 199309L in
Glibc\-Versionen vor 2.1) und \fB_XOPEN_SOURCE\fP mit dem Wert 700 (600 in
Glibc\-Versionen vor 2.10; 500 in Glibc\-Versionen vor 2.2). Darüber hinaus
werden verschiedene GNU\-spezifische Erweiterungen aktiviert. Widersprüche
zwischen Standards werden unter Ausschluss von BSD\-Funktionen gelöst.
.TP 
\fB_REENTRANT\fP
Die Definition dieses Makros aktiviert bestimmte wiedereintrittsfähige
Funktionen. Für Multithread\-fähige Programm verwenden Sie stattdessen \fIcc\ \-pthread\fP.
.TP 
\fB_THREAD_SAFE\fP
Synonym für \fB_REENTRANT\fP; wird für die Kompatibilität mit einigen anderen
Implementierungen bereitgestellt.
.TP 
\fB_FORTIFY_SOURCE\fP (seit Glibc 2.3.4)
.\" For more detail, see:
.\" http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
.\" [PATCH] Object size checking to prevent (some) buffer overflows
.\" * From: Jakub Jelinek <jakub at redhat dot com>
.\" * To: gcc-patches at gcc dot gnu dot org
.\" * Date: Tue, 21 Sep 2004 04:16:40 -0400
Die Definition dieses Makros bewirkt, dass einige einfache Kontrollen für
die Erkennung von Pufferüberlauffehlern. Diese Fehler können bei der
Verwendung diverser Funktionen für die Manipulation von Zeichenketten und
Speicher auftreten. Es werden nicht alle Pufferüberlauffehler erkannt
werden, nur einige der häufigsten Fälle. Die aktuelle Implementierung
enthält Kontrollen für die Aufrufe von \fBmemcpy\fP(3), \fBmempcpy\fP(3),
\fBmemmove\fP(3), \fBmemset\fP(3), \fBstpcpy\fP(3), \fBstrcpy\fP(3), \fBstrncpy\fP(3),
\fBstrcat\fP(3), \fBstrncat\fP(3), \fBsprintf\fP(3), \fBsnprintf\fP(3), \fBvsprintf\fP(3),
\fBvsnprintf\fP(3) und \fBgets\fP(3). Ist der Wert von \fB_FORTIFY_SOURCE\fP gleich 1
und die Compiler\-Optimierungsstufe 1 (\fIgcc\ \-O1\fP) oder höher, erfolgt eine
Beschränkung auf Kontrollen, die das Verhalten standardkonformer Programme
nicht ändern sollten. Wird \fB_FORTIFY_SOURCE\fP auf 2 gesetzt, werden ein paar
Kontrollen hinzugefügt, die aber Fehler in einigen standardkonformen
Programmen bewirken könnten. Einige der Prüfungen können bei der
Kompilierung ausgeführt werden und führen zu Compiler\-Warnungen, andere
Kontrollen finden zur Laufzeit statt und führen zu einem Laufzeitfehler,
wenn die Überprüfung fehlschlägt. Der Compiler muss die Verwendung dieses
Makros unterstützen, was für \fBgcc\fP(1) seit Version 4.0 der Fall ist.
.SS "Standarddefinitionen, implizite Definitionen und Kombinationsdefinitionen"
.PP
Ohne explizit definierte Feature\-Test\-Makros werden standardmäßig die
folgenden Feature\-Test\-Makros definiert: \fB_BSD_SOURCE\fP, \fB_SVID_SOURCE\fP,
\fB_POSIX_SOURCE\fP und \fB_POSIX_C_SOURCE\fP=200809L (200112L in Glibc\-Versionen
vor 2.10; 199506L in Glibc\-Versionen vor 2.4; 199309L in Glibc\-Versionen vor
2.1).
.PP
Wenn eines von \fB__STRICT_ANSI__\fP, \fB_ISOC99_SOURCE\fP, \fB_POSIX_SOURCE\fP,
\fB_POSIX_C_SOURCE\fP, \fB_XOPEN_SOURCE\fP, \fB_XOPEN_SOURCE_EXTENDED\fP,
\fB_BSD_SOURCE\fP oder \fB_SVID_SOURCE\fP explizit definiert ist, dann werden
standardmäßig \fB_BSD_SOURCE\fP und \fB_SVID_SOURCE\fP nicht definiert.

Sind \fB_POSIX_SOURCE\fP und \fB_POSIX_C_SOURCE\fP nicht explizit definiert und
entweder \fB__STRICT_ANSI__\fP ist nicht definiert oder \fB_XOPEN_SOURCE\fP hat
einen Wert von 500 oder mehr, dann
.RS 3
.IP * 3
wird \fB_POSIX_SOURCE\fP auf den Wert 1 gesetzt und
.IP *
\fB_POSIX_C_SOURCE\fP erhält einen der folgenden Werte:
.RS 6
.IP \(bu 3
2, \fBXOPEN_SOURCE\fP mit einem Wert kleiner als 500 definiert ist;
.IP \(bu
199506L, \fBXOPEN_SOURCE\fP mit einem Wert größer oder gleich 500 und kleiner
als 600 definiert ist; oder
.IP \(bu
(Seit Glibc 2.4) 200112L, \fBXOPEN_SOURCE\fP mit einem Wert größer oder gleich
600 und kleiner als 700 definiert ist.
.IP \(bu
(Seit Glibc 2.4) 200809L, wenn \fBXOPEN_SOURCE\fP mit einem Wert größer oder
gleich 700 definiert ist.
.IP \(bu
Ältere Versionen von Glibc kennen die Werte 200112L und 200809L für
\fB_POSIX_C_SOURCE\fP nicht, der Wert für das Makro hängt also von der
Glibc\-Version ab.
.IP \(bu
Wenn \fB_XOPEN_SOURCE\fP nicht definiert ist, hängt der zulässige Wert von
\fB_POSIX_C_SOURCE\fP von der Glibc\-Version ab: 199506L für Glibc\-Versionen vor
2.4; 200112L für Glibc 2.4 bis 2.9 und 200809L seit Glibc 2.10.
.RE
.RE
.PP
Es können mehrere Makros definiert werden, die Effekte akkumulieren sich.
.SH "KONFORM ZU"
POSIX.1 legt \fB_POSIX_C_SOURCE\fP, \fB_POSIX_SOURCE\fP und \fB_XOPEN_SOURCE\fP
fest. \fB_XOPEN_SOURCE_EXTENDED\fP wurde von XPG4v2 (auch bekannt als SUSv1)
spezifiziert.

\fB_FILE_OFFSET_BITS\fP kommt in keinem Standard vor, wird aber auf
verschiedenen anderen Implementierungen verwendet.

\fB_BSD_SOURCE\fP, \fB_SVID_SOURCE\fP, \fB_ATFILE_SOURCE\fP, \fB_GNU_SOURCE\fP,
\fB_FORTIFY_SOURCE\fP, \fB_REENTRANT\fP und \fB_THREAD_SAFE\fP sind Linux\-spezifisch
(Glibc).
.SH ANMERKUNGEN
\fI<features.h>\fP ist eine Linux/Glibc\-spezifische
Header\-Datei. Andere Systeme verfügen über eine analoge Datei, die in der
Regel einen anderen Namen trägt. Diese Header\-Datei wird bei Bedarf
automatisch durch andere Header\-Dateien einbezogen: sie muss nicht explizit
einbezogen werden, um Feature\-Test\-Makros zu verwenden.

Je nachdem, welche der oben genannten Feature\-Test\-Makros definiert sind,
definiert \fI<features.h>\fP intern verschiedene weitere Makros, die
von anderen Glibc\-Header\-Dateien überprüft werden. Die Namen dieser Makros
beginnen mit zwei vorangestellten Unterstrichen
(z. B. \fB__USE_MISC\fP). Programme sollten diese Makros \fInie\fP direkt
definieren: stattdessen sollten die passenden Feature\-Test\-Makro(s) aus der
obigen Liste eingesetzt werden.
.SH BEISPIEL
Mit dem folgenden Programm können Sie erkunden, wie die verschiedenen
Feature\-Test\-Makros abhängig von der Glibc\-Version und welche explizit
gesetzt werden. Die folgende Shell\-Sitzung auf einem System mit Glibc 2.10
zeigt einige Beispiele für mögliche Ausgaben:
.in +4n
.nf

$ \fBcc ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE definiert
_POSIX_C_SOURCE definiert: 200809L
_BSD_SOURCE definiert
_SVID_SOURCE definiert
_ATFILE_SOURCE definiert
$ \fBcc \-D_XOPEN_SOURCE=500 ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE definiert
_POSIX_C_SOURCE definiert: 199506L
_XOPEN_SOURCE definiert: 500
$ \fBcc \-D_GNU_SOURCE ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE definiert
_POSIX_C_SOURCE definiert: 200809L
_ISOC99_SOURCE definiert
_XOPEN_SOURCE definiert: 700
_XOPEN_SOURCE_EXTENDED definiert
_LARGEFILE64_SOURCE definiert
_BSD_SOURCE definiert
_SVID_SOURCE definiert
_ATFILE_SOURCE definiert
_GNU_SOURCE definiert
.fi
.in
.SS Programmquelltext
\&
.nf
/* ftm.c */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
#ifdef _POSIX_SOURCE
    printf("_POSIX_SOURCE definiert\en");
#endif

#ifdef _POSIX_C_SOURCE
    printf("_POSIX_C_SOURCE definiert: %ldL\en", (long) _POSIX_C_SOURCE);
#endif

#ifdef _ISOC99_SOURCE
    printf("_ISOC99_SOURCE definiert\en");
#endif

#ifdef _XOPEN_SOURCE
    printf("_XOPEN_SOURCE definiert: %d\en", _XOPEN_SOURCE);
#endif

#ifdef _XOPEN_SOURCE_EXTENDED
    printf("_XOPEN_SOURCE_EXTENDED definiert\en");
#endif

#ifdef _LARGEFILE64_SOURCE
    printf("_LARGEFILE64_SOURCE definiert\en");
#endif

#ifdef _FILE_OFFSET_BITS
    printf("_FILE_OFFSET_BITS definiert: %d\en", _FILE_OFFSET_BITS);
#endif

#ifdef _BSD_SOURCE
    printf("_BSD_SOURCE definiert\en");
#endif

#ifdef _SVID_SOURCE
    printf("_SVID_SOURCE definiert\en");
#endif

#ifdef _ATFILE_SOURCE
    printf("_ATFILE_SOURCE definiert\en");
#endif

#ifdef _GNU_SOURCE
    printf("_GNU_SOURCE definiert\en");
#endif

#ifdef _REENTRANT
    printf("_REENTRANT definiert\en");
#endif

#ifdef _THREAD_SAFE
    printf("_THREAD_SAFE definiert\en");
#endif

#ifdef _FORTIFY_SOURCE
    printf("_FORTIFY_SOURCE definiert\en");
#endif

    exit(EXIT_SUCCESS);
}
.fi
.SH "SIEHE AUCH"
\fBlibc\fP(7), \fBstandards\fP(7)
.sp
.\" But beware: the info libc document is out of date (Jul 07, mtk)
Der Abschnitt »Feature Test Macros« unter \fIinfo libc\fP.
.sp
\fI/usr/include/features.h\fP
.SH KOLOPHON
Diese Seite ist Teil der Veröffentlichung 3.35 des Projekts
Linux\-\fIman\-pages\fP. Eine Beschreibung des Projekts und Informationen, wie
Fehler gemeldet werden können, finden sich unter
http://man7.org/linux/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Martin Eberhard Schauer <Martin.E.Schauer@gmx.de>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
