.\" -*- coding: UTF-8 -*-
.\" t
.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SHM_OVERVIEW 7 "10. September 2010" Linux Linux\-Programmierhandbuch
.SH BEZEICHNUNG
shm_overview \- Überblick über gemeinsame Speichernutzung gemäß POSIX
.SH BESCHREIBUNG
Die POSIX\-API für gemeinsame Speichernutzung ermöglicht Prozessen den
Austausch von Informationen in einem gemeinsamen Speicherbereich.

In der API werden die folgenden Schnittstellen genutzt:
.TP  15
\fBshm_open\fP(3)
erstellt und öffnet ein neues Objekt oder öffnet ein vorhandenes Objekt. Das
ist analog zu \fBopen\fP(2). Der Aufruf gibt einen Dateideskriptor zurück, der
für die Nutzung durch die im Folgenden aufgelisteten Schnittstellen bestimmt
ist.
.TP 
\fBftruncate\fP(2)
bestimmt die Größe des gemeinsamen Speicherobjekts. (Ein neu erzeugtes
gemeinsames Speicherobjekt hat eine Ausdehnung von Null).
.TP 
\fBmmap\fP(2)
bildet das gemeinsame Speicherobjekt in den virtuellen Adressraum des
aufrufenden Prozesses ab.
.TP 
\fBmunmap\fP(2)
löst das gemeinsame Speicherobjekt aus dem virtuellen Adressraum des
aufrufenden Prozesses heraus.
.TP 
\fBshm_unlink\fP(3)
entfernt den Namen eines gemeinsamen Speicherobjekts.
.TP 
\fBclose\fP(2)
schließt den von \fBshm_open\fP(3) bereitgestellten Dateideskriptor, wenn
dieser nicht mehr benötigt wird.
.TP 
\fBfstat\fP(2)
beschafft eine \fIstat\fP\-Struktur, die das gemeinsame Speicherobjekt
beschreibt. Zu den von diesem Aufruf zurückgegebenen Informationen gehören
die Größe des Objekts (\fIst_size\fP), Rechte (\fIst_mode\fP), Besitzer
(\fIst_uid\fP) und Gruppe (\fIst_gid\fP).
.TP 
\fBfchown\fP(2)
ändert den Besitzer eines gemeinsamen Speicherobjekts.
.TP 
\fBfchmod\fP(2)
ändert die Rechte eines gemeinsamen Speicherobjekts.
.SS Versionen
Gemeinsamer Speicher gemäß POSIX wird seit Linux 2.4 und Glibc 2.2
unterstützt.
.SS "Langlebigkeit (Persistenz)"
Gemeinsame POSIX\-Speicherobjekte sind im Kernel sehr langlebig: Ein
gemeinsames Speicherobjekt besteht fort, bis das System heruntergefahren
wird oder bis alle Prozesse das Objekt aus ihrem Adressraum entfernt haben
und es mittels \fBshm_unlink\fP(3) »zerstört« wurde.
.SS Linken
Programme, die die POSIX\-API für gemeinsame Speichernutzung verwenden,
müssen mit \fIcc \-lrt\fP übersetzt werden, damit sie gegen die
Echtzeit\-Bibliothek \fIlibrt\fP gelinkt werden.
.SS "Zugriff auf gemeinsame Speicherobjekte über das Dateisystem"
Unter Linux werden gemeinsame Speicherobjekte in einem virtuellen
Dateisystem (\fItmpfs\fP) erzeugt, das üblicherweise unter \fI/dev/shm\fP
eingehängt wird. Seit Kernel 2.6.19 unterstützt Linux die Verwendung von
Zugriffs\-Kontrolllisten (access control list, ACL) zur Rechtevergabe für die
Objekte im virtuellen Dateisystem.
.SH "KONFORM ZU"
POSIX.1\-2001.
.SH ANMERKUNGEN
Normalerweise müssen Prozesse ihren Zugriff auf ein gemeinsames
Speicherobjekt synchronisieren, beispielsweise mit POSIX\-Semaphoren.

Gemeinsam genutzter System\-V\-Speicher (\fBshmget\fP(2), \fBshmop\fP(2), etc.) ist
eine ältere API für gemeinsame Speichernutzung. Gemeinsamer Speicher nach
POSIX stellt eine einfachere und besser entworfene Schnittstelle bereit. Auf
der anderen Seite ist gemeinsamer Speicher nach POSIX nicht so weit
verbreitet (besonders auf älteren Systemen) als das System\-V\-Verfahren.
.SH "SIEHE AUCH"
\fBfchmod\fP(2), \fBfchown\fP(2), \fBfstat\fP(2), \fBftruncate\fP(2), \fBmmap\fP(2),
\fBmprotect\fP(2), \fBmunmap\fP(2), \fBshmget\fP(2), \fBshmop\fP(2), \fBshm_open\fP(3),
\fBshm_unlink\fP(3), \fBsem_overview\fP(7)
.SH KOLOPHON
This page is part of release 3.40 of the Linux \fIman\-pages\fP project.  A
description of the project, and information about reporting bugs, can be
found at http://www.kernel.org/doc/man\-pages/.

.SH ÜBERSETZUNG
Die deutsche Übersetzung dieser Handbuchseite wurde von
Martin Eberhard Schauer <Martin.E.Schauer@gmx.de>
erstellt.

Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 3 oder neuer bezüglich der
Copyright-Bedingungen. Es wird KEINE HAFTUNG übernommen.

Wenn Sie Fehler in der Übersetzung dieser Handbuchseite finden,
schicken Sie bitte eine E-Mail an <debian-l10n-german@lists.debian.org>.
